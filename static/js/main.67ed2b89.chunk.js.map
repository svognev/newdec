{"version":3,"sources":["components/DecoratorDialog/common/CustomInput.js","components/DecoratorDialog/common/LabelWithAsterisk.js","components/DecoratorDialog/helpers/DecDataParser.js","components/DecoratorDialog/helpers/isFontAvailable.js","components/DecoratorDialog/helpers/getShortCutUtils.js","components/DecoratorDialog/constants/decoratorsList.js","components/DecoratorDialog/constants/fontsSet.js","components/DecoratorDialog/constants/localeConstants.js","components/DecoratorDialog/constants/validationData.js","components/DecoratorDialog/constants/constants.js","components/DecoratorDialog/constants/initialFormState.js","components/DecoratorDialog/helpers/validationFunctions.js","components/DecoratorDialog/helpers/helpers.js","components/DecoratorDialog/common/NewGroupDialog.js","components/DecoratorDialog/hoc/withNewGroupControl.js","components/DecoratorDialog/actions/index.js","components/DecoratorDialog/sections/NamesSection.js","components/DecoratorDialog/common/CustomInputShort.js","components/DecoratorDialog/common/SectionTitle/index.js","components/DecoratorDialog/common/SectionTitle/SectionTitle.js","components/DecoratorDialog/sections/PositioningSection/BackSpaceActionInput.js","components/DecoratorDialog/sections/PositioningSection/index.js","components/DecoratorDialog/sections/PositioningSection/PositioningSection.js","components/DecoratorDialog/common/Preview/generators.js","components/DecoratorDialog/common/Preview/ListPreview.js","components/DecoratorDialog/common/ColorField/index.js","components/DecoratorDialog/common/ColorField/ColorField.js","components/DecoratorDialog/common/FontSelectFields.js","components/DecoratorDialog/sections/ListSection/ListSection.js","components/DecoratorDialog/sections/ListSection/index.js","components/DecoratorDialog/sections/ReferencingSection.js","components/DecoratorDialog/common/ContentEditable.js","components/DecoratorDialog/common/Preview/Preview.js","components/DecoratorDialog/common/Preview/index.js","components/DecoratorDialog/sections/TypographySection/index.js","components/DecoratorDialog/sections/TypographySection/TypographySection.js","components/DecoratorDialog/common/ConnectToPreviousField.js","components/DecoratorDialog/sections/DistancesSection.js","components/DecoratorDialog/sections/FramesSection/FrameTypeInput.js","components/DecoratorDialog/sections/FramesSection/generateBorderPreviewStyle.js","components/DecoratorDialog/sections/FramesSection/FramesSection.js","components/DecoratorDialog/sections/FramesSection/index.js","components/DecoratorDialog/sections/FillingSection.js","components/DecoratorDialog/sections/TocSection.js","components/DecoratorDialog/sections/ShortCutsSection.js","components/DecoratorDialog/theme.js","components/DecoratorDialog/common/CustomTab.js","components/DecoratorDialog/common/CustomErrorTab.js","components/DecoratorDialog/common/CustomTabs.js","components/DecoratorDialog/common/CustomDialog.js","actions.js","components/DecoratorDialog/DecoratorDialog.js","components/DecoratorDialog/index.js","App.js","reducers/decoratorDialogReducer/isOpenReducer.js","reducers/decoratorDialogReducer/decoratorFormReducer.js","reducers/decoratorDialogReducer/validationErrorReducer.js","reducers/decoratorDialogReducer/isEditModeReducer.js","reducers/decoratorDialogReducer/openedTabReducer.js","reducers/decoratorDialogReducer/index.js","reducers/savedFormReducer.js","reducers/rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","LabelWithAsterisk","children","className","DecDataParser","dec","mapDecFields","width","getShortCutUtils","systemName","e","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","indexOf","isCmdPressed","value","stringValue","Object","keys","CMD_KEYS","forEach","key","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","item_type","isEqual","keyboard_shortcut","childItems","child_items","itemKey","style","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","body","document","container","createElement","innerHTML","Array","cssText","getWidth","appendChild","clientWidth","removeChild","monoWidth","serifWidth","sansWidth","isFontAvailable","font","decoratorsList","name","fontSet","LANGS","langKey","langName","langFullName","regionName","regionFullName","ADDITIONAL_LANGS","slice","MAIN_LANG_KEY","tabsErrorInitialState","namesSection","listSection","sectionsTabNumbers","tabName","tabNumber","alignmentsMap","center","left","right","justify","backSpaceActions","bulletNamesMap","bulletpoint","dash","star","listStyleTypes","numberingSets","decimal","sectionTypesMap","HOLDER","autoFillingRequiredFields","sideNumberFont","sideNumberFontSize","sideNumberFontColor","sideNumberFillingColor","sideNumberWidth","sideNumberRadius","fontColor","marginBottom","firstRowIndent","otherRowsIndent","wordSpacing","lineSpacing","borderThickness","initialFormState","decKey","sectionTypes","reduce","acc","i","group","groupToCreate","active","indentationalLevel","fixedIndentation","softReturn","backspaceActionWithContent","backspaceActionWithContentStyle","returnActionNextSection","returnActionEmptySection","tabAction","shiftTabAction","isList","listName","orderLevel","prefix","suffix","suffixDistance","magicTabs","listType","listItem","unicodeNumber","unicodeChar","numberingStyle","continueNumbering","allowRestartNumbering","includePreviousFrom","sideNumber","customSideNumberFont","sideNumberAlignment","sideNumberBold","sideNumberItalic","sideNumberUnderlined","sideNumberLineHeight","referenceGroup","referenceGroupToCreate","customFont","alignment","bold","italic","underlined","stroke","textTransform","readOnly","connectToPrevious","verticalAlign","customLineSpacing","borderLeft","borderRight","borderTop","borderBottom","borderType","fillingColor","tocIndentation","shortCutWin","shortCutWinView","shortCutMac","shortCutMacView","getTabsErrorState","form","tabsErrorState","getTabNumberToSwitch","getCorrectColor","hex","correctColor","length","selectAllOnClick","defaultValue","target","focus","select","getUnstyledText","styledText","unstyledText","replace","unicodeNumberToChar","String","fromCharCode","parseInt","unicodeCharToNumber","charCodeAt","toString","scrollToBottom","setTimeout","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","changeAndScroll","changeFunction","timeOut","focusInput","inputRef","timeout","current","focusOnEmptyField","refs","getPreviewFont","fillMissedFields","currentFormState","formStateWithoutMissedFields","fieldName","option","customOption","NewGroupDialog","isXref","props","groupType","emptyGroup","groupKey","getInitialState","savedGroup","state","requiredFieldRef","React","createRef","onInputChange","inputName","setState","onClose","hideGroupDialogValidationError","closeGroupDialog","onGroupSave","trim","groupToSave","saveGroup","showGroupDialogValidationError","this","isOpen","isEditMode","hasGroupDialogValidationError","titleText","buttonText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","onChange","error","variant","margin","map","Fragment","DialogActions","Button","onClick","color","PureComponent","withNewGroupControl","ViewComponent","isGroupDialogOpen","openGroupDialog","Component","updateDecoratorForm","payload","type","clearDecoratorForm","updateValidationError","openDialog","dispatch","closeDialog","setValue","propName","secondArg","newValue","undefined","toggleValue","checked","setBullet","newBullet","setColor","filteredInput","match","setNumber","setShortCut","valuePropName","viewPropName","search","convertEventToShortCut","NamesSection","decKeyInputRef","decNameEnInputRef","inputRefs","onGroupChange","groupName","changeGroupToCreate","changeGroup","onNameChange","changeName","onSectionTypesChange","typeName","changeSectionTypes","validationErrorInSection","prevprops","every","ref","changeDecKey","changeActive","newGroupName","FormControlLabel","control","Checkbox","label","labelPlacement","NativeSelect","connect","decoratorDialog","validationError","formState","CustomInputShort","SectionTitle","text","BackSpaceActionInput","PositioningSection","changeIndentationalLevel","changeBackspaceActionWithContent","changeBackspaceActionWithContentStyle","changeBackspaceActionWithoutContent","changeBackspaceActionWithoutContentStyle","changeReturnActionNextSection","changeReturnActionEmptySection","changeTabAction","changeShiftTabAction","changeisFixedIndentation","changeSoftReturn","backSpaceActionStyleSettingsState","action","generatePreviewStyle","fillingConnectToPrevious","previewFontColor","previewFillingColor","previewAdditionalFillingColor","indentsDifference","previewMarginLeft","previewTextIndent","previewLineSpacing","offset","alignType","parseFloat","getOffset","previewMarginTop","previewMarginBottom","previewBorderLeft","previewBorderRight","previewBorderTop","previewBorderBottom","correctFontSize","alignItems","textAlign","fontWeight","fontStyle","textDecoration","fontVariant","backgroundImage","borderImage","marginLeft","textIndent","lineHeight","outline","paddingLeft","paddingRight","paddingTop","paddingBottom","previewText","isOrderedList","listItemBeginnings","fill","getListChars","listChar","previewStyle","isSideNumber","sideNumberStyle","previewSideNumberFontColor","previewSideNumberFillingColor","marginRight","generateSideNumberStyle","listItemBeginningStyle","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","defaultColorCode","required","bottomAligned","colorError","inputError","pickerColor","colorSampleStyle","colorPickerClassName","InputProps","startAdornment","InputAdornment","onChangeComplete","disableAlpha","FontSelectFields","customFontInputRef","onFontChange","changeFont","changeCustomFont","availableFonts","filter","fontName","optionalFieldState","placeholder","ListSection","listNameInputRef","unicodeCharInputRef","onIsListChange","changeListName","changeIsList","onListTypeChange","changeListType","changeSuffix","onListItemChange","changeListItem","onUnicodeNumberChange","newUnicodeNumber","changeUnicodeNumber","newUnicodeChar","changeUnicodeChar","onUnicodeCharChange","onSideNumberChange","changeSideNumber","listPreviewProps","changeOrderLevel","changePrefix","changeSuffixDistance","changeMagicTabs","changeNumberingStyle","changeContinueNumbering","changeAllowRestartNumbering","changeIncludePreviousFrom","changeSideNumberFont","changeCustomSideNumberFont","changeSideNumberAlignment","changeSideNumberFontSize","changeSideNumberFontColor","changeSideNumberFillingColor","changeSideNumberWidth","changeSideNumberRadius","changeSideNumberBold","changeSideNumberItalic","changeSideNumberUnderlined","changeSideNumberLineHeight","mainListSettingsState","unorderedListSettingsState","customListItemSettingsState","orderedListSettingsState","sideNumberSettingsState","RadioGroup","row","Radio","entries","ReferencingSection","onXrefChange","xrefName","xref","changeReferenceGroupToCreate","changeReferenceGroup","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","q","propertyIsEnumerable","normalizeHtml","str","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","getEl","emitChange","originalEvt","evt","assign","_a","tagName","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","onPreviewTextChange","changePreviewText","selectAllChildren","TypographySection","changeAlignment","changeFontSize","changeFontColor","changeBold","changeItalic","changeUnderlined","changeStroke","changeTextTransform","changeVerticalAlign","changeMarginTop","changeReadOnly","previewProps","changeConnectToPrevious","DistancesSection","customLineSpacingInputRef","onLineSpacingChange","changeLineSpacing","changeMarginBottom","changeFirstRowIndent","changeOtherRowsIndent","changeCustomLineSpacing","changeWordSpacing","customLineSpacingFieldState","marginFieldsState","FrameTypeInput","generateBorderPreviewStyle","previewBorderWidth","isNaN","FramesSection","onBorderTypeChange","changeBorderType","changeBorderThickness","changeBorderLeft","changeBorderRight","changeBorderTop","changeBorderBottom","changeBorderColor","id","Select","MenuItem","changeFillingColor","changeTocIndentation","changeShortCutWin","changeShortCutMac","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomErrorTab","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","saveDecoratorForm","DecoratorDialog","clearForm","onSaveButtonClick","switchTab","sendForm","parseToSend","onTabSwitch","openedTab","ThemeProvider","aria-labelledby","scroll","CustomTabs","orientation","indicatorColor","ShortCutsSection","switchDecDialogTab","saveForm","savedForm","clearSavedForm","parseToEdit","isOpenReducer","initialState","decoratorFormReducer","validationErrorReducer","isEditModeReducer","openedTabReducer","decoratorDialogReducer","combineReducers","savedFormReducer","rootReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"miBAoCiBA,EAjCGC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,YAAa,CACXC,UAAWF,EAAMG,QAAQ,KAG7BC,MAAO,CACLC,aAAc,EACdC,SAAU,QACVC,SAAU,WACVC,gBAAiBR,EAAMS,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,GACVC,QAAS,sBACTC,WAAYf,EAAMgB,YAAYC,OAAO,CAAC,eAAgB,eACtDC,WAAY,CACV,SACA,mBACA,QACA,cACAC,KAAK,KACP,UAAW,CACTd,aAAc,EACde,YAAa,WAEf,UAAW,CACTf,aAAc,EACde,YAAa,UACbC,UAAW,0BA5BCtB,CA+BduB,K,kBCnBSC,EAbW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,8BACX,8BAAOD,IAEX,yBAAKC,UAAU,iCACX,0BAAMA,UAAU,kCAAhB,QCeVC,E,yGACiBC,GACf,OAAOA,I,kCAGQA,GACf,OAAOA,M,KANTD,EASKE,aAAe,GAGXF,ICnCXG,EDmCWH,I,mCEwEAI,EAzGU,SAAAC,GAAe,IAAD,IACrC,OAAO,EAAP,yGAQmBC,GACf,OAAqB,MAAdA,EAAEC,UATb,8BAYiBD,GACbA,EAAEE,iBACFF,EAAEG,oBAdN,6CAiBgCH,GAC5B,GAAII,EAAcC,UAAUL,GAE1B,OADAI,EAAcE,QAAQN,GACf,CAAEO,WAAW,GAEtBH,EAAcE,QAAQN,GACtB,IAAMQ,EAAW,CACfP,QAASD,EAAEC,QACXQ,QAAST,EAAES,QACXC,SAAUV,EAAEU,SACZC,OAAQX,EAAEW,OACVC,SAAS,GAEQ,UAAfb,IACFS,EAASI,QAAUZ,EAAEY,SAEvB,IAEMC,EAAkBT,EAAcU,sBAAsBN,GAC5D,MAHmB,CAAC,EAAG,IAGRO,QAAQf,EAAEC,UAAY,EAC5B,CAAEM,WAAW,GACXM,EAAgBG,eAAqD,IAJ3D,CAAC,GAAI,GAAI,GAAI,IAIsBD,QAAQf,EAAEC,SACzD,CACLgB,MAAOT,EACPU,YAAaL,EAAgBK,aAG1B,OA5CX,gDA+CiD,IAAhBV,EAAe,uDAAJ,GACxC,OAAOJ,EAAcU,sBAAsBN,GAAUU,cAhDzD,8CAmD+C,IAAhBV,EAAe,uDAAJ,GAClCK,EAAkB,GAClBG,GAAe,EAUnB,OATAG,OAAOC,KAAKhB,EAAciB,UAAUC,QAAQ,SAACC,GACvCf,GAAYA,EAASe,KACvBP,GAAe,EACfH,GAAe,UAAOT,EAAciB,SAASE,GAA9B,UAGff,GAAYA,EAASP,UACvBY,GAAmBW,IAAQhB,EAASP,UAE/B,CAAEiB,YAAaL,EAAiBG,oBA/D3C,OACSK,SAAW,CAChBV,OAAuB,UAAfZ,EAAyB,SAAW,MAC5CU,QAAwB,UAAfV,EAAyB,UAAY,OAC9CW,SAAU,QACVE,QAAS,WALb,EAkESa,yBAA2B,SAAUC,EAAYC,GACtD,IAAIC,GAAU,EAoBd,OAnBAT,OAAOC,KAAKM,GAAYJ,QAAQ,SAACO,GAC/B,IAAMC,EAAOJ,EAAWG,GAExB,GAAiB,UADAC,EAAKC,UAEhBC,IAAQF,EAAKG,kBAAmBN,KAClCD,EAAWG,GAAcI,kBAAoB,KAC7CL,GAAU,OAEP,CACL,IAAMM,EAAaJ,EAAKK,YACxBhB,OAAOC,KAAKc,GAAYZ,QAAQ,SAACc,GAC/B,IAAMC,EAAQH,EAAWE,GACrBJ,IAAQK,EAAMJ,kBAAmBN,KACnCU,EAAMJ,kBAAoB,KAC1BL,GAAU,QAKXA,GAvFX,EA0FSU,sCAAwC,SAAUC,EAAcZ,GACrE,IAAIC,GAAU,EAQd,OAPAT,OAAOC,KAAKmB,GAAcjB,QAAQ,SAACkB,GACjC,IAAMV,EAAOS,EAAaC,GACtBR,IAAQF,EAAKG,kBAAmBN,KAClCY,EAAaC,GAAUP,kBAAoB,KAC3CL,GAAU,KAGPA,GAnGX,GDJMa,EAASC,SAATD,KAGFE,EAAYD,SAASE,cAAc,QACzCD,EAAUE,UAAYC,MAAM,KAAK3D,KAAK,MACtCwD,EAAUN,MAAMU,QAAU,CACtB,oBACA,aACA,kBACA,iBACF5D,KAAK,gBAEP,IAAM6D,EAAW,SAAA9D,GAOb,OANAyD,EAAUN,MAAMnD,WAAaA,EAE7BuD,EAAKQ,YAAYN,GACjB9C,EAAQ8C,EAAUO,YAClBT,EAAKU,YAAYR,GAEV9C,GAGLuD,EAAaJ,EAAS,aACtBK,EAAaL,EAAS,SACtBM,EAAaN,EAAS,cAQbO,EANS,SAAAC,GACpB,OAAOJ,IAAcJ,EAASQ,EAAO,eACrCF,IAAcN,EAASQ,EAAO,gBAC9BH,IAAeL,EAASQ,EAAO,WEhBpBC,EAbQ,CACnB,CAAEC,KAAM,SAAUzC,MAAO,gBACzB,CAAEyC,KAAM,SAAUzC,MAAO,gBACzB,CAAEyC,KAAM,SAAUzC,MAAO,gBACzB,CAAEyC,KAAM,SAAUzC,MAAO,gBACzB,CAAEyC,KAAM,SAAUzC,MAAO,gBACzB,CAAEyC,KAAM,YAAazC,MAAO,mBAC5B,CAAEyC,KAAM,YAAazC,MAAO,mBAC5B,CAAEyC,KAAM,YAAazC,MAAO,mBAC5B,CAAEyC,KAAM,YAAazC,MAAO,mBAC5B,CAAEyC,KAAM,YAAazC,MAAO,oBCEjB0C,EAZC,CACZ,kBACA,cACA,eACA,YACA,aACA,QACA,UACA,UACA,mBCTSC,EAAQ,CACnB,CACEC,QAAS,QACTC,SAAU,KACVC,aAAc,WAEhB,CACEF,QAAS,QACTC,SAAU,KACVC,aAAc,UAEhB,CACEF,QAAS,QACTC,SAAU,KACVC,aAAc,WAEhB,CACEF,QAAS,QACTC,SAAU,KACVC,aAAc,SACdC,WAAY,KACZC,eAAgB,UAElB,CACEJ,QAAS,QACTC,SAAU,KACVC,aAAc,SACdC,WAAY,KACZC,eAAgB,UAElB,CACEJ,QAAS,QACTC,SAAU,KACVC,aAAc,WAEhB,CACEF,QAAS,QACTC,SAAU,KACVC,aAAc,SACdC,WAAY,KACZC,eAAgB,WAElB,CACEJ,QAAS,QACTC,SAAU,KACVC,aAAc,QACdC,WAAY,KACZC,eAAgB,YAIPC,EAAmBN,EAAMO,MAAM,GAE/BC,EAAgBR,EAAM,GAAGC,QCrDzBQ,EAAwB,CACjCC,cAAc,EACdC,aAAa,GAGJC,EAAqB,CAC9B,CAAEC,QAAS,eAAgBC,UAAW,GACtC,CAAED,QAAS,cAAeC,UAAW,ICP5BC,EAAgB,CACzBC,OAAQ,SACRC,KAAM,aACNC,MAAO,WACPC,QAAS,cAGAC,EAAmB,CAC5B,CAAEzD,IAAK,QAASN,MAAO,SACvB,CAAEM,IAAK,iBAAkBN,MAAO,kBAChC,CAAEM,IAAK,YAAaN,MAAO,aAC3B,CAAEM,IAAK,UAAWN,MAAO,YAGhBgE,EAAiB,CAC1BC,YAAa,SACbC,KAAM,SACNC,KAAM,UAGGC,EAAiB,CAC1B,CAAE3B,KAAM,UAAWzC,MAAO,WAC1B,CAAGyC,KAAM,UAAWzC,MAAO,eAC3B,CAAGyC,KAAM,UAAWzC,MAAO,eAC3B,CAAGyC,KAAM,aAAczC,MAAO,eAC9B,CAAGyC,KAAM,aAAczC,MAAO,gBAGrBqE,GAAgB,CACzBC,QAAS,CAAC,IAAK,IAAK,IAAK,KAAM,OAC/B,cAAe,CAAC,IAAK,IAAK,IAAK,KAAM,OACrC,cAAe,CAAC,IAAK,IAAK,IAAK,KAAM,OACrC,cAAe,CAAC,IAAK,KAAM,MAAO,KAAM,OACxC,cAAe,CAAC,IAAK,KAAM,MAAO,KAAM,QAG/BC,GAAkB,CAC9B,CAAEjE,IAAK,OAAQN,MAAO,QACtB,CAAEM,IAAK,QAASN,MAAO,SACvB,CAAEM,IAAK,MAAON,MAAO,U,ujBCpCf,IAAMwE,GAAS,gBAeTC,GAA4B,CACrCC,eAfwB,YAgBxBC,mBAf6B,KAgB7BC,oBAf0C,MAgB1CC,uBAf6C,SAgB7CC,gBAfqC,KAgBrCC,iBAfsC,KAgBtCxC,KArBwB,YAsBxB3E,SArB6B,KAsB7BoH,UAjB8B,MAkB9B/H,UAhB0B,IAiB1BgI,aAjB0B,IAkB1BC,eAnB8B,IAoB9BC,gBApB8B,IAqB9BC,YAnBgC,IAoBhCC,YAnBgC,MAoBhClH,YAnBgC,MAoBhCmH,gBAnBoC,KAsB3BC,GAAgB,MACtBd,GADsB,CAEzBe,OAAQ,GACRC,aAAa,GAAD,GAAOlB,GAAgBmB,OAAO,SAACC,EAAD,EAAeC,GAAf,IAAQtF,EAAR,EAAQA,IAAR,aAA2BqF,EAA3B,eAAiCrF,GAAOsF,KAAM,KACxFC,MAAO,GACPC,cAAe,GACfC,QAAQ,EACRtD,KAAK,GAAD,GAAOE,EAAM+C,OAAO,SAACC,EAAD,OAAQ/C,EAAR,EAAQA,QAAR,aAA4B+C,EAA5B,eAAkC/C,EAAU,MAAO,KAC3EoD,mBAAoB,GACpBC,kBAAkB,EAClBC,YAAY,EACZC,2BAA4B,QAC5BC,gCAAiC,UACjCC,wBAAyB,UACzBC,yBAA0B,UAC1BC,UAAW,GACXC,eAAgB,GAChBC,QAAQ,EACRC,SAAUlC,GACVmC,WAAY,GACZC,OAAQ,GACRC,OAAQ,GACRC,eAAgB,OAChBC,WAAW,EACXC,SAAU,YACVC,SAAU,cACVC,cAAe,GACfC,YAAa,GACbC,eAAgB,UAChBC,mBAAmB,EACnBC,uBAAuB,EACvBC,oBAAqB,GACrBC,YAAY,EACZC,qBAAsB,GACtBC,oBAAqB,SACrBC,gBAAgB,EAChBC,kBAAkB,EAClBC,sBAAsB,EACtBC,qBAAsB,GACtBC,eAAgB,GAChBC,uBAAwB,GACxBC,WAAY,GACZC,UAAW,OACXC,MAAM,EACNC,QAAQ,EACRC,YAAY,EACZC,QAAQ,EACRC,cAAe,OACfC,UAAU,EACVC,mBAAmB,EACnBC,cAAe,WACfC,kBAAmB,GACnBC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,cAAc,EACdC,WAAY,QACZC,aAAc,GACdC,eAAgB,GAChBC,YAAa,GACbC,gBAAiB,GACjBC,YAAa,GACbC,gBAAiB,K,6NClGd,IAEMC,GAAoB,SAAAC,GAC7B,IAAMC,E,uVAAc,IAAQrG,GACpBX,EAA2B+G,EAA3B/G,KAAM+C,EAAqBgE,EAArBhE,OAAQkB,EAAa8C,EAAb9C,SAStB,IAAK,IAAIlD,KAPJf,EAAKU,IAAmBqC,IACzBiE,EAAepG,cAAe,GAE7BqD,IACD+C,EAAenG,aAAc,GAGbmG,EAChB,GAAIA,EAAejG,GACf,OAAOiG,EAGf,OAAO,GAGEC,GAAuB,SAAAD,GAAkB,2BAElD,YAAqClG,EAArC,+CAAyD,CAAC,IAAD,UAA5CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,UAClB,GAAIgG,EAAejG,GACf,OAAOC,GAJmC,oF,sOCf/C,IAAMkG,GAAkB,SAACC,GAAkC,IAA7BrM,EAA4B,uDAAV,MAC7CsM,EAA8B,kBAARD,GAAoC,IAAfA,EAAIE,QAA+B,IAAfF,EAAIE,OAAsBvM,EAANqM,EACzF,OAAOC,GAGEE,GAAmB,SAAAC,GAAY,OAAI,SAAAjL,GACvCiL,GAAgBjL,EAAEkL,OAAOjK,QAAUgK,IACpCjL,EAAEkL,OAAOC,QACTnL,EAAEkL,OAAOE,YAWJC,GAAkB,SAAAC,GAC3B,IAAMC,EAAeD,EAAWE,QAAQ,cAAe,UAAUA,QAAQ,wCAAyC,SAClH,MAA2B,MAApBD,EAAa,GAAb,eAAkCA,EAAlC,UAAyDA,GAGvDE,GAAsB,SAAAtD,GAC/B,OAAOuD,OAAOC,aAAaC,SAASzD,EAAe,MAG1C0D,GAAsB,SAAAzD,GAC/B,OAAOA,EAAY0D,WAAW,GAAGC,SAAS,KAGjCC,GAAiB,SAAAvM,GAC1BwM,WAAW,WAAQvJ,SAASwJ,uBAAuBzM,GAAW,GAAG0M,SAAS,CACtEC,IAAKC,OAAOC,iBACZC,SAAU,YACT,IAGIC,GAAkB,SAACC,EAAgBC,GAAjB,OAA6B,WACxDD,EAAc,WAAd,aACKC,EAGDT,WAAW,WACPD,GAAe,sBAChBU,GAJHV,GAAe,uBAgCVW,GAAa,SAACC,GAA6B,IAAnBC,EAAkB,uDAAR,IAC3CZ,WAAW,WACPW,EAASE,QAAQ3B,SAClB0B,IAGME,GAAoB,SAAAC,GAC7B,IAAK,IAAInG,EAAI,EAAGA,EAAImG,EAAKjC,OAAQlE,IAC7B,IAAKmG,EAAKnG,GAAGiG,QAAQ7L,MAEjB,YADA0L,GAAWK,EAAKnG,KAMfoG,GAAiB,SAACzJ,EAAM0F,GACjC,MAAa,WAAT1F,GAAqBD,EAAgBC,GAC9BA,EACS,WAATA,GAAqB0F,GAAc3F,EAAgB2F,GACnDA,EAEL,IAAN,OFnGwB,YEmGxB,4BAGSgE,GAAmB,SAAAC,GAAqB,IAE7C3J,EAGA2J,EAHA3J,KAAM0F,EAGNiE,EAHMjE,WACNvD,EAEAwH,EAFAxH,eAAgB+C,EAEhByE,EAFgBzE,qBAChBpC,EACA6G,EADA7G,YAAasD,EACbuD,EADavD,kBAGXwD,E,uVAA4B,IAAQD,GAa1C,IAAK,IAAIE,IAXT,CACI,CAAC7J,EAAM0F,GACP,CAACvD,EAAgB+C,GACjB,CAACpC,EAAasD,IAChBtI,QAAQ,YAA6B,IAAD,oBAA1BgM,EAA0B,KAAlBC,EAAkB,KACnB,WAAXD,GAAwBC,IACxBH,EAA6BE,GAAU,QAKzB5H,IACbyH,EAAiBE,IAAc3H,GAA0B2H,KAC1DD,EAA6BC,GAAa3H,GAA0B2H,IAG5E,OAAOD,G,2jBCEII,G,2MAvHXC,OAAkC,SAAzB,EAAKC,MAAMC,U,EAEpBC,W,MACOhK,EAAM+C,OAAO,SAACC,EAAD,OAAQ/C,EAAR,EAAQA,QAAR,aAA4B+C,EAA5B,eAAkC/C,EAAU,MAAO,I,GAChE,EAAK4J,QAAU,CAAEI,SAAU,K,EAGlCC,gBAAkB,wBAAY,EAAKF,WAAjB,GAAgC,EAAKF,MAAMK,a,EAE7DC,MAAQ,EAAKF,kB,EAEbG,iBAAmBC,IAAMC,Y,EAEzBC,cAAgB,SAAAC,GAAS,OAAI,SAAArO,GACzB,EAAKsO,SAAL,eAAiBD,EAAYrO,EAAEkL,OAAOjK,U,EAG1CsN,QAAU,WACN,EAAKD,SAAS,EAAKR,mBACnB,EAAKJ,MAAMc,iCACX,EAAKd,MAAMe,oB,EAGfC,YAAc,WACV,IAAM,EAAKjB,QAAU,EAAKO,MAAM5J,GAAeuK,OAAO5D,QAAY,EAAK0C,QAAU,EAAKO,MAAMH,SAASc,OAAO5D,OAAS,CACjH,IAAM6D,EAAW,MACVhL,EAAM+C,OAAO,SAACC,EAAD,OAAQ/C,EAAR,EAAQA,QAAR,aAA4B+C,EAA5B,eAAkC/C,EAAU,EAAKmK,MAAMnK,GAAS8K,UAAW,KAE3F,EAAKlB,SACLmB,EAAYf,SAAW,EAAKG,MAAMH,SAASc,QAE/C,EAAKjB,MAAMc,iCACX,EAAKd,MAAMmB,UAAU,KAAOD,EAAYxK,IAAkBwK,EAAYf,SAAWe,GACjF,EAAKlB,MAAMe,wBAEX,EAAKf,MAAMoB,iCACXnC,GAAW,EAAKsB,mB,wEAId,IAAD,SACyDc,KAAKrB,MAA3DsB,EADH,EACGA,OAAQC,EADX,EACWA,WAAYC,EADvB,EACuBA,8BACpBd,EAAgDW,KAAhDX,cAAeM,EAAiCK,KAAjCL,YAAaH,EAAoBQ,KAApBR,QAASd,EAAWsB,KAAXtB,OACvC0B,EAAS,UAAMF,EAAa,OAAS,SAA5B,gBAA4CxB,EAAS,aAAe,GAApE,SACT2B,EAAaH,EAAa,OAAS,SAEzC,OACI,kBAACI,EAAA,EAAD,CACI5P,UAAU,kBACV6P,KAAMN,EACNT,QAASA,EACTgB,WAAW,EACXC,SAAS,MAET,kBAACC,EAAA,EAAD,KAAcN,GACd,kBAACO,EAAA,EAAD,KACI,yBAAKjQ,UAAU,+BACTgO,GACE,oCACI,kBAAC,EAAD,kBACA,kBAACkC,EAAA,EAAD,CACI1O,MAAO8N,KAAKf,MAAMH,SAClB+B,SAAUxB,EAAc,YACxBxB,SAAUmC,KAAKd,iBACf4B,MAAOX,IAAkCH,KAAKf,MAAMH,SACpDiC,QAAQ,WACRC,OAAO,WAIjBtC,EACE,oCACI,yCACA,kBAACkC,EAAA,EAAD,CACI1O,MAAO8N,KAAKf,MAAM5J,GAClBwL,SAAUxB,EAAchK,GACxB0L,QAAQ,WACRC,OAAO,WAIf,oCACI,kBAAC,EAAD,gBACA,kBAACJ,EAAA,EAAD,CACI1O,MAAO8N,KAAKf,MAAM5J,GAClBwL,SAAUxB,EAAchK,GACxBwI,SAAUmC,KAAKd,iBACf4B,MAAOX,IAAkCH,KAAKf,MAAM5J,GACpD0L,QAAQ,WACRC,OAAO,WAIjB7L,EAAiB8L,IAAI,gBAAGnM,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAUG,EAAtB,EAAsBA,eAAtB,OACnB,kBAAC,IAAMgM,SAAP,CAAgB1O,IAAKsC,GACjB,sCAAYC,EAAUG,GAAkB,0BAAMxE,UAAU,aAAY,6BAAMwE,IAC1E,kBAAC0L,EAAA,EAAD,CACI1O,MAAO,EAAK+M,MAAMnK,GAClB+L,SAAUxB,EAAcvK,GACxBiM,QAAQ,WACRC,OAAO,eAM3B,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAS7B,EAAS8B,MAAM,WAAhC,UAGA,kBAACF,EAAA,EAAD,CAAQC,QAAS1B,EAAa2B,MAAM,WAC/BjB,S,GAhHIlB,IAAMoC,eC+BpBC,GA1Ca,SAACC,GACzB,kNACIxC,MAAQ,CACJyC,mBAAmB,EACnBvB,+BAA+B,GAHvC,EAMIwB,gBAAkB,WACd,EAAKpC,SAAS,CAAEmC,mBAAmB,KAP3C,EAUIhC,iBAAmB,WACf,EAAKH,SAAS,CAAEmC,mBAAmB,KAX3C,EAcI3B,+BAAiC,WAC7B,EAAKR,SAAS,CAAEY,+BAA+B,KAfvD,EAkBIV,+BAAiC,WAC7B,EAAKF,SAAS,CAAEY,+BAA+B,KAnBvD,wEAsBc,IAEFwB,EAIA3B,KAJA2B,gBACAjC,EAGAM,KAHAN,iBACAK,EAEAC,KAFAD,+BACAN,EACAO,KADAP,+BAGJ,OACI,kBAACgC,EAAD,iBACQzB,KAAKrB,MACLqB,KAAKf,MACL,CAAE0C,kBAAiBjC,mBAAkBK,iCAAgCN,wCAlCzF,GAAqBN,IAAMyC,YCUlBC,GAAsB,SAAAC,GAC/B,MAAO,CACHC,KAbuB,kBAcvBD,YAIKE,GAAqB,SAAAF,GAC9B,MAAO,CACHC,KAnBsB,iBAoBtBD,YAyCKG,GAAwB,SAAAH,GACjC,MAAO,CACHC,KAxD+B,0BAyD/BD,YAUKI,GAAa,SAAAC,GAAQ,OAAI,SAAAvR,GAC9BA,IACAuR,EAASN,GAAoBjR,IAC7BuR,EA3BG,CACHJ,KA9CsC,mCA0E1CI,EAtDO,CACHJ,KAzBuB,sBAiFlBK,GAAc,SAAAD,GAAQ,OAAI,WACnCA,EApDO,CACHJ,KA9BuB,oBAkF3BI,EA5BO,CACHJ,KAnDuC,oCA+E3CI,EAhBO,CACHJ,KA9D+B,4BA8EnCI,EA1CO,CACHJ,KAzC4B,yBAmFhCI,EAASH,QAGAK,GAAW,SAAAF,GAAQ,OAAI,SAAAG,GAAQ,OAAI,SAACrR,GAAuB,IAApBsR,EAAmB,uDAAP,GACtDC,EAAYvR,GAAwB,KAAnBA,EAAEkL,OAAOjK,YAAmCuQ,IAAnBxR,EAAEkL,OAAOjK,MAAuBjB,EAAEkL,OAAOjK,MAAQqQ,EACjGJ,EAASN,GAAoB,eACxBS,EAAWE,QAIPE,GAAc,SAAAP,GAAQ,OAAI,SAAAG,GAAQ,OAAI,SAACrR,EAAGsR,GACnD,IAAMC,EAAWvR,EAAIA,EAAEkL,OAAOwG,QAAUJ,EACxCJ,EAASN,GAAoB,eACxBS,EAAWE,QAIPI,GAAY,SAAAT,GAAQ,OAAI,SAAAG,GAAQ,OAAI,SAACrR,EAAGsR,GACjD,IAAMlT,EAAQ4B,EAAKA,EAAEkL,OAAOjK,OAAS,GAAOqQ,GAAa,GAEnDM,EAAYxT,EAAM2M,OAAS,EAAI3M,EAAMA,EAAM2M,OAAS,GAAK3M,EAI/D,OAHA8S,EAASN,GAAoB,eACxBS,EAAWO,KAETA,KAGEC,GAAW,SAAAX,GAAQ,OAAI,SAAAG,GAAQ,OAAI,SAACrR,EAAGsR,GAChD,IAAMlT,EAAQ4B,EAAKA,EAAEkL,OAAOjK,OAAS,GAAOqQ,GAAa,GAEnDQ,EAAgB1T,EAAMoN,QAAQ,IAAK,IAAImD,OAAOoD,MAAM,cAClC3T,EAAMoN,QAAQ,IAAK,IAAImD,OAAOoD,MAAM,cAAc,GAAG5N,MAAM,EAAG,GAC9D,GAKxB,OAHA+M,EAASN,GAAoB,eACxBS,EAAWS,KAETA,KAGEE,GAAY,SAAAd,GAAQ,OAAI,SAAAG,GAAQ,OAAI,SAACrR,EAAGsR,GACjD,IAAIlT,EAAQ4B,EAAKA,EAAEkL,OAAOjK,OAAS,GAAOqQ,GAAa,GAEjDQ,EAAgB1T,EAAMoN,QAAQ,IAAK,KAAKmD,OAAOoD,MAAM,WACnC3T,EAAMoN,QAAQ,IAAK,KAAKmD,OAAOoD,MAAM,eAAe,GACpD,GAKxB,OAHAb,EAASN,GAAoB,eACxBS,EAAWS,KAETA,KAGEG,GAAc,SAAAf,GAAQ,OAAI,SAACgB,EAAeC,GAAhB,OAAiC,SAAAnS,GACpE,IAAMD,GAAgD,IAAnCmS,EAAcE,OAAO,SAAkB,QAAU,UAC9D5R,EAAWV,EAAiBC,GAAYsS,uBAAuBrS,GACjEQ,GAAYA,EAASD,UACrB0L,WAAW,WACPiF,EAASN,GAAoB,eACxBsB,EAAgB,MAErBhB,EAASN,GAAoB,eACxBuB,EAAe,OAErB,KACI3R,IACP0Q,EAASN,GAAoB,eACxBsB,EAAgB1R,EAASS,SAE9BiQ,EAASN,GAAoB,eACxBuB,EAAe3R,EAASU,mB,2jBC/I/BoR,G,2MACFC,eAAiBrE,IAAMC,Y,EACvBqE,kBAAoBtE,IAAMC,Y,EAC1BsE,UAAY,CAAC,EAAKF,eAAgB,EAAKC,mB,EAEvCE,cAAgB,SAAC1S,EAAG2S,EAAW7L,GACvBA,GACA,EAAK4G,MAAMkF,oBAAoB,KAAM9L,GAEzC,EAAK4G,MAAMmF,YAAY7S,EAAG2S,I,EAG9BG,aAAe,SAAAjP,GAAO,OAAI,SAAA7D,GACtB,IAAMuR,EAAQ,MACP,EAAK7D,MAAMhK,KADJ,eAETG,EAAU7D,EAAEkL,OAAOjK,QAExB,EAAKyM,MAAMqF,WAAW,KAAMxB,K,EAGhCyB,qBAAuB,SAAAC,GAAQ,OAAI,SAAAjT,GAC/B,IAAMuR,EAAQ,MACP,EAAK7D,MAAMhH,aADJ,eAETuM,EAAWjT,EAAEkL,OAAOwG,UAEzB,EAAKhE,MAAMwF,mBAAmB,KAAM3B,K,mFAIhCxC,KAAKrB,MAAMyF,0BACXpG,GAAkBgC,KAAK0D,a,yCAIZW,GACXrE,KAAKrB,MAAMyF,2BAA6BC,EAAUD,0BAClDpG,GAAkBgC,KAAK0D,WAEvB1D,KAAKrB,MAAMyF,0BAA+CpE,KAAK0D,ULrD5BY,MAAM,SAAAC,GAAG,OAAIA,EAAIxG,QAAQ7L,SKsD5D8N,KAAKrB,MAAMsD,sBAAsB,CAAE1M,cAAc,M,+BAI/C,IAAD,SAeDyK,KAAKrB,MAbL3G,EAFC,EAEDA,cACA0J,EAHC,EAGDA,kBACAvB,EAJC,EAIDA,8BACAwB,EALC,EAKDA,gBACAjC,EANC,EAMDA,iBACAK,EAPC,EAODA,+BACAN,EARC,EAQDA,+BACA2E,EATC,EASDA,yBACA1M,EAVC,EAUDA,OAAQ8M,EAVP,EAUOA,aACR7M,EAXC,EAWDA,aACAI,EAZC,EAYDA,MACAE,EAbC,EAaDA,OAAQwM,EAbP,EAaOA,aACR9P,EAdC,EAcDA,KAGE+P,EAAe1M,EAAc3C,GAC7B6K,IAAewE,EAErB,OACI,yBAAKhU,UAAU,6DACX,kBAAC,EAAD,YACA,kBAACkQ,EAAA,EAAD,CACI1O,MAAOwF,EACPmJ,SAAU2D,EACV1D,MAAOsD,IAA6B1M,EACpCmG,SAAUmC,KAAKwD,eACfzC,QAAQ,WACRC,OAAO,UAGX,+CACA,yBAAKtQ,UAAU,iBACT+F,GAAgBwK,IAAI,gBAAGzO,EAAH,EAAGA,IAAKN,EAAR,EAAQA,MAAR,OAClB,yBAAKxB,UAAU,mBACX,kBAACiU,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzBwD,MAAO5S,EACP6S,eAAe,MACfpC,QAAShL,EAAanF,GACtBqO,SAAU,EAAKoD,qBAAqBzR,SAMpD,uCACA,6BACI,kBAACwS,EAAA,EAAD,CACI9S,MAAO6F,EACP8I,SAAUb,KAAK2D,cACftU,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAM,IAAd,OACEgO,GAAc,4BAAQxP,UAAU,oBAAoBwB,MAAOwS,GAAeA,GAC5E,4BAAQxS,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,sCAEAgO,GAAcnI,IAAU2M,IACxB,kBAACtD,EAAA,EAAD,CAAQE,MAAM,UAAU5Q,UAAU,aAAa2Q,QAASM,GAClDzB,EAAa,iBAAmB,SAK9C,wCACA,yBAAKxP,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAAS1K,EACT4I,SAAU4D,EACVnD,MAAM,aAId,kBAAC,EAAD,gBACA,kBAACV,EAAA,EAAD,CACI1O,MAAOyC,EAAKU,GACZwL,SAAUb,KAAK+D,aAAa1O,GAC5ByL,MAAOsD,IAA6BzP,EAAKU,GACzCwI,SAAUmC,KAAKyD,kBACf1C,QAAQ,WACRC,OAAO,UAGT7L,EAAiB8L,IAAI,gBAAGnM,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAUG,EAAtB,EAAsBA,eAAtB,OACrB,kBAAC,IAAMgM,SAAP,CAAgB1O,IAAKsC,GACnB,sCAAYC,EAAUG,GAAkB,0BAAMxE,UAAU,aAAY,6BAAMwE,IAC1E,kBAAC0L,EAAA,EAAD,CACI1O,MAAOyC,EAAKG,GACZ+L,SAAU,EAAKkD,aAAajP,GAC5BiM,QAAQ,WACRC,OAAO,aAKf,kBAAC,GAAD,eACIf,OAAQyB,EACR5B,UAAWE,KAAK2D,cAChB3E,WAAYhH,EACZ4G,UAAU,cACL,CACD8C,oBACAxB,aACAC,gCACAT,mBACAK,iCACAN,yC,GAxJGN,IAAMyC,WAyLjBqD,eAzBQ,SAAC,GAAmD,IAAD,IAAhDC,gBAAmBxJ,EAA6B,EAA7BA,KAC1C,MAAO,CACH0I,yBAFmE,EAAvBe,gBAEF5P,aAC1C6P,UAAW1J,EACXhE,OAAQgE,EAAKhE,OACbK,MAAO2D,EAAK3D,MACZE,OAAQyD,EAAKzD,OACbtD,KAAM+G,EAAK/G,KACXqD,cAAe0D,EAAK1D,cACpBL,aAAc+D,EAAK/D,eAIA,SAAAwK,GACvB,MAAO,CACHF,sBAAuB,SAAAH,GAAO,OAAIK,EAASF,GAAsBH,KACjE0C,aAAcnC,GAASF,EAATE,CAAmB,UACjCyB,YAAazB,GAASF,EAATE,CAAmB,SAChCwB,oBAAqBxB,GAASF,EAATE,CAAmB,iBACxCoC,aAAc/B,GAAYP,EAAZO,CAAsB,UACpCsB,WAAY3B,GAASF,EAATE,CAAmB,QAC/B8B,mBAAoB9B,GAASF,EAATE,CAAmB,kBAI/B4C,CAA6CzD,GAAoB+B,KCtKhE8B,GAjCQrW,YAAW,SAAAC,GAAK,MAAK,CAC1CC,KAAM,CACJK,SAAU,QACV,YAAa,CACXJ,UAAWF,EAAMG,QAAQ,KAG7BC,MAAO,CACLC,aAAc,EACdE,SAAU,WACVC,gBAAiBR,EAAMS,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,GACVC,QAAS,sBACTC,WAAYf,EAAMgB,YAAYC,OAAO,CAAC,eAAgB,eACtDC,WAAY,CACV,SACA,mBACA,QACA,cACAC,KAAK,KACP,UAAW,CACTd,aAAc,EACde,YAAa,WAEf,UAAW,CACTf,aAAc,EACde,YAAa,UACbC,UAAW,0BA5BMtB,CA+BnBuB,KCjCS+U,I,OCGM,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAM9U,EAAR,EAAQA,SAAR,OACjB,oCACI,yBAAKC,UAAU,gBACX,8BAAO6U,GAAQ9U,IAEnB,yBAAKC,UAAU,mBCCN8U,GAPYxW,YAAW,SAAAC,GAAK,MAAK,CAC9CC,KAAM,CACJK,SAAU,QACVuB,MAAO,WAHgB9B,CAKvBqW,ICPSI,I,OCsLCR,YA9BQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACHxD,mBAAoBwD,EAAKxD,mBACzBG,2BAA4BqD,EAAKrD,2BACjCC,gCAAiCoD,EAAKpD,gCACtCC,wBAAyBmD,EAAKnD,wBAC9BC,yBAA0BkD,EAAKlD,yBAC/BC,UAAWiD,EAAKjD,UAChBC,eAAgBgD,EAAKhD,eACrBP,iBAAkBuD,EAAKvD,iBACvBC,WAAYsD,EAAKtD,aAIE,SAAA+J,GACvB,MAAO,CACHuD,yBAA0BrD,GAASF,EAATE,CAAmB,sBAC7CsD,iCAAkCtD,GAASF,EAATE,CAAmB,8BACrDuD,sCAAuCvD,GAASF,EAATE,CAAmB,mCAC1DwD,oCAAqCxD,GAASF,EAATE,CAAmB,iCACxDyD,yCAA0CzD,GAASF,EAATE,CAAmB,sCAC7D0D,8BAA+B1D,GAASF,EAATE,CAAmB,2BAClD2D,+BAAgC3D,GAASF,EAATE,CAAmB,4BACnD4D,gBAAiB5D,GAASF,EAATE,CAAmB,aACpC6D,qBAAsB7D,GAASF,EAATE,CAAmB,kBACzC8D,yBAA0BzD,GAAYP,EAAZO,CAAsB,oBAChD0D,iBAAkB1D,GAAYP,EAAZO,CAAsB,gBAIhCuC,CAxKW,SAAAtG,GAAU,IAE7BzG,EASAyG,EATAzG,mBAAoBwN,EASpB/G,EAToB+G,yBACpBvN,EAQAwG,EARAxG,iBAAkBgO,EAQlBxH,EARkBwH,yBAClB/N,EAOAuG,EAPAvG,WAAYgO,EAOZzH,EAPYyH,iBACZ/N,EAMAsG,EANAtG,2BAA4BsN,EAM5BhH,EAN4BgH,iCAC5BrN,EAKAqG,EALArG,gCAAiCsN,EAKjCjH,EALiCiH,sCACjCrN,EAIAoG,EAJApG,wBAAyBwN,EAIzBpH,EAJyBoH,8BACzBvN,EAGAmG,EAHAnG,yBAA0BwN,EAG1BrH,EAH0BqH,+BAC1BvN,EAEAkG,EAFAlG,UAAWwN,EAEXtH,EAFWsH,gBACXvN,EACAiG,EADAjG,eAAgBwN,EAChBvH,EADgBuH,qBAGdG,EAAmE,mBAA/BhO,EAAkD,QAAU,SAEtG,OACI,yBAAK3H,UAAU,+BACX,oDACA,6BACI,kBAACsU,EAAA,EAAD,CACI9S,MAAOgG,EACP2I,SAAU6E,EACVrW,MAAQ,kBAAC,GAAD,OAER,4BAAQ6C,MAAM,IAAd,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAIR,mDACA,yBAAKxB,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAASxK,EACT0I,SAAUsF,EACV7E,MAAM,aAId,6CACA,yBAAK5Q,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAASvK,EACTyI,SAAUuF,EACV9E,MAAM,aAId,kBAAC,GAAD,CAAciE,KAAK,cAEnB,4EACA,yBAAK7U,UAAU,+BACX,6BACI,kBAACsU,EAAA,EAAD,CACI9S,MAAOmG,EACPwI,SAAU8E,EACVtW,MAAQ,kBAAC,GAAD,OAEP4G,EAAiBgL,IAAI,SAAAqF,GAAM,OACxB,4BAAQpU,MAAOoU,EAAO9T,IAAKA,IAAG,oBAAe8T,EAAO9T,MAAQ8T,EAAOpU,WAI/E,yBAAKxB,UAAS,4CAAuC2V,EAAvC,mBACV,kBAACrB,EAAA,EAAD,CACI9S,MAAOoG,EACPuI,SAAU+E,EACVvW,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAM,WAAd,yBACEwC,EAAeuM,IAAI,SAAArQ,GAAG,OAAI,4BAAQsB,MAAOtB,EAAIsB,MAAOM,IAAK5B,EAAIsB,OAAQtB,EAAI+D,WAKvF,kBAAC,GAAD,CAAc4Q,KAAK,WAGnB,uDACA,yBAAK7U,UAAU,iBACX,kBAACsU,EAAA,EAAD,CACI9S,MAAOqG,EACPsI,SAAUkF,EACV1W,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAM,IAAd,WACA,4BAAQA,MAAM,WAAd,yBACEwC,EAAeuM,IAAI,SAAArQ,GAAG,OAAI,4BAAQsB,MAAOtB,EAAIsB,MAAOM,IAAK5B,EAAIsB,OAAQtB,EAAI+D,UAKnF,0EACA,yBAAKjE,UAAU,iBACX,kBAACsU,EAAA,EAAD,CACI9S,MAAOsG,EACPqI,SAAUmF,EACV3W,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAM,IAAd,WACA,4BAAQA,MAAM,WAAd,yBACEwC,EAAeuM,IAAI,SAAArQ,GAAG,OAAI,4BAAQsB,MAAOtB,EAAIsB,MAAOM,IAAK5B,EAAIsB,OAAQtB,EAAI+D,UAInF,kBAAC,GAAD,CAAc4Q,KAAK,oBAEnB,oEACA,yBAAK7U,UAAU,iBACX,kBAACsU,EAAA,EAAD,CACI9S,MAAOuG,EACPoI,SAAUoF,EACV5W,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAM,IAAd,WACEwC,EAAeuM,IAAI,SAAArQ,GAAG,OAAI,4BAAQsB,MAAOtB,EAAIsB,MAAOM,IAAK5B,EAAIsB,OAAQtB,EAAI+D,UAInF,0EACA,yBAAKjE,UAAU,iBACX,kBAACsU,EAAA,EAAD,CACI9S,MAAOwG,EACPmI,SAAUqF,EACV7W,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAM,IAAd,WACEwC,EAAeuM,IAAI,SAAArQ,GAAG,OAAI,4BAAQsB,MAAOtB,EAAIsB,MAAOM,IAAK5B,EAAIsB,OAAQtB,EAAI+D,c,qlBC/IxF,IAAM4R,GAAuB,SAAAnB,GAAc,IAE1C3Q,EA4BA2Q,EA5BA3Q,KACA0F,EA2BAiL,EA3BAjL,WACAC,EA0BAgL,EA1BAhL,UACAtK,EAyBAsV,EAzBAtV,SACAoH,EAwBAkO,EAxBAlO,UACAmD,EAuBA+K,EAvBA/K,KACAC,EAsBA8K,EAtBA9K,OACAC,EAqBA6K,EArBA7K,WACAC,EAoBA4K,EApBA5K,OACAC,EAmBA2K,EAnBA3K,cACAG,EAkBAwK,EAlBAxK,cACAzL,EAiBAiW,EAjBAjW,UACAgI,EAgBAiO,EAhBAjO,aACAC,EAeAgO,EAfAhO,eACAC,EAcA+N,EAdA/N,gBACAE,EAaA6N,EAbA7N,YACAsD,EAYAuK,EAZAvK,kBACAvD,EAWA8N,EAXA9N,YACAwD,EAUAsK,EAVAtK,WACAC,EASAqK,EATArK,YACAC,EAQAoK,EARApK,UACAC,EAOAmK,EAPAnK,aACAC,EAMAkK,EANAlK,WACA7K,EAKA+U,EALA/U,YACAmH,EAIA4N,EAJA5N,gBACA2D,EAGAiK,EAHAjK,aACAqL,EAEApB,EAFAoB,yBACA7L,EACAyK,EADAzK,kBAGE8L,EAAmB5K,GAAgB3E,EAAW,UAC9CwP,EAAsB7K,GAAgBV,EAAc,UACpDwL,EAAgCH,EAA2BE,EAAsB,SACjFE,GAAqBxP,GAAkB,IAAMC,GAAmB,GAChEwP,EAAiB,UAAOxP,EAAuBA,GAAmB,EAAI,EAAIA,EAAhC,EAAzB,MACjByP,EAAiB,UAAOF,EAAyBA,GAAqB,EAAI,EAAIA,EAAlC,EAA3B,MACjBG,EAAqC,WAAhBxP,EAA2BA,EAAesD,Gb3BrC,Ma4B1BmM,EXtBe,SAACC,EAAWnX,GACjC,MAAkB,aAAdmX,EACO,EAEHC,WAAWpX,EAASsF,SAAW,GAAoB,QAAd6R,EAAsB,GAAK,GWkBzDE,CAAUvM,EAAe9K,GAClCsX,EAAgB,WAAQzM,EAA4C,EAAxBuM,WAAW/X,IAAkB6X,EAAzD,MAChBK,EAAmB,WAAQ1M,EAA+C,EAA3BuM,WAAW/P,IAAqB6P,EAA5D,MACnBM,EAAoBxM,EAAU,UAAMtD,EAAN,cAA2B0D,EAA3B,aAA0C7K,GAAgB,OACxFkX,EAAqBxM,EAAW,UAAMvD,EAAN,cAA2B0D,EAA3B,aAA0C7K,GAAgB,OAC1FmX,EAAmBxM,EAAS,UAAMxD,EAAN,cAA2B0D,EAA3B,aAA0C7K,GAAgB,OACtFoX,EAAsBxM,EAAY,UAAMzD,EAAN,cAA2B0D,EAA3B,aAA0C7K,GAAgB,OAC5FqX,EAAkB5X,GAAY,IAAMA,EAAW,IAiCrD,OAhCkB,IACdA,SAAU,UAACA,EAAyC4X,Eb9C3B,Ka8Cf,MACVpG,MAAM,IAAD,OAAMmF,GACXtW,WAAY+N,GAAezJ,EAAM0F,GACjCwN,WAAY/R,EAAcwE,GAC1BwN,UAAWxN,EACXyN,WAAYxN,EAAO,OAAS,SAC5ByN,UAAWxN,EAAS,SAAW,SAC/ByN,eAAgB,UAAGxN,EAAa,YAAc,IAA9B,OAAmCC,EAAS,gBAAkB,IAAKoF,QAAU,OAC7FhF,gBACAH,cAAiC,eAAlBA,EAAiCA,EAAgB,OAChEuN,YAA+B,eAAlBvN,EAAiCA,EAAgB,SAC9DhL,gBAAgB,IAAD,OAAMiX,GACrBuB,gBAAgB,oBAAD,OAAuBtB,EAAvB,cAA0DA,EAA1D,KACfuB,YAAY,oBAAD,OAAsBvB,EAAtB,cAAyDA,EAAzD,KACXwB,WAAYtB,EACZuB,WAAYtB,EACZxP,YAAY,GAAD,OAAKA,GAAe,EAApB,MACX+Q,WAAYtB,EACZ5X,UAAWiY,EACXjQ,aAAckQ,EACdvM,WAAYwM,EACZvM,YAAawM,EACbvM,UAAWwM,EACXvM,aAAcwM,EACda,QAAS,QACNxN,GAAc,CAAEyN,YAAY,GAAD,OAAKb,EAAkB,EAAvB,OA1BhB,GA2BX3M,GAAe,CAAEyN,aAAa,GAAD,OAAKd,EAAkB,EAAvB,OA3BlB,GA4BX1M,GAAa,CAAEyN,WAAW,GAAD,OAAKf,EAAkB,EAAvB,OA5Bd,GA6BXzM,GAAgB,CAAEyN,cAAc,GAAD,OAAKhB,EAAkB,EAAvB,S,oOCvE1C,IAmGgBzC,eAfQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACH0J,UAAW1J,EACXiN,YAAajN,EAAKiN,YAClB7P,OAAQ4C,EAAK5C,OACbC,OAAQ2C,EAAK3C,OACbC,eAAgB0C,EAAK1C,eACrBE,SAAUwC,EAAKxC,SACfC,SAAUuC,EAAKvC,SACfE,YAAaqC,EAAKrC,YAClBC,eAAgBoC,EAAKpC,eACrBI,WAAYgC,EAAKhC,aAITuL,CAnGI,SAAAtG,GAAU,IAEtByG,EASAzG,EATAyG,UACAtM,EAQA6F,EARA7F,OACAC,EAOA4F,EAPA5F,OACAC,EAMA2F,EANA3F,eACAE,EAKAyF,EALAzF,SACAC,EAIAwF,EAJAxF,SACAE,EAGAsF,EAHAtF,YACAC,EAEAqF,EAFArF,eACAI,EACAiF,EADAjF,WAGEkP,EAA6B,YAAb1P,EAShB2P,EZkCkB,SAAC,GAA8D,IAA5DD,EAA2D,EAA3DA,cAAetP,EAA4C,EAA5CA,eAAgBH,EAA4B,EAA5BA,SAAUE,EAAkB,EAAlBA,YACpE,GAAIuP,EACA,OAAOrS,GAAc+C,GAEzB,IAAMuJ,EAAY3M,EAAeiD,IAAaE,EAC9C,OAAOtF,MAAM,GAAG+U,KAAKjG,GY9CHkG,CAAa,CAC3BH,gBACAtP,iBACAH,WACAE,gBAGiC4H,IAAI,SAAA+H,GACrC,MAAM,GAAN,OAAWlQ,GAAX,OAAoBkQ,GAApB,OAA+BjQ,KAG7BkQ,EAAe1C,GAAqBnB,GACpC8D,EAAeN,GAAiBlP,EAChCyP,EAAkBD,EDiDW,SAAA9D,GAAc,IAE7ClM,EAeAkM,EAfAlM,SACAF,EAcAoM,EAdApM,eACAU,EAaA0L,EAbA1L,WACA9C,EAYAwO,EAZAxO,eACA+C,EAWAyL,EAXAzL,qBACAC,EAUAwL,EAVAxL,oBACA/C,EASAuO,EATAvO,mBACAC,EAQAsO,EARAtO,oBACAC,EAOAqO,EAPArO,uBACAC,EAMAoO,EANApO,gBACAC,EAKAmO,EALAnO,iBACA4C,EAIAuL,EAJAvL,eACAC,EAGAsL,EAHAtL,iBACAC,EAEAqL,EAFArL,qBACAC,EACAoL,EADApL,qBAGEoP,EAA6BvN,GAAgB/E,EAAqB,UAClEuS,EAAgCxN,GAAgB9E,EAAwB,UAiB9E,OAf0B2C,GAA2B,cAAbR,EAAhB,IACpB/I,WAAY+N,GAAetH,EAAgB+C,GAC3CiO,UAAWhO,EACX9J,SAAU,UAAC+G,EAAmDA,GAAsB,IAAMA,EAAqB,IbzGtF,KayGf,MACVyK,MAAM,IAAD,OAAM8H,GACX3Z,gBAAgB,IAAD,OAAM4Z,GACrB9Z,SAAS,GAAD,OAAMyH,EAAuBA,EAAkB,IAAMA,EAAkB,IAA/C,EAAxB,MACR1H,aAAa,GAAD,OAAK2H,GAAoB,EAAzB,MACZ4Q,WAAYhO,EAAiB,OAAS,SACtCiO,UAAWhO,EAAmB,SAAW,SACzCiO,eAAgBhO,EAAuB,YAAc,QAClDC,GAAwB,CAAEqO,WAAW,GAAD,OAAKrO,EAAL,OAXnB,CAYpBsP,YAAY,GAAD,OAAKtQ,GAAkB,EAAvB,QAZqD,GCvE7BuQ,CAAwBnE,GAAa,GACtEoE,E,uVAAsB,EACxBF,YAAY,GAAD,OAAKtQ,GAAkB,EAAvB,OACRmQ,GAGP,OACI,yBAAKzY,UAAU,wBACX,0BAAMA,UAAU,iBAAhB,WACA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,wBACX,yBACIA,UAAU,4BACV4C,MAAO2V,GAEP,6BACI,0BACIvY,UAAU,oBACV4C,MAAOkW,GAFX,UAGKX,EAAmB,KAAY,sDAExC,6BACI,0BACInY,UAAU,oBACV4C,MAAOkW,GAFX,UAGKX,EAAmB,KAAY,uDAExC,6BACI,0BACInY,UAAU,oBACV4C,MAAOkW,GAFX,UAGKX,EAAmB,KAAY,sDAEtCK,GACE,oCACI,6BACI,0BACIxY,UAAU,oBACV4C,MAAOkW,GAFX,UAGKX,EAAmB,KAAY,qDAExC,6BACI,0BACInY,UAAU,oBACV4C,MAAOkW,GAFX,UAGKX,EAAmB,KAAY,sD,UChFzDY,I,kNCUXxK,MAAQ,CACJgB,OAAQ,EAAKtB,MAAMsB,Q,EAGvByJ,gBAAkB,WACd,EAAKnK,SAAS,CAAEU,QAAQ,K,EAG5B0J,gBAAkB,WACd,EAAKpK,SAAS,CAAEU,QAAQ,K,EAG5B2J,mBAAqB,SAAAC,GAAW,OAAI,YAAc,IAAX/N,EAAU,EAAVA,IACnC+N,EAAY,KAAM/N,K,wEAGZ,IAAD,EAC6EkE,KAAKrB,MAA/EmL,EADH,EACGA,UAAWC,EADd,EACcA,gBAAiBC,EAD/B,EAC+BA,iBAAkBC,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,cAC1DnO,EAAeF,GAAgBiO,GAC/BK,EAAapO,IAAiB+N,EAC9BM,EAAaD,IAAeF,KAAcH,GAC1CO,EAAcF,EAAa,GAAH,WAAYpO,GACpCuO,EAAmB,CACrB7a,gBAAgB,IAAD,OAAMsM,IAEnBwO,EAAoB,qBAAkBL,EAAgB,6BAA+B,IAE3F,OACI,yBAAKxZ,UAAU,cACX,kBAACkQ,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACV8Z,WAAY,CACRC,eAAgB,kBAACC,GAAA,EAAD,CAAgBlb,SAAS,SAAzB,MAEpB0C,MAAO4X,EACPjJ,SAAUkJ,EACV1I,QAAS,SAAApQ,GACD+Y,GACA/N,GAAiB+N,EAAjB/N,CAAmChL,IAI3C6P,MAAOsJ,IAEX,yBACI/I,QAASrB,KAAK2J,gBACdjZ,UAAU,cACV4C,MAAOgX,IAEVtK,KAAKf,MAAMgB,QACR,yBAAKvP,UAAW6Z,GACZ,yBAAK7Z,UAAU,yBACX,kBAAC,gBAAD,CACIia,iBAAkB3K,KAAK4J,mBAAmBG,GAC1CzI,MAAO+I,EACPO,cAAY,KAGpB,yBAAKla,UAAU,sBAAuB2Q,QAASrB,KAAK0J,wB,GA7DnDvK,IAAMoC,gBC6ChBsJ,G,2MA7CXC,mBAAqB3L,IAAMC,Y,EAE3B2L,aAAe,SAAA9Z,GACX,EAAK0N,MAAMqM,WAAW/Z,GACC,WAAnBA,EAAEkL,OAAOjK,OACT0L,GAAW,EAAKkN,qB,wEAId,IAAD,EAC0C9K,KAAKrB,MAA5ClK,EADH,EACGA,KAAM0F,EADT,EACSA,WAAY8Q,EADrB,EACqBA,iBACpBC,EAAiBtW,EAAQuW,OAAO,SAAAC,GAAQ,OAAIA,IAAa3W,GAAQD,EAAgB4W,KACjFC,EAA8B,WAAT5W,EAAoB,sBAAwB,uBACvE,OACI,oCACI,sCACA,kBAACuQ,EAAA,EAAD,CACI3V,MAAQ,kBAAC,EAAD,MACR6C,MAAOuC,EACPoM,SAAUpD,GAAgBuC,KAAK+K,aAAc,MAE7C,4BAAQ7Y,MjB3BA,aiB2BR,aACEgZ,EAAejK,IAAI,SAAAmK,GAAQ,OAAI,4BAAQlZ,MAAOkZ,EAAU5Y,IAAK4Y,GAAWA,KAC1E,4BAAQlZ,MAAM,SAASxB,UAAU,qBAAjC,WAGJ,yBAAKA,UAAS,wBAAmB2a,IAC7B,gCAEJ,yBAAK3a,UAAS,wBAAmB2a,IAC7B,kBAACzK,EAAA,EAAD,CACI1O,MAAOiI,EACP0G,SAAUoK,EACVlK,QAAQ,WACRC,OAAO,QACPR,WAAS,EACT8K,YAAY,sBACZzN,SAAUmC,KAAK8K,2B,GAtCR3L,IAAMoC,eCoC/BgK,I,kNACFC,iBAAmBrM,IAAMC,Y,EACzBqM,oBAAsBtM,IAAMC,Y,EAE5BsM,eAAiB,SAAAza,GAAM,IACX2H,EAAa,EAAK+F,MAAlB/F,SACJ3H,EAAEkL,OAAOwG,QACL/J,IAAalC,IACb,EAAKiI,MAAMgN,eAAe,KAAM,IAEhB,KAAb/S,GACPsE,WAAW,kBAAM,EAAKyB,MAAMgN,eAAe,KAAMjV,KAAS,KAE9D,EAAKiI,MAAMiN,aAAa3a,GAEpBA,EAAEkL,OAAOwG,SAAW/J,IAAalC,IACjCkH,GAAW,EAAK4N,mB,EAIxBK,iBAAmB,SAAA5a,GAAM,IACb8H,EAAW,EAAK4F,MAAhB5F,OACA7G,EAAUjB,EAAEkL,OAAZjK,MACR,EAAKyM,MAAMmN,eAAe,KAAM5Z,GAClB,YAAVA,GAAkC,KAAX6G,EACvB,EAAK4F,MAAMoN,aAAa,KAAM,KACb,cAAV7Z,GAAoC,MAAX6G,GAChC,EAAK4F,MAAMoN,aAAa,KAAM,K,EAItCC,iBAAmB,SAAA/a,GACf,EAAK0N,MAAMsN,eAAehb,GACH,WAAnBA,EAAEkL,OAAOjK,OAAuB,EAAKyM,MAAMtF,aAC3CuE,GAAW,EAAK6N,sB,EAIxBS,sBAAwB,SAAAjb,GACpB,IAAMkb,EAAmB,EAAKxN,MAAMyN,oBAAoBnb,GAClDob,EAAsC,KAArBF,EAA0BzP,GAAoByP,GAAoB,GACzF,EAAKxN,MAAM2N,kBAAkB,KAAMD,I,EAGvCE,oBAAsB,SAAAtb,GAClB,IAAMob,EAAiB,EAAK1N,MAAM2N,kBAAkBrb,GAC9Ckb,EAAsC,KAAnBE,EAAwBvP,GAAoBuP,GAAkB,GACvF,EAAK1N,MAAMyN,oBAAoB,KAAMD,I,EAGzCK,mBAAqB,SAAAvb,GAAM,IACf8H,EAAW,EAAK4F,MAAhB5F,OACR,EAAK4F,MAAM8N,iBAAiBxb,GACxBA,EAAEkL,OAAOwG,SAAsB,MAAX5J,EACpB,EAAK4F,MAAMoN,aAAa,KAAM,IACtB9a,EAAEkL,OAAOwG,SAAsB,KAAX5J,GAC5B,EAAK4F,MAAMoN,aAAa,KAAM,M,mFAK9B/L,KAAKrB,MAAMyF,0BACXxG,GAAWoC,KAAKwL,oB,yCAILnH,GACXrE,KAAKrB,MAAMyF,2BAA6BC,EAAUD,0BAClDxG,GAAWoC,KAAKwL,kBAEhBxL,KAAKrB,MAAMyF,0BAA4BpE,KAAKrB,MAAM/F,UAClDoH,KAAKrB,MAAMsD,sBAAsB,CAAEzM,aAAa,M,+BAI9C,IAAD,EAgCDwK,KAAKrB,MA9BLyF,EAFC,EAEDA,yBACAsI,EAHC,EAGDA,iBACA/T,EAJC,EAIDA,OACAC,EALC,EAKDA,SAAU+S,EALT,EAKSA,eACV9S,EANC,EAMDA,WAAY8T,EANX,EAMWA,iBACZ7T,EAPC,EAODA,OAAQ8T,EAPP,EAOOA,aACR7T,EARC,EAQDA,OAAQgT,EARP,EAQOA,aACR/S,EATC,EASDA,eAAgB6T,EATf,EASeA,qBAChB5T,EAVC,EAUDA,UAAW6T,EAVV,EAUUA,gBACX5T,EAXC,EAWDA,SACAC,EAZC,EAYDA,SACAC,EAbC,EAaDA,cACAC,EAdC,EAcDA,YACAC,EAfC,EAeDA,eAAgByT,EAff,EAeeA,qBAChBxT,EAhBC,EAgBDA,kBAAmByT,EAhBlB,EAgBkBA,wBACnBxT,EAjBC,EAiBDA,sBAAuByT,EAjBtB,EAiBsBA,4BACvBxT,EAlBC,EAkBDA,oBAAqByT,EAlBpB,EAkBoBA,0BACrBxT,EAnBC,EAmBDA,WACA9C,EApBC,EAoBDA,eAAgBuW,EApBf,EAoBeA,qBAChBxT,EArBC,EAqBDA,qBAAsByT,EArBrB,EAqBqBA,2BACtBxT,EAtBC,EAsBDA,oBAAqByT,EAtBpB,EAsBoBA,0BACrBxW,EAvBC,EAuBDA,mBAAoByW,EAvBnB,EAuBmBA,yBACpBxW,EAxBC,EAwBDA,oBAAqByW,EAxBpB,EAwBoBA,0BACrBxW,EAzBC,EAyBDA,uBAAwByW,EAzBvB,EAyBuBA,6BACxBxW,EA1BC,EA0BDA,gBAAiByW,EA1BhB,EA0BgBA,sBACjBxW,EA3BC,EA2BDA,iBAAkByW,EA3BjB,EA2BiBA,uBAClB7T,GA5BC,EA4BDA,eAAgB8T,GA5Bf,EA4BeA,qBAChB7T,GA7BC,EA6BDA,iBAAkB8T,GA7BjB,EA6BiBA,uBAClB7T,GA9BC,EA8BDA,qBAAsB8T,GA9BrB,EA8BqBA,2BACtB7T,GA/BC,EA+BDA,qBAAsB8T,GA/BrB,EA+BqBA,2BAGpBC,GAAwBpV,EAAS,QAAU,SAC3CqV,GAA8BrV,GAAuB,cAAbO,EAA4B,QAAU,SAC9E+U,GAA+BtV,GAAuB,cAAbO,GAAyC,WAAbC,EAAyB,QAAU,SACxG+U,GAA4BvV,GAAuB,YAAbO,EAA0B,QAAU,SAC1EiV,GAA2BxV,GAAuB,YAAbO,GAA0BQ,EAAc,QAAU,SAE7F,OACI,oCACI,yBAAKhJ,UAAU,+BACX,6BACI,6BACI,yBAAKA,UAAU,sDACX,yBAAKA,UAAU,gBACX,gDAEJ,yBAAKA,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIvD,MAAM,UACNqB,QAAShK,EACTkI,SAAUpD,GAAgBuC,KAAK0L,oBAI3C,yBAAKhb,UAAS,kEAA6Dqd,KACvE,yBAAKrd,UAAU,uEACX,kBAAC,EAAD,kBACA,kBAACkQ,EAAA,EAAD,CACI1O,MAAO0G,EACPiI,SAAU8K,EACV7K,MAAOsD,IAA6BxL,EACpCiF,SAAUmC,KAAKwL,iBACfzK,QAAQ,WACRC,OAAO,UAGX,6CACA,6BACI,kBAACgE,EAAA,EAAD,CACI9S,MAAO2G,EACPgI,SAAU8L,EACVtd,MAAQ,kBAAC,GAAD,OAER,4BAAQ6C,MAAM,IAAd,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAIR,wCACA,kBAAC0O,EAAA,EAAD,CACI1O,MAAO4G,EACP+H,SAAU+L,EACV7L,QAAQ,WACRC,OAAO,UAGX,wCACA,kBAACJ,EAAA,EAAD,CACI1O,MAAO6G,EACP8H,SAAUkL,EACVhL,QAAQ,WACRC,OAAO,QACPK,QAASpF,GAAiB,OAG9B,iDACA,yBAAKvL,UAAU,sBACX,kBAACsU,EAAA,EAAD,CACI9S,MAAO8G,EACP6H,SAAUgM,EACVxd,MAAQ,kBAAC,GAAD,OAER,4BAAQ6C,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,MAEJ,kBAACwY,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,4CACA,yBAAKkB,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIvD,MAAM,UACNqB,QAAS1J,EACT4H,SAAUiM,KAIlB,8CACA,kBAACsB,GAAA,EAAD,CACIlc,MAAOgH,EACP2H,SAAUpD,GAAgBuC,KAAK6L,kBAC/BwC,KAAG,GAEH,yBAAK3d,UAAU,mBACX,kBAACiU,EAAA,EAAD,CACIzS,MAAM,YACN0S,QAAS,kBAAC0J,GAAA,EAAD,CAAOhN,MAAM,YACtBwD,MAAM,YACNC,eAAe,SAGvB,yBAAKrU,UAAU,mBACX,kBAACiU,EAAA,EAAD,CACIzS,MAAM,UACN0S,QAAS,kBAAC0J,GAAA,EAAD,CAAOhN,MAAM,YACtBwD,MAAM,UACNC,eAAe,aAOvC,yBAAKrU,UAAS,4CAAuCwd,KACjD,yBAAKxd,UAAU,gDACX,iDACA,6BACI,kBAACsU,EAAA,EAAD,CACI9S,MAAOoH,EACPuH,SAAUkM,EACV1d,MAAQ,kBAAC,GAAD,OAEPiH,EAAe2K,IAAI,SAAA3N,GAAK,OACrB,4BAAQpB,MAAOoB,EAAMpB,MAAOM,IAAKc,EAAMpB,OAAQoB,EAAMqB,UAKjE,uEACA,yBAAKjE,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAASpJ,EACTsH,SAAUmM,EACV1L,MAAM,aAId,yDACA,yBAAK5Q,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAASnJ,EACTqH,SAAUoM,EACV3L,MAAM,aAId,8DACA,6BACI,kBAAC0D,EAAA,EAAD,CACI9S,MAAOuH,EACPoH,SAAUqM,EACV7d,MAAQ,kBAAC,GAAD,OAER,4BAAQ6C,MAAM,IAAd,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAIR,6CACA,yBAAKxB,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAASjJ,EACTmH,SAAUpD,GAAgBuC,KAAKwM,oBAC/BlL,MAAM,cAKlB,yBAAK5Q,UAAS,kEAA6Dyd,KACvE,yBAAKzd,UAAU,iCACX,kBAAC,GAAD,CACI+D,KAAMmC,EACNoU,WAAYmC,EACZhT,WAAYR,EACZsR,iBAAkBmC,IAGtB,2CACA,kBAACpI,EAAA,EAAD,CACI9S,MAAO0H,EACPiH,SAAUwM,EACVhe,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAO,QAAf,QACA,4BAAQA,MAAO,UAAf,UACA,4BAAQA,MAAO,SAAf,UAGJ,2CACA,yBAAKxB,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACI1O,MAAO2E,EACPgK,SAAUyM,EACVjM,QAASpF,GlBrWpB,MkBsWW8E,QAAQ,WACRC,OAAO,QACPtQ,UAAU,gBAEd,kBAACga,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,4CACA,kBAAC,GAAD,CACIsa,UAAWhT,EACXiT,gBAAiBwD,EACjBvD,iBlBhXM,MkBiXNE,eAAa,IAGjB,+CACA,kBAAC,GAAD,CACIJ,UAAW/S,EACXgT,gBAAiByD,EACjBxD,iBlBvXS,SkBwXTE,eAAa,IAGjB,uCACA,yBAAKxZ,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACI1O,MAAO8E,EACP6J,SAAU4M,EACVpM,QAASpF,GlB/XZ,MkBgYG8E,QAAQ,WACRC,OAAO,QACPtQ,UAAU,gBAEd,kBAACga,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,6CACA,yBAAKkB,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACI1O,MAAO8H,GACP6G,SAAUiN,GACV/M,QAAQ,WACRC,OAAO,QACPtQ,UAAU,gBAEd,kBAACga,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,wCACA,yBAAKkB,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACI1O,MAAO+E,EACP4J,SAAU6M,EACVrM,QAASpF,GlBvZX,MkBwZE8E,QAAQ,WACRC,OAAO,QACPtQ,UAAU,gBAEd,kBAACga,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,0BAAMkB,UAAU,gBAAhB,YACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,wCACX,kBAACiU,EAAA,EAAD,CACIhC,QAAS9I,GACTgH,SAAU8M,GACV7I,MAAM,OACNF,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzByD,eAAe,SAGvB,yBAAKrU,UAAU,0CACX,kBAACiU,EAAA,EAAD,CACIhC,QAAS7I,GACT+G,SAAU+M,GACV9I,MAAM,SACNF,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzByD,eAAe,SAGvB,yBAAKrU,UAAU,8CACX,kBAACiU,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzBwD,MAAM,aACNC,eAAe,MACfpC,QAAS5I,GACT8G,SAAUgN,WAStC,yBAAKnd,UAAS,2DAAsDqd,KAChE,kBAAC,GAAgBrB,KAGzB,yBAAKhc,UAAS,4CAAuCsd,KACjD,yBAAKtd,UAAU,gDACX,yBAAKA,UAAU,+BACX,0BAAMA,UAAU,gBAAhB,aACA,yBAAKA,UAAU,kBACX,kBAACsU,EAAA,EAAD,CACI9S,MAAOiH,EACP0H,SAAUb,KAAKgM,iBACf3c,MAAQ,kBAAC,GAAD,OAGJ+C,OAAOmc,QAAQrY,GAAgB+K,IAAI,YAAmB,IAAD,oBAAhBzO,EAAgB,KAAXN,EAAW,KACjD,OAAQ,4BAAQM,IAAKA,EAAKN,MAAOM,GAAMN,KAG/C,4BAAQA,MAAO,SAAUxB,UAAU,qBAAnC,aAIZ,yBAAKA,UAAS,4CAAuCud,KACjD,yBAAKvd,UAAU,uDACX,yBAAKA,UAAU,uDACX,gDACA,6BACI,kBAACkQ,EAAA,EAAD,CACI1O,MAAOkH,EACPyH,SAAUb,KAAKkM,sBACfnL,QAAQ,WACRC,OAAO,QACPtQ,UAAU,eACV8Z,WAAY,CACRC,eAAgB,kBAACC,GAAA,EAAD,CAAgBlb,SAAS,SAAzB,WAKhC,yBAAKkB,UAAU,uDACX,sCACA,6BACI,kBAACkQ,EAAA,EAAD,CACI1O,MAAOmH,EACPwH,SAAUb,KAAKuM,oBACflL,QAASpF,KACT4B,SAAUmC,KAAKyL,oBACf1K,QAAQ,WACRC,OAAO,QACPtQ,UAAU,2B,GAhd5ByO,IAAMyC,YC5CjB2J,GD8kBAtG,YArES,SAAC,GAAmD,IAAD,IAAhDC,gBAAmBxJ,EAA6B,EAA7BA,KAC1C,MAAO,CACH0I,yBAFmE,EAAvBe,gBAEF3P,YAC1C4P,UAAW1J,EACX/C,OAAQ+C,EAAK/C,OACbC,SAAU8C,EAAK9C,SACfC,WAAY6C,EAAK7C,WACjBC,OAAQ4C,EAAK5C,OACbC,OAAQ2C,EAAK3C,OACbC,eAAgB0C,EAAK1C,eACrBC,UAAWyC,EAAKzC,UAChBC,SAAUwC,EAAKxC,SACfC,SAAUuC,EAAKvC,SACfC,cAAesC,EAAKtC,cACpBC,YAAaqC,EAAKrC,YAClBC,eAAgBoC,EAAKpC,eACrBC,kBAAmBmC,EAAKnC,kBACxBC,sBAAuBkC,EAAKlC,sBAC5BC,oBAAqBiC,EAAKjC,oBAC1BC,WAAYgC,EAAKhC,WACjB9C,eAAgB8E,EAAK9E,eACrB+C,qBAAsB+B,EAAK/B,qBAC3BC,oBAAqB8B,EAAK9B,oBAC1B/C,mBAAoB6E,EAAK7E,mBACzBC,oBAAqB4E,EAAK5E,oBAC1BC,uBAAwB2E,EAAK3E,uBAC7BC,gBAAiB0E,EAAK1E,gBACtBC,iBAAkByE,EAAKzE,iBACvB4C,eAAgB6B,EAAK7B,eACrBC,iBAAkB4B,EAAK5B,iBACvBC,qBAAsB2B,EAAK3B,qBAC3BC,qBAAsB0B,EAAK1B,uBAIR,SAAAmI,GACvB,MAAO,CACHF,sBAAuB,SAAAH,GAAO,OAAIK,EAASF,GAAsBH,KACjE6J,eAAgBtJ,GAASF,EAATE,CAAmB,YACnCuJ,aAAclJ,GAAYP,EAAZO,CAAsB,UACpCiK,iBAAkBtK,GAASF,EAATE,CAAmB,cACrCuK,aAAcvK,GAASF,EAATE,CAAmB,UACjC0J,aAAc1J,GAASF,EAATE,CAAmB,UACjCwK,qBAAsBxK,GAASF,EAATE,CAAmB,kBACzCyK,gBAAiBpK,GAAYP,EAAZO,CAAsB,aACvCoJ,eAAgBzJ,GAASF,EAATE,CAAmB,YACnC4J,eAAgB5J,GAASF,EAATE,CAAmB,YACnC+J,oBAAqBtJ,GAASX,EAATW,CAAmB,iBACxCwJ,kBAAmB1J,GAAUT,EAAVS,CAAoB,eACvCmK,qBAAsB1K,GAASF,EAATE,CAAmB,kBACzC2K,wBAAyBtK,GAAYP,EAAZO,CAAsB,qBAC/CuK,4BAA6BvK,GAAYP,EAAZO,CAAsB,yBACnDwK,0BAA2B7K,GAASF,EAATE,CAAmB,uBAC9CoK,iBAAkB/J,GAAYP,EAAZO,CAAsB,cACxCyK,qBAAsB9K,GAASF,EAATE,CAAmB,kBACzC+K,2BAA4B/K,GAASF,EAATE,CAAmB,wBAC/CgL,0BAA2BhL,GAASF,EAATE,CAAmB,uBAC9CiL,yBAA0BrK,GAAUd,EAAVc,CAAoB,sBAC9CsK,0BAA2BzK,GAASX,EAATW,CAAmB,uBAC9C0K,6BAA8B1K,GAASX,EAATW,CAAmB,0BACjD2K,sBAAuBxK,GAAUd,EAAVc,CAAoB,mBAC3CyK,uBAAwBzK,GAAUd,EAAVc,CAAoB,oBAC5C0K,qBAAsBjL,GAAYP,EAAZO,CAAsB,kBAC5CkL,uBAAwBlL,GAAYP,EAAZO,CAAsB,oBAC9CmL,2BAA4BnL,GAAYP,EAAZO,CAAsB,wBAClDoL,2BAA4B7K,GAAUd,EAAVc,CAAoB,0BAIzCgC,CAA6CsG,IEnkBtDiD,G,2MACFC,aAAe,SAACxd,EAAGyd,EAAUC,GACrBA,GACA,EAAKhQ,MAAMiQ,6BAA6B,KAAMD,GAElD,EAAKhQ,MAAMkQ,qBAAqB5d,EAAGyd,I,wEAG7B,IAAD,EAUD1O,KAAKrB,MARLzE,EAFC,EAEDA,uBACAwH,EAHC,EAGDA,kBACAvB,EAJC,EAIDA,8BACAwB,EALC,EAKDA,gBACAjC,EANC,EAMDA,iBACAK,EAPC,EAODA,+BACAN,EARC,EAQDA,+BACAxF,EATC,EASDA,eAGEyK,EAAexK,EAAuB7E,IAAkB6E,EAAuB4E,SAC/EoB,IAAewE,EAErB,OACI,yBAAKhU,UAAU,+BACX,iDACA,6BACI,kBAACsU,EAAA,EAAD,CACI3V,MAAQ,kBAAC,EAAD,MACR6C,MAAO+H,EACP4G,SAAUb,KAAKyO,cAEbvO,GAAc,4BAAQxP,UAAU,oBAAoBwB,MAAOwS,GAAeA,GAC5E,4BAAQxS,MAAM,IAAd,QACA,4BAAQA,MAAM,KAAd,qBACA,4BAAQA,MAAM,KAAd,wBAGEgO,GAAcjG,IAAmByK,IACnC,kBAACtD,EAAA,EAAD,CAAQE,MAAM,UAAU5Q,UAAU,aAAa2Q,QAASM,GAClDzB,EAAa,iBAAmB,SAI9C,kBAAC,GAAD,eACID,OAAQyB,EACR5B,UAAWE,KAAKyO,aAChBzP,WAAY9E,EACZ0E,UAAU,QACL,CACDsB,aACAC,gCACAT,mBACAK,iCACAN,yC,GAtDSN,IAAMyC,WA4EvBqD,eAdQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACHzB,eAAgByB,EAAKzB,eACrBC,uBAAwBwB,EAAKxB,yBAIV,SAAAiI,GACvB,MAAO,CACH0M,qBAAsBxM,GAASF,EAATE,CAAmB,kBACzCuM,6BAA8BvM,GAASF,EAATE,CAAmB,4BAIzC4C,CAA6CzD,GAAoBgN,K,qBCpF7EM,GAAkC,SAAUC,EAAG9d,GACjD,IAAI+d,EAAI,GACR,IAAK,IAAIC,KAAKF,EAAO3c,OAAO8c,UAAUC,eAAeC,KAAKL,EAAGE,IAAMhe,EAAEe,QAAQid,GAAK,IAC9ED,EAAEC,GAAKF,EAAEE,IACb,GAAS,MAALF,GAAqD,oBAAjC3c,OAAOid,sBAC3B,IAAK,IAAIvX,EAAI,EAAGwX,EAAIld,OAAOid,sBAAsBN,GAAIjX,EAAImX,EAAEjT,OAAQlE,IAC3D7G,EAAEe,QAAQsd,EAAExX,IAAM,GAAK1F,OAAO8c,UAAUK,qBAAqBH,KAAKL,EAAGO,EAAExX,MACvEkX,EAAEM,EAAExX,IAAMiX,EAAEO,EAAExX,KAE1B,OAAOkX,GAGT,SAASQ,GAAcC,GACrB,OAAOA,GAAOA,EAAIhT,QAAQ,wBAAyB,KAarD,SAASiT,GAAaC,GAEpB,IAAMxT,EAbR,SAASyT,EAAiBC,GACxB,GAAIA,EAAKC,WAAaC,KAAKC,UACvB,OAAOH,EAEX,IADA,IAAIpf,EAAWof,EAAKI,WACXnY,EAAIrH,EAASuL,OAAS,EAAGlE,GAAK,EAAGA,IAAK,CAC3C,IAAIoY,EAAWN,EAAiBnf,EAASqH,IACzC,GAAiB,OAAboY,EACA,OAAOA,EAEf,OAAO,KAIQN,CAAiBD,GAE1BQ,EAAkBxc,SAASyc,gBAAkBT,EACnD,GAAe,OAAXxT,GAAwC,OAArBA,EAAOkU,WAAsBF,EAAiB,CACjE,IAAIG,EAAMC,OAAOC,eACjB,GAAY,OAARF,EAAc,CACd,IAAIG,EAAQ9c,SAAS+c,cACrBD,EAAME,SAASxU,EAAQA,EAAOkU,UAAUrU,QACxCyU,EAAMG,UAAS,GACfN,EAAIO,kBACJP,EAAIQ,SAASL,GAEbd,aAAcoB,aACdpB,EAAGvT,S,IAMQ4U,G,YACnB,aAAe,IAAD,8BACV,6CAASC,aACJC,SAAW,EAAKvS,MAAMwS,KAC3B,EAAKxB,GAAoC,oBAAxB,EAAKhR,MAAMyS,SAA0B,CAAErT,QAAS,MAASoB,cAC1E,EAAKkS,MAAQ,kBAAO,EAAK1S,MAAMyS,UAA2C,oBAAxB,EAAKzS,MAAMyS,SAA0B,EAAKzS,MAAMyS,SAAW,EAAKzB,IAAI5R,SACtH,EAAKuT,WAAa,SAACC,GACf,IAAM5B,EAAK,EAAK0B,QAChB,GAAK1B,EAAL,CAEA,IAAMwB,EAAOxB,EAAG7b,UAChB,GAAI,EAAK6K,MAAMkC,UAAYsQ,IAAS,EAAKD,SAAU,CAG/C,IAAMM,EAAMpf,OAAOqf,OAAO,GAAIF,EAAa,CACvCpV,OAAQ,CACJjK,MAAOif,KAGf,EAAKxS,MAAMkC,SAAS2Q,GAExB,EAAKN,SAAWC,IApBV,E,sEAuBJ,IAAD,OACCO,EAAK1R,KAAKrB,MAASgT,EAA4BD,EAA5BC,QAASR,EAAmBO,EAAnBP,KAAMC,EAAaM,EAAbN,SAAiBzS,EAAQmQ,GAAO4C,EAAI,CAAC,UAAW,OAAQ,aAChG,OAAOvS,gBAAoBwS,GAAW,QAASvf,OAAOqf,OAAO,GAAI9S,EAAO,CAAE4F,IAAyB,oBAAb6M,EAA0B,SAACrT,GACzGqT,EAASrT,GACT,EAAK4R,GAAG5R,QAAUA,GAClBqT,GAAYpR,KAAK2P,GAAIiC,QAAS5R,KAAKsR,WAAYO,OAAQ7R,KAAKrB,MAAMkT,QAAU7R,KAAKsR,WAAYQ,QAAS9R,KAAKrB,MAAMmT,SAAW9R,KAAKsR,WAAYS,UAAW/R,KAAKrB,MAAMoT,WAAa/R,KAAKsR,WAAYU,iBAAkBhS,KAAKrB,MAAMsT,SAAUC,wBAAyB,CAAEC,OAAQhB,KAAWnR,KAAKrB,MAAMlO,Y,4CAEvR2hB,GAAY,IACtBzT,EAAUqB,KAAVrB,MACFgR,EAAK3P,KAAKqR,QAIhB,OAAK1B,IAGDH,GAAc4C,EAAUjB,QAAU3B,GAAcG,EAAG7b,aAIhD6K,EAAMsT,WAAaG,EAAUH,UAChCtT,EAAMgT,UAAYS,EAAUT,SAC5BhT,EAAMjO,YAAc0hB,EAAU1hB,WAC9BiO,EAAMyS,WAAagB,EAAUhB,WAC5BiB,KAAU1T,EAAMrL,MAAO8e,EAAU9e,W,2CAGtC,IAAMqc,EAAK3P,KAAKqR,QACX1B,IAID3P,KAAKrB,MAAMwS,OAASxB,EAAG7b,YACvB6b,EAAG7b,UAAYkM,KAAKkR,SAAWlR,KAAKrB,MAAMwS,MAE9CzB,GAAaC,Q,GA3D0BxQ,aCzCvCmT,G,2MACFC,oBAAsB,SAAAthB,GAAM,IAChBiB,EAAUjB,EAAEkL,OAAZjK,MACJA,GAAmB,gBAAVA,GAAqC,SAAVA,EACpC,EAAKyM,MAAM6T,kBAAkB,KAAMlW,GAAgBpK,IAEnD,EAAKyM,MAAM6T,kBAAkB,KAA7B,oB,wEAKJ,IpBqCgC9hB,EoBrC1BuY,EAAe1C,GAAqBvG,KAAKrB,MAAMyG,WAC7CuD,EAAgB3I,KAAKrB,MAArBgK,YAER,OACI,yBAAKjY,UAAU,WACX,0BAAMA,UAAU,iBAAhB,WACA,yBACIA,UAAU,8CACV2Q,SpB6BoB3Q,EoB7Bc,uBpB6BD,SAAAO,GAC7CA,EAAEkL,OAAOzL,YAAcA,GACvB6f,OAAOC,eAAeiC,kBAAkBxhB,EAAEkL,OAAO1L,SAAS,OoB7B9C,yBAAKC,UAAU,wBACX,kBAAC,GAAD,CACIA,UAAU,4BACVmQ,SAAUb,KAAKuS,oBACfpB,KAAMxI,EACNrV,MAAO2V,W,GA1Bb9J,IAAMyC,WCTb0Q,GDyDCrN,YAbQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACH0J,UAAW1J,EACXiN,YAAajN,EAAKiN,cAIC,SAAAxG,GACvB,MAAO,CACHqQ,kBAAmBnQ,GAASF,EAATE,CAAmB,iBAI9B4C,CAA6CqN,IEzD9CI,I,OC8NCzN,YAnCQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACHjH,KAAMiH,EAAKjH,KACX0F,WAAYuB,EAAKvB,WACjBC,UAAWsB,EAAKtB,UAChBtK,SAAU4L,EAAK5L,SACfoH,UAAWwE,EAAKxE,UAChBmD,KAAMqB,EAAKrB,KACXC,OAAQoB,EAAKpB,OACbC,WAAYmB,EAAKnB,WACjBC,OAAQkB,EAAKlB,OACbC,cAAeiB,EAAKjB,cACpBG,cAAec,EAAKd,cACpBF,SAAUgB,EAAKhB,WAII,SAAAyH,GACvB,MAAO,CACH6I,WAAY3I,GAASF,EAATE,CAAmB,QAC/B4I,iBAAkB5I,GAASF,EAATE,CAAmB,cACrCsQ,gBAAiBtQ,GAASF,EAATE,CAAmB,aACpCuQ,eAAgB3P,GAAUd,EAAVc,CAAoB,YACpC4P,gBAAiB/P,GAASX,EAATW,CAAmB,aACpCgQ,WAAYpQ,GAAYP,EAAZO,CAAsB,QAClCqQ,aAAcrQ,GAAYP,EAAZO,CAAsB,UACpCsQ,iBAAkBtQ,GAAYP,EAAZO,CAAsB,cACxCuQ,aAAcvQ,GAAYP,EAAZO,CAAsB,UACpCwQ,oBAAqB7Q,GAASF,EAATE,CAAmB,iBACxC8Q,oBAAqB9Q,GAASF,EAATE,CAAmB,iBACxC+Q,gBAAiBnQ,GAAUd,EAAVc,CAAoB,aACrCoQ,eAAgB3Q,GAAYP,EAAZO,CAAsB,cAI9BuC,CA1MU,SAAAtG,GAAU,IAE5B2U,EAaA3U,EAbA2U,aACA7e,EAYAkK,EAZAlK,KAAMuW,EAYNrM,EAZMqM,WACN7Q,EAWAwE,EAXAxE,WAAY8Q,EAWZtM,EAXYsM,iBACZ7Q,EAUAuE,EAVAvE,UAAWuY,EAUXhU,EAVWgU,gBACX7iB,EASA6O,EATA7O,SAAU8iB,EASVjU,EATUiU,eACV1b,EAQAyH,EARAzH,UAAW2b,EAQXlU,EARWkU,gBACXxY,EAOAsE,EAPAtE,KAAMyY,EAONnU,EAPMmU,WACNxY,EAMAqE,EANArE,OAAQyY,EAMRpU,EANQoU,aACRxY,EAKAoE,EALApE,WAAYyY,EAKZrU,EALYqU,iBACZxY,EAIAmE,EAJAnE,OAAQyY,EAIRtU,EAJQsU,aACRxY,EAGAkE,EAHAlE,cAAeyY,EAGfvU,EAHeuU,oBACftY,EAEA+D,EAFA/D,cAAeuY,EAEfxU,EAFewU,oBACfzY,EACAiE,EADAjE,SAAU2Y,EACV1U,EADU0U,eAGd,OACI,oCACA,yBAAK3iB,UAAU,+BACX,yBAAKA,UAAU,gBACX,kBAAC,GAAsB,CAAE+D,OAAMuW,aAAY7Q,aAAY8Q,qBAEvD,2CACA,kBAACjG,EAAA,EAAD,CACI3V,MAAQ,kBAAC,EAAD,MACR6C,MAAOkI,EACPyG,SAAU8R,GAEV,4BAAQzgB,MAAO,QAAf,QACA,4BAAQA,MAAO,UAAf,UACA,4BAAQA,MAAO,SAAf,SACA,4BAAQA,MAAO,WAAf,cAGJ,2CACA,yBAAKxB,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAOpC,EACP+Q,SAAU+R,EACVvR,QAASpF,GzB3DA,QyB6Db,kBAACyO,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,4CACA,kBAAC,GAAD,CACIsa,UAAW5S,EACX6S,gBAAiB8I,EACjB7I,iBzB/Dc,MyBgEdC,UAAQ,IAGZ,iDACA,6BACI,kBAACjF,EAAA,EAAD,CACI9S,MAAO0I,EACPiG,SAAUsS,EACV9jB,MAAQ,kBAAC,EAAD,OAER,4BAAQ6C,MAAM,YAAd,QACA,4BAAQA,MAAM,OAAd,aACA,4BAAQA,MAAM,SAAd,kBAIZ,yBAAKxB,UAAU,eACX,kBAAC,GAAY4iB,KAGrB,yBAAK5iB,UAAU,sDACX,0BAAMA,UAAU,gBAAhB,YACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,wCACX,kBAACiU,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzBwD,MAAM,OACNC,eAAe,MACfpC,QAAStI,EACTwG,SAAUiS,KAGlB,yBAAKpiB,UAAU,0CACX,kBAACiU,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzBwD,MAAM,SACNC,eAAe,MACfpC,QAASrI,EACTuG,SAAUkS,KAGlB,yBAAKriB,UAAU,8CACX,kBAACiU,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzBwD,MAAM,aACNC,eAAe,MACfpC,QAASpI,EACTsG,SAAUmS,KAGlB,yBAAKtiB,UAAU,0CACX,kBAACiU,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUvD,MAAM,YACzBwD,MAAM,SACNC,eAAe,MACfpC,QAASnI,EACTqG,SAAUoS,MAKtB,gDACA,kBAAC7E,GAAA,EAAD,CACIlc,MAAOuI,EACPoG,SAAUqS,EACV7E,KAAG,GAEH,yBAAK3d,UAAU,mBACX,kBAACiU,EAAA,EAAD,CACIzS,MAAM,OACN0S,QAAS,kBAAC0J,GAAA,EAAD,CAAOhN,MAAM,YACtBwD,MAAM,OACNC,eAAe,SAGvB,yBAAKrU,UAAU,6CACX,kBAACiU,EAAA,EAAD,CACIzS,MAAM,YACN0S,QAAS,kBAAC0J,GAAA,EAAD,CAAOhN,MAAM,YACtBwD,MAAM,YACNC,eAAe,SAGvB,yBAAKrU,UAAU,6CACX,kBAACiU,EAAA,EAAD,CACIzS,MAAM,YACN0S,QAAS,kBAAC0J,GAAA,EAAD,CAAOhN,MAAM,YACtBwD,MAAM,YACNC,eAAe,SAGvB,yBAAKrU,UAAU,6CACX,kBAACiU,EAAA,EAAD,CACIzS,MAAM,aACN0S,QAAS,kBAAC0J,GAAA,EAAD,CAAOhN,MAAM,YACtBwD,MAAM,aACNC,eAAe,UAK3B,2CACA,yBAAKrU,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAASjI,EACTmG,SAAUwS,EACV/R,MAAM,kBCpJV2D,eAZQ,SAAC,GACrB,MAAO,CACHtK,kBAFkD,EAA/BuK,gBAAmBxJ,KAEdf,oBAIL,SAAAwH,GACvB,MAAO,CACHoR,wBAAyB7Q,GAAYP,EAAZO,CAAsB,uBAIvCuC,CAzBe,SAAC,GAAD,IAAGtK,EAAH,EAAGA,kBAAmB4Y,EAAtB,EAAsBA,wBAAtB,OAC3B,oCACI,gDACA,yBAAK7iB,UAAU,qBACX,kBAACmU,EAAA,EAAD,CACIlC,QAAShI,EACTkG,SAAU0S,EACVjS,MAAM,gBCAhBkS,G,2MACFC,0BAA4BtU,IAAMC,Y,EAElCsU,oBAAsB,SAAAziB,GAClB,EAAK0N,MAAMgV,kBAAkB1iB,GACN,WAAnBA,EAAEkL,OAAOjK,OACT0L,GAAW,EAAK6V,4B,wEAId,IAAD,EAWDzT,KAAKrB,MATL2U,EAFC,EAEDA,aACA3Y,EAHC,EAGDA,kBACAxL,EAJC,EAIDA,UAAWikB,EAJV,EAIUA,gBACXjc,EALC,EAKDA,aAAcyc,EALb,EAKaA,mBACdxc,EANC,EAMDA,eAAgByc,EANf,EAMeA,qBAChBxc,EAPC,EAODA,gBAAiByc,EAPhB,EAOgBA,sBACjBvc,EARC,EAQDA,YACAsD,EATC,EASDA,kBAAmBkZ,EATlB,EASkBA,wBACnBzc,EAVC,EAUDA,YAAa0c,EAVZ,EAUYA,kBAGXC,EAA8C,WAAhB1c,EAA2B,sBAAwB,uBACjF2c,EAAqBvZ,EAA4C,uBAAxB,sBAE/C,OACI,yBAAKjK,UAAU,2DACX,yBAAKA,UAAU,gBACX,kBAAC,GAAD,MACA,yBAAKA,UAAS,sCAAiCwjB,IAC7C,6CAEF,yBAAKxjB,UAAS,2CAAsCwjB,IAChD,kBAACtT,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAO/C,EACP0R,SAAUuS,EACV/R,QAASpF,G3B1CP,O2B4CN,kBAACyO,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,yBAAKkB,UAAS,wBAAmBwjB,IAC7B,gDAGJ,yBAAKxjB,UAAS,2CAAsCwjB,IAChD,kBAACtT,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAOiF,EACP0J,SAAU+S,EACVvS,QAASpF,G3B1DP,O2B4DN,kBAACyO,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,gDACA,yBAAKkB,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAOkF,EACPyJ,SAAUgT,IAEd,kBAACnJ,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,mDACA,yBAAKkB,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAOmF,EACPwJ,SAAUiT,IAEd,kBAACpJ,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,8CACA,6BACI,kBAACwV,EAAA,EAAD,CACI3V,MAAQ,kBAAC,GAAD,MACR6C,MAAOqF,EACPsJ,SAAUpD,GAAgBuC,KAAK0T,oBAAqB,MAEpD,4BAAQxhB,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,SAASxB,UAAU,qBAAjC,YAIR,yBAAKA,UAAS,wBAAmBujB,KAEjC,yBAAKvjB,UAAS,wBAAmBujB,IAC7B,kBAACrT,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAO2I,EACPgG,SAAUkT,EACVzI,YAAY,aACZzN,SAAUmC,KAAKyT,6BAIvB,8CACA,yBAAK/iB,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAOoF,EACPuJ,SAAUmT,EACV3S,QAASpF,G3B7HD,O2B+HZ,kBAACyO,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,QAGR,yBAAKkB,UAAU,eACX,kBAAC,GAAY4iB,S,GAlIFnU,IAAMyC,WAkKrBqD,eAzBQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACHf,kBAAmBe,EAAKf,kBACxBxL,UAAWuM,EAAKvM,UAChBgI,aAAcuE,EAAKvE,aACnBC,eAAgBsE,EAAKtE,eACrBC,gBAAiBqE,EAAKrE,gBACtBE,YAAamE,EAAKnE,YAClBsD,kBAAmBa,EAAKb,kBACxBvD,YAAaoE,EAAKpE,cAIC,SAAA6K,GACvB,MAAO,CACHiR,gBAAiBnQ,GAAUd,EAAVc,CAAoB,aACrC2Q,mBAAoB3Q,GAAUd,EAAVc,CAAoB,gBACxC4Q,qBAAsB5Q,GAAUd,EAAVc,CAAoB,kBAC1C6Q,sBAAuB7Q,GAAUd,EAAVc,CAAoB,mBAC3C0Q,kBAAmBtR,GAASF,EAATE,CAAmB,eACtC0R,wBAAyB9Q,GAAUd,EAAVc,CAAoB,qBAC7C+Q,kBAAmB/Q,GAAUd,EAAVc,CAAoB,iBAI/BgC,CAA6CuO,I,oBC9J5CW,GAfMnlB,YAAW,SAAAC,GAAK,MAAK,CACxCC,KAAM,CACJ4B,MAAO,QACP,YAAa,CACX3B,UAAWF,EAAMG,QAAQ,KAG7BC,MAAO,CACLc,WAAY,CACV,QACA,cACAC,KAAK,QAXUpB,CAajBqW,ICgBS+O,GA9BoB,SAAAhP,GAAc,IAEzCtK,EAOAsK,EAPAtK,WACAC,EAMAqK,EANArK,YACAC,EAKAoK,EALApK,UACAC,EAIAmK,EAJAnK,aACA5K,EAGA+U,EAHA/U,YACAmH,EAEA4N,EAFA5N,gBACA0D,EACAkK,EADAlK,WAGEa,EAAeF,GAAgBxL,GAC/BgkB,EAAqB7c,IAAoB8c,MAAMpN,WAAW1P,IAArC,UACMA,GAAmB,GAAKA,EAAkB,GADhD,MAEG,IAa9B,MAXqB,CACjBsD,WAAYA,EAAU,UAAMuZ,EAAN,YAA4BnZ,EAA5B,aAA2Ca,GAAiB,OAClFoM,WAAYrN,EAAa,IAAMuZ,EAC/BtZ,YAAaA,EAAW,UAAMsZ,EAAN,YAA4BnZ,EAA5B,aAA2Ca,GAAiB,OACpFuN,YAAavO,EAAc,IAAMsZ,EACjCrZ,UAAWA,EAAS,UAAMqZ,EAAN,YAA4BnZ,EAA5B,aAA2Ca,GAAiB,OAChF5M,UAAW6L,EAAY,IAAMqZ,EAC7BpZ,aAAcA,EAAY,UAAMoZ,EAAN,YAA4BnZ,EAA5B,aAA2Ca,GAAiB,OACtF5E,aAAc8D,EAAe,IAAMoZ,ICNrCE,I,kNACFC,mBAAqB,SAAAvjB,GACjB,EAAK0N,MAAM8V,iBAAiBxjB,GACL,WAAnBA,EAAEkL,OAAOjK,OAAqD,MAA/B,EAAKyM,MAAMnH,gBAC1C,EAAKmH,MAAM+V,sBAAsB,KAAM,KACb,WAAnBzjB,EAAEkL,OAAOjK,OAAqD,MAA/B,EAAKyM,MAAMnH,iBACjD,EAAKmH,MAAM+V,sBAAsB,KAAM,M,wEAIrC,IAAD,EAWA1U,KAAKrB,MATN2U,EAFC,EAEDA,aACAlO,EAHC,EAGDA,UACAtK,EAJC,EAIDA,WAAY6Z,EAJX,EAIWA,iBACZ5Z,EALC,EAKDA,YAAa6Z,EALZ,EAKYA,kBACb5Z,EANC,EAMDA,UAAW6Z,EANV,EAMUA,gBACX5Z,EAPC,EAODA,aAAc6Z,EAPb,EAOaA,mBACdzkB,EARC,EAQDA,YAAa0kB,EARZ,EAQYA,kBACbvd,EATC,EASDA,gBAAiBkd,EAThB,EASgBA,sBACjBxZ,EAVC,EAUDA,WAGE+N,EAAemL,GAA2BhP,GAEhD,OACI,yBAAK1U,UAAU,2DACX,6BACI,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,qBAAqB4C,MAAO2V,GACvC,0BAAMvY,UAAU,kBAAhB,QACA,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,kBAAhB,OACA,yBAAKA,UAAU,2BACX,yBAAKskB,GAAG,KAAKtkB,UAAU,YACnB,kBAACmU,EAAA,EAAD,CACIvD,MAAM,UACNqB,QAAS3H,EACT6F,SAAUgU,KAGlB,yBAAKG,GAAG,OAAOtkB,UAAU,YACrB,kBAACmU,EAAA,EAAD,CACIvD,MAAM,UACNqB,QAAS7H,EACT+F,SAAU8T,KAGlB,yBAAKK,GAAG,OAAOtkB,UAAU,aAEzB,yBAAKskB,GAAG,OAAOtkB,UAAU,YACrB,kBAACmU,EAAA,EAAD,CACIvD,MAAM,UACNqB,QAAS5H,EACT8F,SAAU+T,KAGlB,yBAAKI,GAAG,KAAKtkB,UAAU,YACnB,kBAACmU,EAAA,EAAD,CACIvD,MAAM,UACNqB,QAAS1H,EACT4F,SAAUiU,MAItB,0BAAMpkB,UAAU,kBAAhB,WAEJ,0BAAMA,UAAU,kBAAhB,WAGR,yBAAKA,UAAU,+BACX,6CACA,kBAAC,GAAD,CACIoZ,UAAWzZ,EACX0Z,gBAAiBgL,EACjB/K,iB9BhFQ,M8BiFRC,UAAQ,IAGZ,iDACA,yBAAKvZ,UAAU,sBACX,kBAACkQ,EAAA,EAAD,CACIG,QAAQ,WACRC,OAAO,QACPtQ,UAAU,cACVwB,MAAOsF,EACPqJ,SAAU6T,EACVrT,QAASpF,G9B3FD,O8B6FZ,kBAACyO,GAAA,EAAD,CAAgB3J,QAAQ,SAASvR,SAAS,OAA1C,OAGJ,+CACA,6BACI,kBAACylB,GAAA,EAAD,CACA5lB,MAAO,kBAAC,GAAD,MACP6C,MAAOgJ,EACP2F,SAAUb,KAAKwU,oBAEX,kBAACU,GAAA,EAAD,CAAUhjB,MAAM,SAAQ,wDACxB,kBAACgjB,GAAA,EAAD,CAAUhjB,MAAM,UAAhB,oDACA,kBAACgjB,GAAA,EAAD,CAAUhjB,MAAM,UAAS,kEACzB,kBAACgjB,GAAA,EAAD,CAAUhjB,MAAM,UAAhB,0CAIR,kBAAC,GAAD,QAGR,yBAAKxB,UAAU,eACX,kBAAC,GAAY4iB,S,GA9GLnU,IAAMyC,YCnBnB2S,GDiKCtP,YAzBQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACH0J,UAAW1J,EACXZ,WAAYY,EAAKZ,WACjBC,YAAaW,EAAKX,YAClBC,UAAWU,EAAKV,UAChBC,aAAcS,EAAKT,aACnB5K,YAAaqL,EAAKrL,YAClBmH,gBAAiBkE,EAAKlE,gBACtB0D,WAAYQ,EAAKR,aAIE,SAAAiH,GACvB,MAAO,CACHwS,iBAAkBjS,GAAYP,EAAZO,CAAsB,cACxCkS,kBAAmBlS,GAAYP,EAAZO,CAAsB,eACzCmS,gBAAiBnS,GAAYP,EAAZO,CAAsB,aACvCoS,mBAAoBpS,GAAYP,EAAZO,CAAsB,gBAC1CqS,kBAAmBjS,GAASX,EAATW,CAAmB,eACtC4R,sBAAuBzR,GAAUd,EAAVc,CAAoB,mBAC3CwR,iBAAkBpS,GAASF,EAATE,CAAmB,gBAI7B4C,CAA6CsP,IE3H7CtP,eAZQ,SAAC,GACrB,MAAO,CACH9J,aAFkD,EAA/B+J,gBAAmBxJ,KAEnBP,eAIA,SAAAgH,GACvB,MAAO,CACHgT,mBAAoBrS,GAASX,EAATW,CAAmB,kBAI/BmC,CA/BQ,SAAC,GAAwD,IAAtDqO,EAAqD,EAArDA,aAAcnY,EAAuC,EAAvCA,aAAcga,EAAyB,EAAzBA,mBACnD,OACI,yBAAKzkB,UAAU,2DACX,yBAAKA,UAAU,kCACX,+CACA,kBAAC,GAAD,CACIoZ,UAAW3O,EACX4O,gBAAiBoL,IAErB,kBAAC,GAAD,OAEJ,yBAAKzkB,UAAU,eACX,kBAAC,GAAY4iB,OCuBbrO,eAZQ,SAAC,GACrB,MAAO,CACH7J,eAFkD,EAA/B8J,gBAAmBxJ,KAEjBN,iBAIF,SAAA+G,GACvB,MAAO,CACHiT,qBAAsB/S,GAASF,EAATE,CAAmB,oBAIjC4C,CAnCG,SAAC,GAA8C,IAA5C7J,EAA2C,EAA3CA,eAAgBga,EAA2B,EAA3BA,qBAClC,OACI,yBAAK1kB,UAAU,+BACX,iDACA,6BACI,kBAACsU,EAAA,EAAD,CACI9S,MAAOkJ,EACPyF,SAAUuU,EACV/lB,MAAQ,kBAAC,GAAD,OAER,4BAAQ6C,MAAM,IAAd,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,UCuBJ+S,eAdQ,SAAC,GAAkC,IAAbvJ,EAAY,EAA/BwJ,gBAAmBxJ,KAC1C,MAAO,CACHJ,gBAAiBI,EAAKJ,gBACtBE,gBAAiBE,EAAKF,kBAIH,SAAA2G,GACvB,MAAO,CACHkT,kBAAmBnS,GAAYf,EAAZe,CAAsB,cAAe,mBACxDoS,kBAAmBpS,GAAYf,EAAZe,CAAsB,cAAe,qBAIhD+B,CAxCQ,SAAC,GAAgF,IAA9E3J,EAA6E,EAA7EA,gBAAiBE,EAA4D,EAA5DA,gBAAiB6Z,EAA2C,EAA3CA,kBAAmBC,EAAwB,EAAxBA,kBAC5E,OACI,yBAAK5kB,UAAU,6DACX,qCACA,yBAAKA,UAAU,kBACX,kBAACkQ,EAAA,EAAD,CACI1O,MAAOsJ,EACPuW,UAAWuD,EACXvU,QAAQ,WACRC,OAAO,WAIf,yCACA,yBAAKtQ,UAAU,kBACX,kBAACkQ,EAAA,EAAD,CACI1O,MAAOoJ,EACPyW,UAAWsD,EACXtU,QAAQ,WACRC,OAAO,c,oDCfZ/R,GAPDsmB,aAAe,CACzB7lB,QAAS,CACP8lB,QAASC,KACTC,UAAWC,Q,UC4BAC,GA9BC5mB,YAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACJ2mB,SAAU,UACVpmB,gBAAiB,QACjBO,WAAY,OAEZ,WAAY,CACVA,WAAY,QAGd,UAAW,CACTsR,MAAO,QAET,aAAc,CACZ7R,gBAAiB,UACjB6R,MAAO,QACPwU,QAAS,GAEX,iBAAkB,CAChBrmB,gBAAiB,QACjBO,WAAY,QAEd,0BAA2B,CACzBP,gBAAiB,YAGrBsmB,SAAU,KA1BI/mB,CA4BZ,SAAA2P,GAAK,OAAI,kBAACqX,GAAA,EAAQrX,KCIPsX,GAhCMjnB,YAAW,SAAAC,GAAK,MAAK,CACxCC,KAAM,CACJ2mB,SAAU,UACVpmB,gBAAiB,QACjBO,WAAY,OACZ+X,eAAgB,gBAEhB,WAAY,CACV/X,WAAY,QAGd,UAAW,CACTsR,MAAO,QAET,aAAc,CACZ7R,gBAAiB,UACjB6R,MAAO,QACPwU,QAAS,EACT/N,eAAgB,uBAElB,iBAAkB,CAChBtY,gBAAiB,QACjBO,WAAY,QAEd,0BAA2B,CACzBP,gBAAiB,YAGrBsmB,SAAU,KA5BS/mB,CA8BjB,SAAA2P,GAAK,OAAI,kBAACqX,GAAA,EAAQrX,K,UCtBT3P,eAVA,CACXknB,UAAW,CACPzmB,gBAAiB,UACjBqmB,QAAS,GACThlB,MAAO,QACPqlB,OAAQ,EACRC,QAAS,SAIFpnB,CAAmBqnB,MCoBjBC,GA9BItnB,YAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACFK,SAAU,SACVgnB,UAAW,oBACXC,OAAQ,QAEZ5iB,UAAW,CACP4iB,OAAQ,QACRJ,QAAS,SAEbK,WAAY,CACR,UAAW,CACPD,OAAQ,SAGhBE,eAAgB,CACZjW,SAAU,SACVkW,UAAW,QACXJ,UAAW,QACXzlB,MAAO,oBACP0lB,OAAQ,oBACRJ,QAAS,cACTQ,cAAe,SACf/mB,OAAQ,QAEZgnB,gBAAiB,CACbjc,cAAe,YA1BF5L,CA4BfsR,KC5BOwW,GAAoB,SAAAhV,GAC7B,MAAO,CACHC,KALqB,gBAMrBD,YCmCFiV,I,kNACFvX,QAAU,WACN,EAAKb,MAAMyD,cACX,EAAKzD,MAAMqY,a,EAGfC,kBAAoB,WAAO,IAAD,EAC4C,EAAKtY,MAA/DyG,EADc,EACdA,UAAWnD,EADG,EACHA,sBAAuBiV,EADpB,EACoBA,UAAWC,EAD/B,EAC+BA,SAC/Cxb,EAAiBF,GAAkB2J,GACrCzJ,GACAsG,EAAsBtG,GACtBub,EAAUtb,GAAqBD,MAG/Bwb,EADmBxmB,EAAcymB,YAAYjZ,GAAiBiH,KAE9D,EAAK5F,Y,EAIb6X,YAAc,SAACpmB,EAAG0E,GACd,EAAKgJ,MAAMuY,UAAUvhB,I,wEAGf,IAAD,EAMDqK,KAAKrB,MAJLsB,EAFC,EAEDA,OACAqX,EAHC,EAGDA,UACAnS,EAJC,EAIDA,gBACAjF,EALC,EAKDA,WAGJ,OACI,kBAACqX,EAAA,EAAD,CAAetoB,MAAOA,IAClB,kBAAC,GAAD,CACIsR,KAAMN,EACNT,QAASQ,KAAKR,QACdgY,kBAAgB,oBAChBC,OAAO,OACP/mB,UAAU,kBACV8P,WAAW,EACXC,UAAU,EACVuU,GAAG,UAEH,yBAAKtkB,UAAU,UACX,kBAACgQ,EAAA,EAAD,CAAahQ,UAAU,gBACnB,8DAEJ,yBAAKA,UAAU,kBACX,kBAAC0Q,EAAA,EAAD,CACIL,QAAQ,YACRO,MAAM,UACND,QAASrB,KAAKR,QACd9O,UAAU,gBAJd,UAQA,kBAAC0Q,EAAA,EAAD,CACIL,QAAQ,YACRO,MAAM,UACND,QAASrB,KAAKiX,kBACdvmB,UAAU,gBAETwP,EAAa,OAAS,YAKnC,kBAACS,EAAA,EAAD,CAAejQ,UAAU,WACrB,yBAAKA,UAAU,oBACX,kBAACgnB,GAAD,CACIhnB,UAAU,aACVwB,MAAOolB,EACPzW,SAAUb,KAAKqX,YACfM,YAAY,WACZrW,MAAM,UACNsW,eAAe,WAEbzS,EAAgB5P,aACV,kBAAC,GAAD,CAAgB7E,UAAU,YAAYoU,MAAM,qBAC3C,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,qBAEhD,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,gBAErCK,EAAgB3P,YACV,kBAAC,GAAD,CAAgB9E,UAAU,YAAYoU,MAAM,SAC5C,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,SAE/C,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,gBACvC,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,eACvC,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,cACvC,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,WACvC,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,YACvC,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,QACvC,kBAAC,GAAD,CAAWpU,UAAU,YAAYoU,MAAM,iBAI/C,yBAAKpU,UAAU,qBACK,IAAd4mB,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAAC,GAAD,MACL,IAAdA,GAAmB,kBAACO,GAAD,c,GA3GnB1Y,IAAMyC,YCxCrBmV,GDiLA9R,YApBS,SAAC,GAAkF,IAAD,IAA/EC,gBACvB,MAAO,CACHE,UAFkG,EAA5D1J,KAGtCuE,OAHkG,EAAtDA,OAI5CqX,UAJkG,EAA9CA,UAKpDnS,gBALkG,EAAnCA,gBAM/DjF,WANkG,EAAlBA,aAU7D,SAAAiC,GACvB,MAAO,CACHC,YAAaA,GAAYD,GACzB6U,UAAW,kBAAM7U,EAASH,OAC1BkV,UAAW,SAAApV,GAAO,OAAIK,EpCrII,SAAAL,GAC9B,MAAO,CACHC,KAnC6B,wBAoC7BD,WoCkI+BgW,CAAmBhW,KAClDG,sBAAuB,SAAAH,GAAO,OAAIK,EAASF,GAAsBH,KACjEiW,SAAU,SAAAjW,GAAO,OAAIK,EAAS2U,GAAkBhV,OAIzCmD,CAA6C8R,IEtH7C9R,I,OAAAA,YAZS,SAAC,GACrB,MAAO,CAAE+S,UAD8B,EAAhBA,YAIA,SAAA7V,GACvB,MAAO,CACHD,WAAYA,GAAWC,GACvB4V,SAAU,SAAAjW,GAAO,OAAIK,EAAS2U,GAAkBhV,KAChDmW,eAAgB,kBAAM9V,EH7CnB,CACHJ,KAX4B,4BG2DrBkD,CA9CH,SAAAtG,GAAU,IACVuD,EAAoDvD,EAApDuD,WAAY6V,EAAwCpZ,EAAxCoZ,SAAUE,EAA8BtZ,EAA9BsZ,eAAgBD,EAAcrZ,EAAdqZ,UAM9C,OACI,kBAACT,EAAA,EAAD,CAAetoB,MAAOA,IAClB,yBAAKyB,UAAU,OACX,yBAAKA,UAAU,gBACRsnB,EAMC,oCACI,kBAAC5W,EAAA,EAAD,CACIC,QAAS,WAfjCa,EAAWvR,EAAcunB,YAAYF,GAAa,OAc9B,cAGA,kBAAC5W,EAAA,EAAD,CACIC,QAAS4W,EACT3W,MAAM,aAFV,iBATJ,kBAACF,EAAA,EAAD,CACIC,QAAS,kBAAMa,KACfZ,MAAM,WAFV,eAgBR,kBAAC,GAAD,CAAiB6V,SAAUY,S,SC7B5BI,GAXO,WAA2B,IAA1BlZ,IAAyB,yDAAXqH,EAAW,uCAC5C,OAAQA,EAAOvE,MACX,IvCAuB,kBuCCnB,OAAO,EACX,IvCDuB,kBuCEnB,OAAO,EACX,QACI,OAAO9C,I,ujBCNnB,IAAMmZ,GAAY,IACdzP,Y9CsCmB,+M8CrChBlR,IAcQ4gB,GAXc,WAAoC,IAAnCpZ,EAAkC,uDAA1BmZ,GAAc9R,EAAY,uCAC5D,OAAQA,EAAOvE,MACX,IxCRuB,kBwCSnB,OAAO,MAAK9C,EAAZ,GAAsBqH,EAAOxE,SACjC,IxCTsB,iBwCUlB,OAAOsW,GACX,QACI,OAAOnZ,I,ujBCRnB,IAWeqZ,GAXgB,WAA4C,IAA3CrZ,EAA0C,uDAAlC3J,EAAuBgR,EAAW,uCACtE,OAAQA,EAAOvE,MACX,IzCC+B,0ByCA3B,OAAO,MAAK9C,EAAZ,GAAsBqH,EAAOxE,SACjC,IzCA+B,0ByCC3B,OAAOxM,EACX,QACI,OAAO2J,ICEJsZ,GAXW,WAA4B,IAA3BtZ,EAA0B,wDAAXqH,EAAW,uCACjD,OAAQA,EAAOvE,MACX,I1CCsC,gC0CAlC,OAAO,EACX,I1CAuC,kC0CCnC,OAAO,EACX,QACI,OAAO9C,ICMJuZ,GAXU,WAAmC,IAAlCvZ,EAAiC,uDAFtC,EAE2BqH,EAAW,uCACvD,OAAQA,EAAOvE,MACX,I3CH6B,wB2CIzB,OAAOuE,EAAOxE,QAClB,I3CJ4B,uB2CKxB,OAPS,EAQb,QACI,OAAO7C,ICEJwZ,GARgBC,aAAgB,CAC3CzY,OAAQkY,GACRb,UAAWkB,GACXrT,gBAAiBmT,GACjBpY,WAAYqY,GACZ7c,KAAM2c,KCEKM,GAXiB,WAAmC,IAAlC1Z,EAAiC,uDAF7C,KAEkCqH,EAAW,uCAC9D,OAAQA,EAAOvE,MACX,IVNqB,gBUOjB,OAAOuE,EAAOxE,QAClB,IVP4B,uBUQxB,OAPS,KAQb,QACI,OAAO7C,ICDJ2Z,GALKF,aAAgB,CAChCxT,gBAAiBuT,GACjBT,UAAWW,KCJAE,gBACXD,GACArI,OAAOuI,8BAAgCvI,OAAOuI,gCCO9BC,QACW,cAA7BxI,OAAOyI,SAASC,UAEe,UAA7B1I,OAAOyI,SAASC,UAEhB1I,OAAOyI,SAASC,SAASjW,MACvB,2D,OCRNkW,IAASC,OAAO,kBAAC,IAAD,CAAUC,MAAOA,IAAO,kBAAC,GAAD,OAAmBzlB,SAAS0lB,eAAe,SDuH7E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.67ed2b89.chunk.js","sourcesContent":["import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: \"183px\",\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from \"react\";\r\n\r\nconst LabelWithAsterisk = ({ children }) => {\r\n    return (\r\n        <div className=\"labelWithAsterisk\">\r\n            <div className=\"labelWithAsterisk-labelBox\">\r\n                <span>{children}</span>\r\n            </div>\r\n            <div className=\"labelWithAsterisk-asteriskBox\">\r\n                <span className=\"labelWithAsterisk-asteriskMark\">*</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabelWithAsterisk;","//const decProps = {\r\n//    key: \"decKey\",\r\n//    name: \"name\",\r\n//    initial_indentation: \"indentationalLevel\",\r\n//    backspace_action: \"backspaceActionWithContent\",\r\n//    item_order: \"orderLevel\",\r\n//    numerated_list_format: \"numberingStyle\",\r\n//};\r\n//\r\n//\r\n//\r\n//const modification = {\r\n//    hidden: \"active\",\r\n//    backspace_action_value: \"backspaceActionWithContentStyle\",\r\n//    create_new_section_on_return_if_empty: \"returnActionNextSection\", \r\n//    pd_for_new_section_on_return_if_empty: \"returnActionNextSection\",\r\n//    change_pd_on_return_if_empty: \"change_pd_on_return_if_empty\",\r\n//    pd_for_current_section_on_return_if_empty: \"pd_for_current_section_on_return_if_empty\",\r\n//    on_tab_key: \"tabAction\",\r\n//    on_shift_tab_key: \"shiftTabAction\",\r\n//    list_key: \"listName\",\r\n//\r\n//}\r\n// const decPropsMap = new Map(Object.keys(decProps.reduce((acc, cur) => {})));\r\nclass DecDataParser {\r\n    static parseToSend(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static parseToEdit(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static mapDecFields = {};\r\n}\r\n\r\nexport default DecDataParser;","const { body } = document;\r\nlet width;\r\n\r\nconst container = document.createElement('span');\r\ncontainer.innerHTML = Array(100).join('wi');\r\ncontainer.style.cssText = [\r\n    'position:absolute',\r\n    'width:auto',\r\n    'font-size:128px',\r\n    'left:-99999px'\r\n].join(' !important;');\r\n\r\nconst getWidth = fontFamily => {\r\n    container.style.fontFamily = fontFamily;\r\n\r\n    body.appendChild(container);\r\n    width = container.clientWidth;\r\n    body.removeChild(container);\r\n\r\n    return width;\r\n};\r\n\r\nconst monoWidth  = getWidth('monospace');\r\nconst serifWidth = getWidth('serif');\r\nconst sansWidth  = getWidth('sans-serif');\r\n\r\nconst isFontAvailable = font => {\r\n    return monoWidth !== getWidth(font + ',monospace') ||\r\n    sansWidth !== getWidth(font + ',sans-serif') ||\r\n    serifWidth !== getWidth(font + ',serif');\r\n};\r\n\r\nexport default isFontAvailable;","import keycode from \"keycode\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === \"MacOS\" ? \"Option\" : \"Alt\",\r\n      ctrlKey: systemName === \"MacOS\" ? \"Control\" : \"Ctrl\",\r\n      shiftKey: \"Shift\",\r\n      metaKey: \"Command\",\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = \"\";\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === \"style\") {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","const decoratorsList = [\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n    { name: \"Heading 1\", value: \"quick_heading_1\" },\r\n    { name: \"Heading 2\", value: \"quick_heading_2\" },\r\n    { name: \"Heading 3\", value: \"quick_heading_3\" },\r\n    { name: \"Heading 4\", value: \"quick_heading_4\" },\r\n    { name: \"Heading 5\", value: \"quick_heading_5\" },\r\n];\r\n\r\nexport default decoratorsList;","const fontSet = [ \r\n    \"Source Sans Pro\",\r\n    \"Dejavu Sans\",\r\n    \"Dejavu Serif\",\r\n    \"Open Sans\",\r\n    \"Montserrat\",\r\n    \"Arial\",\r\n    \"Georgia\",\r\n    \"Verdana\",\r\n    \"Times New Roman\",\r\n];\r\n\r\nexport default fontSet;","export const LANGS = [\n  { \n    langKey: \"en_EN\", \n    langName: \"EN\", \n    langFullName: \"English\", \n  },\n  { \n    langKey: \"de_DE\", \n    langName: \"DE\", \n    langFullName: \"German\", \n  },\n  { \n    langKey: \"ru_RU\", \n    langName: \"RU\", \n    langFullName: \"Russian\", \n  },\n  { \n    langKey: \"fr_FR\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"FR\",\n    regionFullName: \"France\"\n  },\n  { \n    langKey: \"fr_CA\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"CA\",\n    regionFullName: \"Canada\",\n  },\n  { \n    langKey: \"es_ES\", \n    langName: \"ES\", \n    langFullName: \"Spanish\", \n  },\n  { \n    langKey: \"fr_BE\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"BE\",\n    regionFullName: \"Belgium\",\n  },\n  { \n    langKey: \"nl_BE\", \n    langName: \"NL\", \n    langFullName: \"Dutch\",\n    regionName: \"BE\",\n    regionFullName: \"Belgium\"\n  },\n];\n\nexport const ADDITIONAL_LANGS = LANGS.slice(1);\n\nexport const MAIN_LANG_KEY = LANGS[0].langKey;","export const tabsErrorInitialState = {\r\n    namesSection: false,\r\n    listSection: false,\r\n};\r\n\r\nexport const sectionsTabNumbers = [\r\n    { tabName: \"namesSection\", tabNumber: 0 },\r\n    { tabName: \"listSection\", tabNumber: 2 },\r\n];","export const alignmentsMap = {\r\n    center: \"center\",\r\n    left: \"flex-start\",\r\n    right: \"flex-end\",\r\n    justify: \"flex-start\",\r\n};\r\n\r\nexport const backSpaceActions = [\r\n    { key: \"merge\", value: \"Merge\" },\r\n    { key: \"apply_other_pd\", value: \"Apply other PD\" },\r\n    { key: \"remove_pd\", value: \"Remove PD\" },\r\n    { key: \"nothing\", value: \"Nothing\" }\r\n];\r\n\r\nexport const bulletNamesMap = {\r\n    bulletpoint: \"•\",\r\n    dash: \"—\",\r\n    star: \"★\",\r\n};\r\n\r\nexport const listStyleTypes = [\r\n    { name: \"1, 2, 3\", value: \"decimal\" },\r\n    {  name: \"A, B, C\", value: \"upper-alpha\" },\r\n    {  name: \"a, b, c\", value: \"lower-alpha\" },\r\n    {  name: \"I, II, III\", value: \"upper-roman\" },\r\n    {  name: \"i, ii, iii\", value: \"lower-roman\" },\r\n];\r\n\r\nexport const numberingSets = {\r\n    decimal: [\"1\", \"2\", \"3\", \"88\", \"888\"],\r\n    \"upper-alpha\": [\"A\", \"B\", \"C\", \"XX\", \"XXX\"],\r\n    \"lower-alpha\": [\"a\", \"b\", \"c\", \"xx\", \"xxx\"],\r\n    \"upper-roman\": [\"I\", \"II\", \"III\", \"XX\", \"XXX\"],\r\n    \"lower-roman\": [\"i\", \"ii\", \"iii\", \"xx\", \"xxx\"],\r\n};\r\n\r\nexport const sectionTypesMap = [\r\n { key: \"text\", value: \"Text\" },\r\n { key: \"table\", value: \"Table\" },\r\n { key: \"img\", value: \"Image\" },\r\n];\r\n\r\nexport const sampleText = `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`;\r\n","import { LANGS } from \"./localeConstants\";\r\nimport { sectionTypesMap } from \"./constants\";\r\n\r\nexport const HOLDER = \"HOLDER-POLDER\";\r\nexport const DEFAULT_FONT = \"Helvetica\";\r\nexport const DEFAULT_FONT_SIZE = \"11\";\r\nexport const DEFAULT_SIDE_NUMBER_FONT_COLOR = \"FFF\";\r\nexport const DEFAULT_SIDE_NUMBER_FILLING_COLOR = \"1E88E5\";\r\nexport const DEFAULT_SIDE_NUMBER_WIDTH = \"20\";\r\nexport const DEFAULT_SIDE_NUMBER_RADIUS = \"10\";\r\nexport const DEFAULT_FONT_COLOR = \"000\";\r\nexport const DEFAULT_ROW_INDENT = \"0\";\r\nexport const DEFAULT_MARGIN = \"6\";\r\nexport const DEFAULT_WORD_SPACING = \"0\";\r\nexport const DEFAULT_LINE_SPACING = \"1.5\";\r\nexport const DEFAULT_BORDER_COLOR = \"F00\";\r\nexport const DEFAULT_BORDER_THICKNESS = \"2\";\r\n\r\nexport const autoFillingRequiredFields = {\r\n    sideNumberFont: DEFAULT_FONT,\r\n    sideNumberFontSize: DEFAULT_FONT_SIZE,\r\n    sideNumberFontColor: DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    sideNumberFillingColor: DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    sideNumberWidth: DEFAULT_SIDE_NUMBER_WIDTH,\r\n    sideNumberRadius: DEFAULT_SIDE_NUMBER_RADIUS,\r\n    font: DEFAULT_FONT,\r\n    fontSize: DEFAULT_FONT_SIZE,\r\n    fontColor: DEFAULT_FONT_COLOR,\r\n    marginTop: DEFAULT_MARGIN,\r\n    marginBottom: DEFAULT_MARGIN,\r\n    firstRowIndent: DEFAULT_ROW_INDENT,\r\n    otherRowsIndent: DEFAULT_ROW_INDENT,\r\n    wordSpacing: DEFAULT_WORD_SPACING,   \r\n    lineSpacing: DEFAULT_LINE_SPACING,\r\n    borderColor: DEFAULT_BORDER_COLOR,\r\n    borderThickness: DEFAULT_BORDER_THICKNESS,\r\n};\r\n\r\nexport const initialFormState = {\r\n    ...autoFillingRequiredFields,\r\n    decKey: \"\",\r\n    sectionTypes: { ...sectionTypesMap.reduce((acc, { key }, i) => ({ ...acc, [key]: !i }), {})},\r\n    group: \"\",\r\n    groupToCreate: \"\",\r\n    active: true,\r\n    name: { ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}) },\r\n    indentationalLevel: \"\",\r\n    fixedIndentation: true,\r\n    softReturn: false,\r\n    backspaceActionWithContent: \"merge\",\r\n    backspaceActionWithContentStyle: \"default\",\r\n    returnActionNextSection: \"default\",\r\n    returnActionEmptySection: \"default\",\r\n    tabAction: \"\",\r\n    shiftTabAction: \"\",\r\n    isList: false,\r\n    listName: HOLDER,\r\n    orderLevel: \"\",\r\n    prefix: \"\",\r\n    suffix: \"\",\r\n    suffixDistance: \"0.25\",\r\n    magicTabs: false,\r\n    listType: \"unordered\",\r\n    listItem: \"bulletpoint\",\r\n    unicodeNumber: \"\",\r\n    unicodeChar: \"\",\r\n    numberingStyle: \"decimal\",\r\n    continueNumbering: false,\r\n    allowRestartNumbering: false,\r\n    includePreviousFrom: \"\",\r\n    sideNumber: false,\r\n    customSideNumberFont: \"\",\r\n    sideNumberAlignment: \"center\",\r\n    sideNumberBold: false,\r\n    sideNumberItalic: false,\r\n    sideNumberUnderlined: false,\r\n    sideNumberLineHeight: \"\",\r\n    referenceGroup: \"\",\r\n    referenceGroupToCreate: \"\",\r\n    customFont: \"\",\r\n    alignment: \"left\",\r\n    bold: false,\r\n    italic: false,\r\n    underlined: false,\r\n    stroke: false,\r\n    textTransform: \"none\",\r\n    readOnly: false,\r\n    connectToPrevious: false,\r\n    verticalAlign: \"baseline\",\r\n    customLineSpacing: \"\",\r\n    borderLeft: false,\r\n    borderRight: false,\r\n    borderTop: false,\r\n    borderBottom: false,\r\n    borderType: \"solid\",\r\n    fillingColor: \"\",\r\n    tocIndentation: \"\",\r\n    shortCutWin: \"\",\r\n    shortCutWinView: \"\",\r\n    shortCutMac: \"\",\r\n    shortCutMacView: \"\",\r\n};","import { tabsErrorInitialState, sectionsTabNumbers, MAIN_LANG_KEY } from \"../constants\";\r\n\r\nexport const hasErrorInSection = refs => !refs.every(ref => ref.current.value);\r\n\r\nexport const getTabsErrorState = form => {\r\n    const tabsErrorState = { ...tabsErrorInitialState };\r\n    const { name, decKey, listName } = form;\r\n\r\n    if (!name[MAIN_LANG_KEY] || !decKey) {\r\n        tabsErrorState.namesSection = true;\r\n    }\r\n    if (!listName) {\r\n        tabsErrorState.listSection = true;\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let tabName in tabsErrorState) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabsErrorState;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const getTabNumberToSwitch = tabsErrorState => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const { tabName, tabNumber } of sectionsTabNumbers) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabNumber;\r\n        }\r\n    }\r\n};","import { \r\n    numberingSets, \r\n    bulletNamesMap, \r\n    autoFillingRequiredFields, \r\n    DEFAULT_FONT, \r\n} from \"../constants\";\r\nimport isFontAvailable from \"./isFontAvailable\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const changeAndScroll = (changeFunction, timeOut) => (...args) => {\r\n    changeFunction(...args);\r\n    if (!timeOut) {\r\n        scrollToBottom(\"content-rightSide\");\r\n    } else {\r\n        setTimeout(() => {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }, timeOut);\r\n    }\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = ({ isOrderedList, numberingStyle, listItem, unicodeChar }) => {\r\n    if (isOrderedList) {\r\n        return numberingSets[numberingStyle];\r\n    }\r\n    const newBullet = bulletNamesMap[listItem] || unicodeChar;\r\n    return Array(4).fill(newBullet);\r\n};\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};\r\n\r\nexport const focusInput = (inputRef, timeout = 300) => {\r\n    setTimeout(() => {\r\n        inputRef.current.focus();\r\n    }, timeout);\r\n};\r\n\r\nexport const focusOnEmptyField = refs => {\r\n    for (let i = 0; i < refs.length; i++) {\r\n        if (!refs[i].current.value) {\r\n            focusInput(refs[i]);\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\nexport const getPreviewFont = (font, customFont) => {\r\n    if (font !== \"custom\" && isFontAvailable(font)) {\r\n        return font;\r\n    } else if (font === \"custom\" && customFont && isFontAvailable(customFont)) {\r\n        return customFont;\r\n    }\r\n    return `'${DEFAULT_FONT}', 'Roboto', sans-serif`;\r\n}\r\n\r\nexport const fillMissedFields = currentFormState => {\r\n    const { \r\n        font, customFont,\r\n        sideNumberFont, customSideNumberFont,\r\n        lineSpacing, customLineSpacing,\r\n    } = currentFormState;\r\n\r\n    const formStateWithoutMissedFields = { ...currentFormState };\r\n    \r\n    [\r\n        [font, customFont],\r\n        [sideNumberFont, customSideNumberFont], \r\n        [lineSpacing, customLineSpacing],\r\n    ].forEach(([option, customOption]) => {\r\n        if (option === \"custom\" && !customOption) {\r\n            formStateWithoutMissedFields[option] = null;\r\n        }\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    for (let fieldName in autoFillingRequiredFields) {\r\n        if (!currentFormState[fieldName] && autoFillingRequiredFields[fieldName]) {\r\n            formStateWithoutMissedFields[fieldName] = autoFillingRequiredFields[fieldName];\r\n        }\r\n    }\r\n    return formStateWithoutMissedFields;\r\n};","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport LabelWithAsterisk from \"./LabelWithAsterisk\";\r\nimport { focusInput } from \"../helpers\";\r\nimport { LANGS, MAIN_LANG_KEY, ADDITIONAL_LANGS } from \"../constants\";\r\n\r\nclass NewGroupDialog extends React.PureComponent {\r\n    isXref = this.props.groupType === \"xref\";\r\n\r\n    emptyGroup = {\r\n        ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}),\r\n        ...this.isXref && { groupKey: \"\" },\r\n    };\r\n\r\n    getInitialState = () => ({ ...this.emptyGroup, ...this.props.savedGroup });\r\n\r\n    state = this.getInitialState();\r\n\r\n    requiredFieldRef = React.createRef();\r\n\r\n    onInputChange = inputName => e => {\r\n        this.setState({ [inputName]: e.target.value });\r\n    };\r\n\r\n    onClose = () => {\r\n        this.setState(this.getInitialState());\r\n        this.props.hideGroupDialogValidationError();\r\n        this.props.closeGroupDialog();\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        if ((!this.isXref && this.state[MAIN_LANG_KEY].trim().length) || (this.isXref && this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: this.state[langKey].trim() }), {}),\r\n            };\r\n            if (this.isXref) {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            this.props.hideGroupDialogValidationError();\r\n            this.props.saveGroup(null, (groupToSave[MAIN_LANG_KEY] || groupToSave.groupKey), groupToSave);\r\n            this.props.closeGroupDialog();\r\n        } else {\r\n            this.props.showGroupDialogValidationError();\r\n            focusInput(this.requiredFieldRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode, hasGroupDialogValidationError } = this.props;\r\n        const { onInputChange, onGroupSave, onClose, isXref } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${isXref ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"decoratorDialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        { isXref && (\r\n                            <>\r\n                                <LabelWithAsterisk>Group Key</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state.groupKey}\r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state.groupKey}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { isXref ? (\r\n                            <>\r\n                                <span>Name EN</span>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state[MAIN_LANG_KEY]}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                            <React.Fragment key={langKey}>\r\n                                <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                                <TextField\r\n                                    value={this.state[langKey]}\r\n                                    onChange={onInputChange(langKey)} \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </React.Fragment>\r\n                        )) }                 \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isGroupDialogOpen: false,\r\n            hasGroupDialogValidationError: false,\r\n        };\r\n        \r\n        openGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: true });\r\n        };\r\n\r\n        closeGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: false });\r\n        };\r\n\r\n        showGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: true });\r\n        };\r\n\r\n        hideGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: false });\r\n        };\r\n\r\n        render() {\r\n            const { \r\n                openGroupDialog, \r\n                closeGroupDialog, \r\n                showGroupDialogValidationError, \r\n                hideGroupDialogValidationError \r\n            } = this; \r\n\r\n            return ( \r\n                <ViewComponent \r\n                    {...this.props} \r\n                    {...this.state} \r\n                    {...{ openGroupDialog, closeGroupDialog, showGroupDialogValidationError, hideGroupDialogValidationError }} \r\n                /> \r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import { getShortCutUtils } from \"../helpers\";\r\n\r\nexport const UPDATE_DEC_FORM = \"UPDATE_DEC_FORM\";\r\nexport const CLEAR_DEC_FORM = \"CLEAR_DEC_FORM\";\r\nexport const SHOW_DEC_DIALOG = \"SHOW_DEC_DIALOG\";\r\nexport const HIDE_DEC_DIALOG = \"HIDE_DEC_DIALOG\";\r\nexport const SWITCH_DEC_DIALOG_TAB = \"SWITCH_DEC_DIALOG_TAB\";\r\nexport const RESET_DEC_DIALOG_TAB = \"RESET_DEC_DIALOG_TAB\";\r\nexport const SWITCH_ON_DEC_DIALOG_EDIT_MODE = \"SWITCH_ON_DEC_DIALOG_EDIT_MOD\";\r\nexport const SWITCH_OFF_DEC_DIALOG_EDIT_MODE = \"SWITCH_OFF_DEC_DIALOG_EDIT_MODE\";\r\nexport const UPDATE_VALIDATION_ERROR = \"UPDATE_VALIDATION_ERROR\";\r\nexport const REMOVE_VALIDATION_ERROR = \"REMOVE_VALIDATION_ERROR\";\r\n\r\nexport const updateDecoratorForm = payload => {\r\n    return {\r\n        type: UPDATE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearDecoratorForm = payload => {\r\n    return {\r\n        type: CLEAR_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const showDecoratorDialog = () => {\r\n    return {\r\n        type: SHOW_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const hideDecoratorDialog = () => {\r\n    return {\r\n        type: HIDE_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const switchDecDialogTab = payload => {\r\n    return {\r\n        type: SWITCH_DEC_DIALOG_TAB,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const resetDecDialogTab = () => {\r\n    return {\r\n        type: RESET_DEC_DIALOG_TAB,\r\n    };\r\n}\r\n\r\nexport const switchOnDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const updateValidationError = payload => {\r\n    return {\r\n        type: UPDATE_VALIDATION_ERROR,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const removeValidationError = () => {\r\n    return {\r\n        type: REMOVE_VALIDATION_ERROR,\r\n    };\r\n};\r\n\r\nexport const openDialog = dispatch => dec => {\r\n    if (dec) {\r\n        dispatch(updateDecoratorForm(dec));\r\n        dispatch(switchOnDecDialogEditMode());\r\n    } \r\n    dispatch(showDecoratorDialog());\r\n};\r\n\r\nexport const closeDialog = dispatch => () => {\r\n    dispatch(hideDecoratorDialog());\r\n    dispatch(switchOffDecDialogEditMode());\r\n    dispatch(removeValidationError());\r\n    dispatch(resetDecDialogTab());\r\n    dispatch(clearDecoratorForm());\r\n};\r\n\r\nexport const setValue = dispatch => propName => (e, secondArg = \"\") => {\r\n    const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const toggleValue = dispatch => propName => (e, secondArg) => {\r\n    const newValue = e ? e.target.checked : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const setBullet = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const newBullet = input.length > 1 ? input[input.length - 1] : input;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newBullet,\r\n    }));\r\n    return newBullet;\r\n};\r\n\r\nexport const setColor = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n    \r\n    const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                          ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                          : \"\" ;\r\n    \r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setNumber = dispatch => propName => (e, secondArg) => {\r\n    let input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                          ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                          : \"\" ;\r\n\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setShortCut = dispatch => (valuePropName, viewPropName) => e => {\r\n    const systemName = valuePropName.search(/mac/gi) !== -1 ? \"MacOS\" : \"Windows\";\r\n    const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n    if (shortCut && shortCut.deleteKey) {\r\n        setTimeout(() => {\r\n            dispatch(updateDecoratorForm({ \r\n                [valuePropName]: \"\" \r\n            }));\r\n            dispatch(updateDecoratorForm({ \r\n                [viewPropName]: \"\" \r\n            }));\r\n        }, 100);\r\n    } else if (shortCut) {\r\n        dispatch(updateDecoratorForm({ \r\n            [valuePropName]: shortCut.value \r\n        }));\r\n        dispatch(updateDecoratorForm({ \r\n            [viewPropName]: shortCut.stringValue \r\n        }));\r\n    }\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { hasErrorInSection, focusOnEmptyField } from \"../helpers\";\r\nimport { setValue, toggleValue, updateValidationError } from \"../actions\";\r\nimport { MAIN_LANG_KEY, ADDITIONAL_LANGS, sectionTypesMap } from \"../constants\";\r\n\r\nclass NamesSection extends React.Component {\r\n    decKeyInputRef = React.createRef();\r\n    decNameEnInputRef = React.createRef();\r\n    inputRefs = [this.decKeyInputRef, this.decNameEnInputRef];\r\n\r\n    onGroupChange = (e, groupName, group) => {\r\n        if (group) {\r\n            this.props.changeGroupToCreate(null, group);\r\n        }\r\n        this.props.changeGroup(e, groupName);\r\n    };\r\n\r\n    onNameChange = langKey => e => {\r\n        const newValue = {\r\n            ...this.props.name,\r\n            [langKey]: e.target.value,\r\n        };\r\n        this.props.changeName(null, newValue);\r\n    };\r\n\r\n    onSectionTypesChange = typeName => e => {\r\n        const newValue = {\r\n            ...this.props.sectionTypes,\r\n            [typeName]: e.target.checked,\r\n        };\r\n        this.props.changeSectionTypes(null, newValue);\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n        if (this.props.validationErrorInSection && !hasErrorInSection(this.inputRefs)) {\r\n            this.props.updateValidationError({ namesSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            groupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,\r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            validationErrorInSection,\r\n            decKey, changeDecKey,\r\n            sectionTypes,\r\n            group,\r\n            active, changeActive,\r\n            name,\r\n        } = this.props;\r\n\r\n        const newGroupName = groupToCreate[MAIN_LANG_KEY];\r\n        const isEditMode = !!newGroupName;\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n                <LabelWithAsterisk>Key</LabelWithAsterisk>\r\n                <TextField \r\n                    value={decKey}\r\n                    onChange={changeDecKey}\r\n                    error={validationErrorInSection && !decKey}\r\n                    inputRef={this.decKeyInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Section types</span>\r\n                <div className=\"checkBoxesSet\">\r\n                    { sectionTypesMap.map(({ key, value }) => (\r\n                        <div className=\"labeledCheckbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label={value}\r\n                                labelPlacement=\"end\"\r\n                                checked={sectionTypes[key]}\r\n                                onChange={this.onSectionTypesChange(key)}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <span>Group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={group} \r\n                        onChange={this.onGroupChange}\r\n                        input={ <CustomInput /> }  \r\n                    >\r\n                        <option value=\"\">...</option>\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"0\">Text</option>\r\n                        <option value=\"1\">Heading</option>\r\n                        <option value=\"2\">Heading Heading Heading Heading</option>\r\n                    </NativeSelect>\r\n                    { !(isEditMode && group !== newGroupName) && (\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                    ) }\r\n                </div>\r\n\r\n                <span>Active</span>\r\n                <div className=\"unlabeledCheckbox\">\r\n                    <Checkbox\r\n                        checked={active}\r\n                        onChange={changeActive} \r\n                        color=\"primary\" \r\n                    />\r\n                </div>\r\n\r\n                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                <TextField \r\n                    value={name[MAIN_LANG_KEY]}\r\n                    onChange={this.onNameChange(MAIN_LANG_KEY)}\r\n                    error={validationErrorInSection && !name[MAIN_LANG_KEY]}\r\n                    inputRef={this.decNameEnInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                  <React.Fragment key={langKey}>\r\n                    <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                    <TextField \r\n                        value={name[langKey]}\r\n                        onChange={this.onNameChange(langKey)}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                    />\r\n                  </React.Fragment>  \r\n                )) }\r\n\r\n                <NewGroupDialog \r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onGroupChange}\r\n                    savedGroup={groupToCreate}\r\n                    groupType=\"decorators\"\r\n                    { ...{ \r\n                        isGroupDialogOpen,\r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return { \r\n        validationErrorInSection: validationError.namesSection,\r\n        formState: form,\r\n        decKey: form.decKey,\r\n        group: form.group,\r\n        active: form.active,\r\n        name: form.name,\r\n        groupToCreate: form.groupToCreate,\r\n        sectionTypes: form.sectionTypes,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeDecKey: setValue(dispatch)(\"decKey\"),\r\n        changeGroup: setValue(dispatch)(\"group\"),\r\n        changeGroupToCreate: setValue(dispatch)(\"groupToCreate\"),\r\n        changeActive: toggleValue(dispatch)(\"active\"),\r\n        changeName: setValue(dispatch)(\"name\"),\r\n        changeSectionTypes: setValue(dispatch)(\"sectionTypes\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(NamesSection)));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","import SectionTitle from \"./SectionTitle\";\r\nexport default SectionTitle;","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst SectionTitle = ({text, children}) => (\r\n    <>\r\n        <div className=\"sectionTitle\">\r\n            <span>{text || children}</span>\r\n        </div>\r\n        <div className=\"spaceHolder\"/>\r\n    </>\r\n);\r\n\r\nexport default SectionTitle;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst BackSpaceActionInput = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"175px\",\r\n      width: \"175px\",\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default BackSpaceActionInput;","import PositioningSection from \"./PositioningSection\";\r\nexport default PositioningSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport SectionTitle from \"../../common/SectionTitle\";\r\nimport { backSpaceActions, decoratorsList } from \"../../constants\";\r\nimport BackSpaceActionInput from \"./BackSpaceActionInput\";\r\nimport { setValue, toggleValue } from \"../../actions\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst PositioningSection = props => {\r\n    const {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        fixedIndentation, changeisFixedIndentation,\r\n        softReturn, changeSoftReturn,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    } = props;\r\n\r\n    const backSpaceActionStyleSettingsState = backspaceActionWithContent === \"apply_other_pd\" ? \"shown\" : \"hidden\";\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Identational level</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={indentationalLevel}\r\n                    onChange={changeIndentationalLevel}\r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>Fixed indentation</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={fixedIndentation}\r\n                    onChange={changeisFixedIndentation}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n\r\n            <span>Soft return</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={softReturn}\r\n                    onChange={changeSoftReturn}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n            \r\n            <SectionTitle text=\"BACKSPACE\" />\r\n\r\n            <span>At the beginning of a section with content</span>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <NativeSelect \r\n                        value={backspaceActionWithContent}\r\n                        onChange={changeBackspaceActionWithContent}\r\n                        input={ <BackSpaceActionInput /> }\r\n                    >\r\n                        {backSpaceActions.map(action => (\r\n                            <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                        ))}\r\n                    </NativeSelect>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${backSpaceActionStyleSettingsState} wideSelectBox`}>\r\n                    <NativeSelect\r\n                        value={backspaceActionWithContentStyle}\r\n                        onChange={changeBackspaceActionWithContentStyle}\r\n                        input={ <CustomInput /> }\r\n                    >\r\n                        <option value=\"default\">Global Fallback Style</option>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n\r\n            <SectionTitle text=\"RETURN\" />\r\n\r\n\r\n            <span>Style of next section</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={returnActionNextSection}\r\n                    onChange={changeReturnActionNextSection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n\r\n            <span>In empty section change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect \r\n                    value={returnActionEmptySection}\r\n                    onChange={changeReturnActionEmptySection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <SectionTitle text=\"TAB / SHIFT+TAB\" />\r\n\r\n            <span>TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={tabAction}\r\n                    onChange={changeTabAction}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>SHIFT+TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={shiftTabAction}\r\n                    onChange={changeShiftTabAction} \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        indentationalLevel: form.indentationalLevel,\r\n        backspaceActionWithContent: form.backspaceActionWithContent,\r\n        backspaceActionWithContentStyle: form.backspaceActionWithContentStyle,\r\n        returnActionNextSection: form.returnActionNextSection,\r\n        returnActionEmptySection: form.returnActionEmptySection,\r\n        tabAction: form.tabAction,\r\n        shiftTabAction: form.shiftTabAction,\r\n        fixedIndentation: form.fixedIndentation,\r\n        softReturn: form.softReturn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeIndentationalLevel: setValue(dispatch)(\"indentationalLevel\"),\r\n        changeBackspaceActionWithContent: setValue(dispatch)(\"backspaceActionWithContent\"),\r\n        changeBackspaceActionWithContentStyle: setValue(dispatch)(\"backspaceActionWithContentStyle\"),\r\n        changeBackspaceActionWithoutContent: setValue(dispatch)(\"backspaceActionWithoutContent\"),\r\n        changeBackspaceActionWithoutContentStyle: setValue(dispatch)(\"backspaceActionWithoutContentStyle\"),\r\n        changeReturnActionNextSection: setValue(dispatch)(\"returnActionNextSection\"),\r\n        changeReturnActionEmptySection: setValue(dispatch)(\"returnActionEmptySection\"),\r\n        changeTabAction: setValue(dispatch)(\"tabAction\"),\r\n        changeShiftTabAction: setValue(dispatch)(\"shiftTabAction\"),\r\n        changeisFixedIndentation: toggleValue(dispatch)(\"fixedIndentation\"),\r\n        changeSoftReturn: toggleValue(dispatch)(\"softReturn\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(PositioningSection));","import { getOffset, getCorrectColor, getPreviewFont } from \"../../helpers\";\r\nimport { alignmentsMap, DEFAULT_FONT_SIZE, DEFAULT_LINE_SPACING } from \"../../constants\";\r\n\r\nexport const generatePreviewStyle = formState => {\r\n    const {\r\n        font,\r\n        customFont,\r\n        alignment,\r\n        fontSize,\r\n        fontColor,\r\n        bold,\r\n        italic,\r\n        underlined,\r\n        stroke,\r\n        textTransform,\r\n        verticalAlign,\r\n        marginTop,\r\n        marginBottom,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        customLineSpacing,\r\n        wordSpacing,\r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderType,\r\n        borderColor,\r\n        borderThickness,\r\n        fillingColor,\r\n        fillingConnectToPrevious,\r\n        connectToPrevious,\r\n    } = formState;\r\n    \r\n    const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n    const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n    const previewAdditionalFillingColor = fillingConnectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n    const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n    const previewMarginLeft = `${!otherRowsIndent ? 0 : (otherRowsIndent >= 6 ? 6 : otherRowsIndent)}cm`;\r\n    const previewTextIndent = `${!indentsDifference ? 0 : (indentsDifference >= 6 ? 6 : indentsDifference)}cm`;\r\n    const previewLineSpacing = lineSpacing !== \"custom\" ? lineSpacing : (customLineSpacing || DEFAULT_LINE_SPACING);\r\n    const offset = getOffset(verticalAlign, fontSize);\r\n    const previewMarginTop = `${(!connectToPrevious ? parseFloat(marginTop) : 0) + offset}pt`;\r\n    const previewMarginBottom = `${(!connectToPrevious ? parseFloat(marginBottom) : 0) - offset}pt`;\r\n    const previewBorderLeft = borderLeft ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderRight = borderRight ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderTop = borderTop ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderBottom = borderBottom ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const correctFontSize = fontSize <= 120 ? fontSize : 120;\r\n    const previewStyle = {\r\n        fontSize: !fontSize ? `${DEFAULT_FONT_SIZE}pt` : `${correctFontSize}pt`,\r\n        color: `#${previewFontColor}`,\r\n        fontFamily: getPreviewFont(font, customFont),\r\n        alignItems: alignmentsMap[alignment],\r\n        textAlign: alignment,\r\n        fontWeight: bold ? \"bold\" : \"normal\",\r\n        fontStyle: italic ? \"italic\" : \"normal\",\r\n        textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n        verticalAlign,\r\n        textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n        fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n        backgroundColor: `#${previewFillingColor}`,\r\n        backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        borderImage: `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        marginLeft: previewMarginLeft,\r\n        textIndent: previewTextIndent,\r\n        wordSpacing: `${wordSpacing || 0}pt`,\r\n        lineHeight: previewLineSpacing,\r\n        marginTop: previewMarginTop,\r\n        marginBottom: previewMarginBottom,\r\n        borderLeft: previewBorderLeft,\r\n        borderRight: previewBorderRight,\r\n        borderTop: previewBorderTop,\r\n        borderBottom: previewBorderBottom,\r\n        outline: \"none\",\r\n        ...borderLeft && { paddingLeft: `${correctFontSize / 3}pt`},\r\n        ...borderRight && { paddingRight: `${correctFontSize / 3}pt`},\r\n        ...borderTop && { paddingTop: `${correctFontSize / 3}pt`},\r\n        ...borderBottom && { paddingBottom: `${correctFontSize / 3}pt`},\r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport const generateSideNumberStyle = formState => {\r\n    const { \r\n        listType,\r\n        suffixDistance,\r\n        sideNumber,\r\n        sideNumberFont,\r\n        customSideNumberFont,\r\n        sideNumberAlignment,\r\n        sideNumberFontSize,\r\n        sideNumberFontColor,\r\n        sideNumberFillingColor,\r\n        sideNumberWidth,\r\n        sideNumberRadius,\r\n        sideNumberBold,\r\n        sideNumberItalic,\r\n        sideNumberUnderlined,\r\n        sideNumberLineHeight,\r\n    } = formState;\r\n\r\n    const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"f5f5f5\");\r\n    const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n    const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n        fontFamily: getPreviewFont(sideNumberFont, customSideNumberFont),\r\n        textAlign: sideNumberAlignment,\r\n        fontSize: !sideNumberFontSize ? `${DEFAULT_FONT_SIZE}pt` : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n        color: `#${previewSideNumberFontColor}`,\r\n        backgroundColor: `#${previewSideNumberFillingColor}`,\r\n        minWidth: `${!sideNumberWidth ? 0 : (sideNumberWidth < 150 ? sideNumberWidth : 150)}pt`,\r\n        borderRadius: `${sideNumberRadius || 0}pt`,\r\n        fontWeight: sideNumberBold ? \"bold\" : \"normal\",\r\n        fontStyle: sideNumberItalic ? \"italic\" : \"normal\",\r\n        textDecoration: sideNumberUnderlined ? \"underline\" : \"none\",\r\n        ...sideNumberLineHeight && { lineHeight: `${sideNumberLineHeight}pt`},\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n    };\r\n\r\n    return sideNumberStyle;\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { generatePreviewStyle, generateSideNumberStyle } from \"./generators\";\r\nimport { getListChars } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = props => {\r\n    const { \r\n        formState,\r\n        prefix, \r\n        suffix, \r\n        suffixDistance,\r\n        listType,\r\n        listItem, \r\n        unicodeChar,\r\n        numberingStyle,\r\n        sideNumber,\r\n    } = props;\r\n\r\n    const isOrderedList = listType === \"ordered\";\r\n\r\n    const listChars = getListChars({ \r\n        isOrderedList, \r\n        numberingStyle, \r\n        listItem, \r\n        unicodeChar \r\n    });\r\n\r\n    const listItemBeginnings = listChars.map(listChar => {\r\n        return (`${prefix}${listChar}${suffix}`);\r\n    });\r\n\r\n    const previewStyle = generatePreviewStyle(formState);\r\n    const isSideNumber = isOrderedList && sideNumber;\r\n    const sideNumberStyle = isSideNumber ? generateSideNumberStyle(formState) : {};\r\n    const listItemBeginningStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className=\"demonstrationElement\">\r\n                    <div\r\n                        className=\"demonstrationElement-text\"\r\n                        style={previewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                        { isSideNumber && (\r\n                            <>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[3]}`}</span><span>One more list item</span>\r\n                                </div>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[4]}`}</span><span>And one more</span>\r\n                                </div>\r\n                            </>\r\n                        ) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n        prefix: form.prefix, \r\n        suffix: form.suffix,\r\n        suffixDistance: form.suffixDistance,\r\n        listType: form.listType,\r\n        listItem: form.listItem, \r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        sideNumber: form.sideNumber,\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps)(ListPreview));","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.PureComponent {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, defaultColorCode, required, bottomAligned } = this.props;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n        const colorPickerClassName = `colorPicker${ bottomAligned ? \" colorPicker_bottomAligned\" : \"\"}`;\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        if (defaultColorCode) {\r\n                            selectAllOnClick(defaultColorCode)(e);\r\n                        }\r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={this.showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className={colorPickerClassName}>\r\n                        <div className=\"colorPicker-chromeBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={this.colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={this.hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport CustomInput from \"./CustomInput\";\r\nimport { fontSet, DEFAULT_FONT } from \"../constants\";\r\nimport { isFontAvailable, focusInput, changeAndScroll } from \"../helpers\";\r\n\r\nclass FontSelectFields extends React.PureComponent {\r\n    customFontInputRef = React.createRef();\r\n\r\n    onFontChange = e => {\r\n        this.props.changeFont(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customFontInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { font, customFont, changeCustomFont } = this.props;\r\n        const availableFonts = fontSet.filter(fontName => fontName === font || isFontAvailable(fontName));\r\n        const optionalFieldState = font === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        return (\r\n            <>\r\n                <span >Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeAndScroll(this.onFontChange, 500)}\r\n                >\r\n                    <option value={DEFAULT_FONT}>Helvetica</option>\r\n                    { availableFonts.map(fontName => <option value={fontName} key={fontName}>{fontName}</option>) }\r\n                    <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                </NativeSelect>\r\n    \r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <span></span>\r\n                </div>\r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <TextField \r\n                        value={customFont}\r\n                        onChange={changeCustomFont}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        placeholder=\"Enter the font name\"\r\n                        inputRef={this.customFontInputRef}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FontSelectFields;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport ListPreview from \"../../common/Preview/ListPreview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport LabelWithAsterisk from \"../../common/LabelWithAsterisk\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport { \r\n    listStyleTypes, \r\n    bulletNamesMap, \r\n    HOLDER, \r\n    DEFAULT_FONT_SIZE,\r\n    DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    DEFAULT_SIDE_NUMBER_WIDTH,\r\n    DEFAULT_SIDE_NUMBER_RADIUS,\r\n } from \"../../constants\";\r\nimport { \r\n    updateValidationError,\r\n    setValue,\r\n    toggleValue,\r\n    setNumber,\r\n    setColor,\r\n    setBullet,\r\n} from \"../../actions\";\r\nimport { \r\n    selectAllOnClick, \r\n    changeAndScroll, \r\n    focusInput,\r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n} from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ListSection extends React.Component {\r\n    listNameInputRef = React.createRef();\r\n    unicodeCharInputRef = React.createRef();\r\n\r\n    onIsListChange = e => {\r\n        const { listName } = this.props;\r\n        if (e.target.checked) {\r\n            if (listName === HOLDER) {\r\n                this.props.changeListName(null, \"\");\r\n            }\r\n        } else if (listName === \"\") {\r\n            setTimeout(() => this.props.changeListName(null, HOLDER), 200);\r\n        }\r\n        this.props.changeIsList(e);\r\n\r\n        if (e.target.checked && listName === HOLDER) {\r\n            focusInput(this.listNameInputRef);\r\n        }       \r\n    };\r\n\r\n    onListTypeChange = e => {\r\n        const { suffix } = this.props;\r\n        const { value } = e.target;\r\n        this.props.changeListType(null, value);\r\n        if (value === \"ordered\" && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        } else if (value === \"unordered\" && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        }\r\n    };\r\n\r\n    onListItemChange = e => {\r\n        this.props.changeListItem(e);\r\n        if (e.target.value === \"custom\" && !this.props.unicodeChar) {\r\n            focusInput(this.unicodeCharInputRef);\r\n        }\r\n    };\r\n\r\n    onUnicodeNumberChange = e => {\r\n        const newUnicodeNumber = this.props.changeUnicodeNumber(e);\r\n        const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n        this.props.changeUnicodeChar(null, newUnicodeChar);\r\n    };\r\n    \r\n    onUnicodeCharChange = e => {\r\n        const newUnicodeChar = this.props.changeUnicodeChar(e);\r\n        const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n        this.props.changeUnicodeNumber(null, newUnicodeNumber);\r\n    };\r\n\r\n    onSideNumberChange = e => {\r\n        const { suffix } = this.props;\r\n        this.props.changeSideNumber(e);\r\n        if (e.target.checked && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        } else if (!e.target.checked && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n        if (this.props.validationErrorInSection && this.props.listName) {\r\n            this.props.updateValidationError({ listSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            validationErrorInSection,\r\n            listPreviewProps,\r\n            isList,\r\n            listName, changeListName,\r\n            orderLevel, changeOrderLevel,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listType,\r\n            listItem,\r\n            unicodeNumber,\r\n            unicodeChar,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changeIncludePreviousFrom,\r\n            sideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            customSideNumberFont, changeCustomSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberWidth, changeSideNumberWidth,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n            sideNumberBold, changeSideNumberBold,\r\n            sideNumberItalic, changeSideNumberItalic,\r\n            sideNumberUnderlined, changeSideNumberUnderlined,\r\n            sideNumberLineHeight, changeSideNumberLineHeight,\r\n        } = this.props;\r\n        \r\n        const mainListSettingsState = isList ? \"shown\" : \"hidden\";\r\n        const unorderedListSettingsState = (isList && listType === \"unordered\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState = (isList && listType === \"unordered\" && listItem === \"custom\") ? \"shown\" : \"hidden\";\r\n        const orderedListSettingsState = (isList && listType === \"ordered\") ? \"shown\" : \"hidden\";\r\n        const sideNumberSettingsState = (isList && listType === \"ordered\" && sideNumber) ? \"shown\" : \"hidden\";\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"dialogGrid dialogGrid_2cols\">\r\n                    <div>\r\n                        <div>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                                <div className=\"listItemSpan\">\r\n                                    <span>Is it a list?</span>\r\n                                </div>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={isList} \r\n                                        onChange={changeAndScroll(this.onIsListChange)} \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${mainListSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth optionalSettings\">\r\n                                    <LabelWithAsterisk>List name</LabelWithAsterisk>\r\n                                    <TextField\r\n                                        value={listName}\r\n                                        onChange={changeListName} \r\n                                        error={validationErrorInSection && !listName}\r\n                                        inputRef={this.listNameInputRef}\r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Order level</span>\r\n                                    <div>\r\n                                        <NativeSelect\r\n                                            value={orderLevel}\r\n                                            onChange={changeOrderLevel}\r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"\">...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                    </div>\r\n    \r\n                                    <span>Prefix</span>\r\n                                    <TextField\r\n                                        value={prefix}\r\n                                        onChange={changePrefix} \r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Suffix</span>\r\n                                    <TextField\r\n                                        value={suffix}\r\n                                        onChange={changeSuffix} \r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                        onClick={selectAllOnClick(\".\")}\r\n                                    />\r\n    \r\n                                    <span>Suffix distance</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <NativeSelect\r\n                                            value={suffixDistance}\r\n                                            onChange={changeSuffixDistance} \r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"0.25\">0.25</option>\r\n                                            <option value=\"0.5\">0.5</option>\r\n                                            <option value=\"0.75\">0.75</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"1.25\">1.25</option>\r\n                                            <option value=\"1.5\">1.5</option>\r\n                                            <option value=\"1.75\">1.75</option>\r\n                                            <option value=\"2\">2</option>\r\n                                        </NativeSelect>\r\n                                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                                    </div>\r\n    \r\n                                    <span>Magic Tabs</span>\r\n                                    <div className=\"unlabeledCheckbox\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={magicTabs} \r\n                                            onChange={changeMagicTabs} \r\n                                        />\r\n                                    </div>\r\n    \r\n                                    <span>Type of list</span>\r\n                                    <RadioGroup \r\n                                        value={listType} \r\n                                        onChange={changeAndScroll(this.onListTypeChange)}\r\n                                        row\r\n                                    >\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"unordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Unordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"ordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Ordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                    </RadioGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${orderedListSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {listStyleTypes.map(style => (\r\n                                            <option value={style.value} key={style.value}>{style.name}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changeIncludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Side number</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={changeAndScroll(this.onSideNumberChange)}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                            </div> \r\n    \r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${sideNumberSettingsState}`}>\r\n                                <div className=\"flexibleGrid listTypeSettings\">\r\n                                    <FontSelectFields \r\n                                        font={sideNumberFont}\r\n                                        changeFont={changeSideNumberFont}\r\n                                        customFont={customSideNumberFont}\r\n                                        changeCustomFont={changeCustomSideNumberFont}\r\n                                    />\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFontColor} \r\n                                        changeColorCode={changeSideNumberFontColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FONT_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFillingColor} \r\n                                        changeColorCode={changeSideNumberFillingColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FILLING_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n    \r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_WIDTH)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span>Line height</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberLineHeight}\r\n                                            onChange={changeSideNumberLineHeight}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>  \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_RADIUS)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span className=\"stylingsSpan\">Stylings</span>\r\n                                    <div className=\"checkBoxesSet\">\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberBold}\r\n                                                onChange={changeSideNumberBold}\r\n                                                label=\"Bold\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberItalic}\r\n                                                onChange={changeSideNumberItalic}\r\n                                                label=\"Italic\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                label=\"Underlined\"\r\n                                                labelPlacement=\"end\"\r\n                                                checked={sideNumberUnderlined}\r\n                                                onChange={changeSideNumberUnderlined}\r\n                                            />\r\n                                        </div>\r\n                                    </div>  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className={`listPreviewBox optionalSettings optionalSettings_${mainListSettingsState}`}>\r\n                        <ListPreview {...listPreviewProps} />\r\n                    </div>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${unorderedListSettingsState}`}>\r\n                    <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listItemSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={this.onListItemChange} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Object.entries(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"custom\"} className=\"highlightedOption\">Custom</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${customListItemSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Unicode number</span>\r\n                                    <div>\r\n                                        <TextField  \r\n                                            value={unicodeNumber}\r\n                                            onChange={this.onUnicodeNumberChange}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"unicodeInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Char</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeChar}\r\n                                            onChange={this.onUnicodeCharChange}\r\n                                            onClick={selectAllOnClick()}\r\n                                            inputRef={this.unicodeCharInputRef}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"bulletInput\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return {\r\n        validationErrorInSection: validationError.listSection,\r\n        formState: form,\r\n        isList: form.isList,\r\n        listName: form.listName, \r\n        orderLevel: form.orderLevel,\r\n        prefix: form.prefix,\r\n        suffix: form.suffix,\r\n        suffixDistance: form.suffixDistance,\r\n        magicTabs: form.magicTabs,\r\n        listType: form.listType,\r\n        listItem: form.listItem,\r\n        unicodeNumber: form.unicodeNumber,\r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        continueNumbering: form.continueNumbering,\r\n        allowRestartNumbering: form.allowRestartNumbering,\r\n        includePreviousFrom: form.includePreviousFrom,\r\n        sideNumber: form.sideNumber,\r\n        sideNumberFont: form.sideNumberFont,\r\n        customSideNumberFont: form.customSideNumberFont,\r\n        sideNumberAlignment: form.sideNumberAlignment,\r\n        sideNumberFontSize: form.sideNumberFontSize,\r\n        sideNumberFontColor: form.sideNumberFontColor,\r\n        sideNumberFillingColor: form.sideNumberFillingColor,\r\n        sideNumberWidth: form.sideNumberWidth,\r\n        sideNumberRadius: form.sideNumberRadius,\r\n        sideNumberBold: form.sideNumberBold,\r\n        sideNumberItalic: form.sideNumberItalic,\r\n        sideNumberUnderlined: form.sideNumberUnderlined,\r\n        sideNumberLineHeight: form.sideNumberLineHeight,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeListName: setValue(dispatch)(\"listName\"),\r\n        changeIsList: toggleValue(dispatch)(\"isList\"),\r\n        changeOrderLevel: setValue(dispatch)(\"orderLevel\"),\r\n        changePrefix: setValue(dispatch)(\"prefix\"),\r\n        changeSuffix: setValue(dispatch)(\"suffix\"),\r\n        changeSuffixDistance: setValue(dispatch)(\"suffixDistance\"),\r\n        changeMagicTabs: toggleValue(dispatch)(\"magicTabs\"),\r\n        changeListType: setValue(dispatch)(\"listType\"),\r\n        changeListItem: setValue(dispatch)(\"listItem\"),\r\n        changeUnicodeNumber: setColor(dispatch)(\"unicodeNumber\"),\r\n        changeUnicodeChar: setBullet(dispatch)(\"unicodeChar\"),\r\n        changeNumberingStyle: setValue(dispatch)(\"numberingStyle\"),\r\n        changeContinueNumbering: toggleValue(dispatch)(\"continueNumbering\"),\r\n        changeAllowRestartNumbering: toggleValue(dispatch)(\"allowRestartNumbering\"),\r\n        changeIncludePreviousFrom: setValue(dispatch)(\"includePreviousFrom\"),\r\n        changeSideNumber: toggleValue(dispatch)(\"sideNumber\"),\r\n        changeSideNumberFont: setValue(dispatch)(\"sideNumberFont\"),\r\n        changeCustomSideNumberFont: setValue(dispatch)(\"customSideNumberFont\"),\r\n        changeSideNumberAlignment: setValue(dispatch)(\"sideNumberAlignment\"),\r\n        changeSideNumberFontSize: setNumber(dispatch)(\"sideNumberFontSize\"),\r\n        changeSideNumberFontColor: setColor(dispatch)(\"sideNumberFontColor\"),\r\n        changeSideNumberFillingColor: setColor(dispatch)(\"sideNumberFillingColor\"),\r\n        changeSideNumberWidth: setNumber(dispatch)(\"sideNumberWidth\"),\r\n        changeSideNumberRadius: setNumber(dispatch)(\"sideNumberRadius\"),\r\n        changeSideNumberBold: toggleValue(dispatch)(\"sideNumberBold\"),\r\n        changeSideNumberItalic: toggleValue(dispatch)(\"sideNumberItalic\"),\r\n        changeSideNumberUnderlined: toggleValue(dispatch)(\"sideNumberUnderlined\"),\r\n        changeSideNumberLineHeight: setNumber(dispatch)(\"sideNumberLineHeight\"),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListSection);","import ListSection from \"./ListSection\";\r\nexport default ListSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { setValue } from \"../actions\";\r\nimport { MAIN_LANG_KEY } from \"../constants\";\r\n\r\nclass ReferencingSection extends React.Component {\r\n    onXrefChange = (e, xrefName, xref) => {\r\n        if (xref) {\r\n            this.props.changeReferenceGroupToCreate(null, xref);\r\n        }\r\n        this.props.changeReferenceGroup(e, xrefName);\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            referenceGroupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,  \r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            referenceGroup,\r\n        } = this.props;\r\n        \r\n        const newGroupName = referenceGroupToCreate[MAIN_LANG_KEY] || referenceGroupToCreate.groupKey;\r\n        const isEditMode = !!newGroupName;\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Reference group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInput /> } \r\n                        value={referenceGroup} \r\n                        onChange={this.onXrefChange} \r\n                    >\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"\">none</option>\r\n                        <option value=\"0\">Reference group 1</option>\r\n                        <option value=\"1\">Reference group 2</option>\r\n                    </NativeSelect>\r\n                    {\r\n                        !(isEditMode && referenceGroup !== newGroupName) &&\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                     }\r\n                </div>\r\n                <NewGroupDialog\r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onXrefChange}\r\n                    savedGroup={referenceGroupToCreate}\r\n                    groupType=\"xref\" \r\n                    { ...{ \r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        referenceGroup: form.referenceGroup,\r\n        referenceGroupToCreate: form.referenceGroupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeReferenceGroup: setValue(dispatch)(\"referenceGroup\"),\r\n        changeReferenceGroupToCreate: setValue(dispatch)(\"referenceGroupToCreate\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(ReferencingSection)));","import * as React from \"react\";\r\nimport deepEqual from \"fast-deep-equal\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \");\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === \"function\" ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== \"function\" ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || \"table\", Object.assign({}, props, { ref: typeof innerRef === \"function\" ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContentEditable from \"../ContentEditable\";\r\nimport { generatePreviewStyle } from \"./generators\";\r\nimport { setValue } from \"../../actions\";\r\nimport { selectAllEditableContent, getUnstyledText } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nclass Preview extends React.Component {\r\n    onPreviewTextChange = e => {\r\n        const { value } = e.target;\r\n        if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n            this.props.changePreviewText(null, getUnstyledText(value));\r\n        } else {\r\n            this.props.changePreviewText(null, `<div><br></div>`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const previewStyle = generatePreviewStyle(this.props.formState);\r\n        const { previewText } = this.props;\r\n    \r\n        return (\r\n            <div className=\"preview\">\r\n                <span className=\"preview-title\">Preview</span>\r\n                <div \r\n                    className=\"preview-content preview-content_withPointer\" \r\n                    onClick={selectAllEditableContent(\"demonstrationElement\")}\r\n                >\r\n                    <div className=\"demonstrationElement\">\r\n                        <ContentEditable\r\n                            className=\"demonstrationElement-text\"\r\n                            onChange={this.onPreviewTextChange} \r\n                            html={previewText}\r\n                            style={previewStyle}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changePreviewText: setValue(dispatch)(\"previewText\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(Preview));","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport Preview from \"../../common/Preview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport {  setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { DEFAULT_FONT_SIZE, DEFAULT_FONT_COLOR } from \"../../constants\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = props => {\r\n    const { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign,\r\n        readOnly, changeReadOnly,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"flexibleGrid\">\r\n                <FontSelectFields { ...{ font, changeFont, customFont, changeCustomFont }} />\r\n                \r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    defaultColorCode={DEFAULT_FONT_COLOR}\r\n                    required\r\n                />\r\n\r\n                <span>Sub/Superscript</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={verticalAlign} \r\n                        onChange={changeVerticalAlign}\r\n                        input={ <CustomInput /> } \r\n                    >\r\n                        <option value=\"baseline\">None</option>\r\n                        <option value=\"sub\">Subscript</option>\r\n                        <option value=\"super\">Superscript</option>\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_topIndented\">\r\n            <span className=\"stylingsSpan\">Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Read only</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={readOnly}\r\n                    onChange={changeReadOnly}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        font: form.font,\r\n        customFont: form.customFont,\r\n        alignment: form.alignment,\r\n        fontSize: form.fontSize,\r\n        fontColor: form.fontColor,\r\n        bold: form.bold,\r\n        italic: form.italic,\r\n        underlined: form.underlined,\r\n        stroke: form.stroke,\r\n        textTransform: form.textTransform,\r\n        verticalAlign: form.verticalAlign,\r\n        readOnly: form.readOnly,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeFont: setValue(dispatch)(\"font\"),\r\n        changeCustomFont: setValue(dispatch)(\"customFont\"),\r\n        changeAlignment: setValue(dispatch)(\"alignment\"),\r\n        changeFontSize: setNumber(dispatch)(\"fontSize\"),\r\n        changeFontColor: setColor(dispatch)(\"fontColor\"),\r\n        changeBold: toggleValue(dispatch)(\"bold\"),\r\n        changeItalic: toggleValue(dispatch)(\"italic\"),\r\n        changeUnderlined: toggleValue(dispatch)(\"underlined\"),\r\n        changeStroke: toggleValue(dispatch)(\"stroke\"),\r\n        changeTextTransform: setValue(dispatch)(\"textTransform\"),\r\n        changeVerticalAlign: setValue(dispatch)(\"verticalAlign\"),\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeReadOnly: toggleValue(dispatch)(\"readOnly\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TypographySection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { toggleValue } from \"../actions\";\r\n\r\nconst ConnectToPreviousField = ({ connectToPrevious, changeConnectToPrevious }) => (\r\n    <>\r\n        <span>Merge sections</span>\r\n        <div className=\"unlabeledCheckbox\">\r\n            <Checkbox \r\n                checked={connectToPrevious}\r\n                onChange={changeConnectToPrevious}\r\n                color=\"primary\" \r\n            />\r\n        </div>\r\n    </>\r\n);\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeConnectToPrevious: toggleValue(dispatch)(\"connectToPrevious\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ConnectToPreviousField));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport Preview from \"../common/Preview\";\r\nimport { setValue, setNumber } from \"../actions\";\r\nimport { DEFAULT_MARGIN, DEFAULT_WORD_SPACING } from \"../constants\";\r\nimport { selectAllOnClick, focusInput, changeAndScroll } from \"../helpers\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\n\r\nclass DistancesSection extends React.Component {\r\n    customLineSpacingInputRef = React.createRef();\r\n\r\n    onLineSpacingChange = e => {\r\n        this.props.changeLineSpacing(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customLineSpacingInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            previewProps,\r\n            connectToPrevious,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            firstRowIndent, changeFirstRowIndent,\r\n            otherRowsIndent, changeOtherRowsIndent,\r\n            lineSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n            wordSpacing, changeWordSpacing,\r\n        } = this.props;\r\n\r\n        const customLineSpacingFieldState = lineSpacing === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        const marginFieldsState = !connectToPrevious ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div className=\"flexibleGrid\">\r\n                    <ConnectToPreviousField />\r\n                    <div className={`optionalField optionalField ${marginFieldsState}`}>\r\n                      <span>Margin top</span>\r\n                    </div>\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginTop}\r\n                            onChange={changeMarginTop}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <div className={`optionalField ${marginFieldsState}`}>\r\n                        <span>Margin bottom</span>\r\n                    </div>\r\n\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginBottom}\r\n                            onChange={changeMarginBottom}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <span>1st row indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={firstRowIndent}\r\n                            onChange={changeFirstRowIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Other rows indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={otherRowsIndent}\r\n                            onChange={changeOtherRowsIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Line spacing</span>\r\n                    <div>\r\n                        <NativeSelect \r\n                            input={ <CustomInputShort /> } \r\n                            value={lineSpacing} \r\n                            onChange={changeAndScroll(this.onLineSpacingChange, 500)} \r\n                        >\r\n                            <option value=\"1.0\">1.0</option>\r\n                            <option value=\"1.15\">1.15</option>\r\n                            <option value=\"1.5\">1.5</option>\r\n                            <option value=\"2.0\">2.0</option>\r\n                            <option value=\"2.5\">2.5</option>\r\n                            <option value=\"3.0\">3.0</option>\r\n                            <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                        </NativeSelect> \r\n                    </div>\r\n\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                    </div>\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                            placeholder=\"Your value\"\r\n                            inputRef={this.customLineSpacingInputRef}\r\n                        />                                            \r\n                    </div>\r\n                        \r\n                    <span>Word spacing</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={wordSpacing}\r\n                            onChange={changeWordSpacing}\r\n                            onClick={selectAllOnClick(DEFAULT_WORD_SPACING)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n        marginTop: form.marginTop,\r\n        marginBottom: form.marginBottom,\r\n        firstRowIndent: form.firstRowIndent,\r\n        otherRowsIndent: form.otherRowsIndent,\r\n        lineSpacing: form.lineSpacing,\r\n        customLineSpacing: form.customLineSpacing,\r\n        wordSpacing: form.wordSpacing,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeMarginBottom: setNumber(dispatch)(\"marginBottom\"),\r\n        changeFirstRowIndent: setNumber(dispatch)(\"firstRowIndent\"),\r\n        changeOtherRowsIndent: setNumber(dispatch)(\"otherRowsIndent\"),\r\n        changeLineSpacing: setValue(dispatch)(\"lineSpacing\"),\r\n        changeCustomLineSpacing: setNumber(dispatch)(\"customLineSpacing\"),\r\n        changeWordSpacing: setNumber(dispatch)(\"wordSpacing\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(DistancesSection));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default FrameTypeInput;","import { getCorrectColor } from \"../../helpers\";\r\n\r\nconst generateBorderPreviewStyle = formState => {\r\n    const { \r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderColor,\r\n        borderThickness,\r\n        borderType,\r\n    } = formState;\r\n\r\n    const correctColor = getCorrectColor(borderColor);\r\n    const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n    const previewStyle = {\r\n        borderLeft: borderLeft ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginLeft: borderLeft ? \"0\" : previewBorderWidth, \r\n        borderRight: borderRight ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginRight: borderRight ? \"0\" : previewBorderWidth, \r\n        borderTop: borderTop ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginTop: borderTop ? \"0\" : previewBorderWidth, \r\n        borderBottom: borderBottom ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginBottom: borderBottom ? \"0\" : previewBorderWidth, \r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport default generateBorderPreviewStyle;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport FrameTypeInput from \"../../sections/FramesSection/FrameTypeInput\";\r\nimport Preview from \"../../common/Preview\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport ConnectToPreviousField from \"../../common/ConnectToPreviousField\";\r\nimport generateBorderPreviewStyle from \"./generateBorderPreviewStyle\";\r\nimport { setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\nimport { DEFAULT_BORDER_COLOR, DEFAULT_BORDER_THICKNESS } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass FramesSection extends React.Component {\r\n    onBorderTypeChange = e => {\r\n        this.props.changeBorderType(e);\r\n        if (e.target.value === \"double\" && this.props.borderThickness === \"2\") {\r\n            this.props.changeBorderThickness(null, \"3\");\r\n        } else if (e.target.value !== \"double\" && this.props.borderThickness === \"3\") {\r\n            this.props.changeBorderThickness(null, \"2\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            previewProps,\r\n            formState,\r\n            borderLeft, changeBorderLeft, \r\n            borderRight, changeBorderRight,\r\n            borderTop, changeBorderTop, \r\n            borderBottom, changeBorderBottom, \r\n            borderColor, changeBorderColor,\r\n            borderThickness, changeBorderThickness,\r\n            borderType,\r\n         } = this.props;\r\n\r\n        const previewStyle = generateBorderPreviewStyle(formState)\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div>\r\n                    <div className=\"directionControlsContainer\">\r\n                        <div className=\"directionsControls\" style={previewStyle}>\r\n                            <span className=\"directionLabel\">Left</span>\r\n                            <div className=\"centralColumn\">\r\n                                <span className=\"directionLabel\">Top</span>\r\n                                <div className=\"checkboxesKit crossGrid\">\r\n                                    <div id=\"r1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderTop}  \r\n                                            onChange={changeBorderTop}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderLeft}  \r\n                                            onChange={changeBorderLeft}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c2\" className=\"gridCell\">\r\n                                    </div>\r\n                                    <div id=\"r2c3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderRight}  \r\n                                            onChange={changeBorderRight}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderBottom}  \r\n                                            onChange={changeBorderBottom}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"directionLabel\">Bottom</span>\r\n                            </div>\r\n                            <span className=\"directionLabel\">Right</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <span>Frame color</span>\r\n                        <ColorField \r\n                            colorCode={borderColor} \r\n                            changeColorCode={changeBorderColor}\r\n                            defaultColorCode={DEFAULT_BORDER_COLOR}\r\n                            required\r\n                        />\r\n        \r\n                        <span>Frame thickness</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                                value={borderThickness}\r\n                                onChange={changeBorderThickness}\r\n                                onClick={selectAllOnClick(DEFAULT_BORDER_THICKNESS)}\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>                        \r\n        \r\n                        <span>Type of frame</span>\r\n                        <div >\r\n                            <Select\r\n                            input={<FrameTypeInput />}\r\n                            value={borderType}\r\n                            onChange={this.onBorderTypeChange}\r\n                            >\r\n                                <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                                <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                                <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                                <MenuItem value=\"double\">══════</MenuItem>              \r\n                            </Select>\r\n                        </div>\r\n\r\n                        <ConnectToPreviousField />\r\n                    </div>\r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        borderLeft: form.borderLeft,\r\n        borderRight: form.borderRight,\r\n        borderTop: form.borderTop,\r\n        borderBottom: form.borderBottom,\r\n        borderColor: form.borderColor,\r\n        borderThickness: form.borderThickness,\r\n        borderType: form.borderType,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeBorderLeft: toggleValue(dispatch)(\"borderLeft\"),\r\n        changeBorderRight: toggleValue(dispatch)(\"borderRight\"),\r\n        changeBorderTop: toggleValue(dispatch)(\"borderTop\"),\r\n        changeBorderBottom: toggleValue(dispatch)(\"borderBottom\"),\r\n        changeBorderColor: setColor(dispatch)(\"borderColor\"),\r\n        changeBorderThickness: setNumber(dispatch)(\"borderThickness\"),\r\n        changeBorderType: setValue(dispatch)(\"borderType\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FramesSection));","import FramesSection from \"./FramesSection\";\r\nexport default FramesSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Preview from \"../common/Preview\";\r\nimport ColorField from \"../common/ColorField\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\nimport { setColor } from \"../actions\";\r\n\r\nconst  FillingSection = ({ previewProps, fillingColor, changeFillingColor }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n                <ConnectToPreviousField />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        fillingColor: form.fillingColor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeFillingColor: setColor(dispatch)(\"fillingColor\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FillingSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport { setValue } from \"../actions\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        tocIndentation: form.tocIndentation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeTocIndentation: setValue(dispatch)(\"tocIndentation\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TocSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { setShortCut } from \"../actions\";\r\n\r\nconst ShortCutSection = ({ shortCutWinView, shortCutMacView, changeShortCutWin, changeShortCutMac }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        shortCutWinView: form.shortCutWinView,\r\n        shortCutMacView: form.shortCutMacView,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeShortCutWin: setShortCut(dispatch)(\"shortCutWin\", \"shortCutWinView\"),\r\n        changeShortCutMac: setShortCut(dispatch)(\"shortCutMac\", \"shortCutMacView\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ShortCutSection));","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomErrorTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n      textDecoration: \"red underline\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n        textDecoration: \"indianred underline\",\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomErrorTab;","import Tabs from \"@material-ui/core/Tabs\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n    }\r\n};\r\n\r\nexport default withStyles(styles)(Tabs);","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        \"&:after\": {\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: \"1280px\",\r\n        maxHeight: \"850px\",\r\n        minHeight: \"550px\",\r\n        width: \"calc(100% - 96px)\",\r\n        height: \"calc(100% - 96px)\",\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        border: \"none\",\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: \"middle\",\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","export const SAVE_DEC_FORM = \"SAVE_DEC_FORM\";\r\nexport const CLEAR_SAVED_DEC_FORM = \"CLEAR_SAVED_DEC_FORM\";\r\n\r\nexport const saveDecoratorForm = payload => {\r\n    return {\r\n        type: SAVE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearSavedDecoratorForm = () => {\r\n    return {\r\n        type: CLEAR_SAVED_DEC_FORM,\r\n    };\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport NamesSection from \"./sections/NamesSection\";\r\nimport PositioningSection from \"./sections/PositioningSection\";\r\nimport ListSection from \"./sections/ListSection\";\r\nimport ReferencingSection from \"./sections/ReferencingSection\";\r\nimport TypographySection from \"./sections/TypographySection\";\r\nimport DistancesSection from \"./sections/DistancesSection\";\r\nimport FramesSection from \"./sections/FramesSection\";\r\nimport FillingSection from \"./sections/FillingSection\";\r\nimport TocSection from \"./sections/TocSection\";\r\nimport ShortCutsSection from \"./sections/ShortCutsSection\";\r\n// import TestSection from \"./sections/TestSection\";\r\n\r\nimport theme from \"./theme\";\r\nimport CustomTab from \"./common/CustomTab\";\r\nimport CustomErrorTab from \"./common/CustomErrorTab\";\r\nimport CustomTabs from \"./common/CustomTabs\";\r\nimport CustomDialog from \"./common/CustomDialog\";\r\nimport { saveDecoratorForm } from \"../../actions\";\r\nimport { \r\n    closeDialog, \r\n    clearDecoratorForm, \r\n    switchDecDialogTab, \r\n    updateValidationError \r\n} from \"./actions\";\r\nimport { \r\n    fillMissedFields, \r\n    DecDataParser, \r\n    getTabsErrorState,\r\n    getTabNumberToSwitch,\r\n} from \"./helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass DecoratorDialog extends React.Component {\r\n    onClose = () => {\r\n        this.props.closeDialog();\r\n        this.props.clearForm();\r\n    };\r\n\r\n    onSaveButtonClick = () => {\r\n        const { formState, updateValidationError, switchTab, sendForm } = this.props;\r\n        const tabsErrorState = getTabsErrorState(formState);\r\n        if (tabsErrorState) {\r\n            updateValidationError(tabsErrorState);\r\n            switchTab(getTabNumberToSwitch(tabsErrorState));\r\n        } else {\r\n            const formToSend = DecDataParser.parseToSend(fillMissedFields(formState));\r\n            sendForm(formToSend);\r\n            this.onClose();\r\n        }\r\n    };\r\n\r\n    onTabSwitch = (e, tabNumber) => {\r\n        this.props.switchTab(tabNumber);\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            isOpen, \r\n            openedTab,\r\n            validationError, \r\n            isEditMode,\r\n        } = this.props;\r\n    \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <CustomDialog\r\n                    open={isOpen}\r\n                    onClose={this.onClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                    scroll=\"body\"\r\n                    className=\"decoratorDialog\"\r\n                    fullWidth={true}\r\n                    maxWidth={false}\r\n                    id=\"dialog\"\r\n                >\r\n                    <div className=\"header\">\r\n                        <DialogTitle className=\"header-title\">\r\n                            <p>Create new paragraph decorator</p>\r\n                        </DialogTitle>\r\n                        <div className=\"header-buttons\">\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                onClick={this.onClose}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.onSaveButtonClick}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                {isEditMode ? \"Save\" : \"Create\"}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <DialogContent className=\"content\">\r\n                        <div className=\"content-leftSide\">\r\n                            <CustomTabs \r\n                                className=\"dialogTabs\"\r\n                                value={openedTab} \r\n                                onChange={this.onTabSwitch} \r\n                                orientation=\"vertical\"\r\n                                color=\"primary\"\r\n                                indicatorColor=\"primary\"\r\n                            >\r\n                                { validationError.namesSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"Decorator's name\" /> )\r\n                                    :  ( <CustomTab className=\"dialogTab\" label=\"Decorator's name\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n    \r\n                                { validationError.listSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"List\" /> ) \r\n                                    : ( <CustomTab className=\"dialogTab\" label=\"List\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                                {/* <CustomTab className=\"dialogTab\" label=\"Test\" /> */}\r\n                            </CustomTabs>\r\n                        </div>\r\n                        <div className=\"content-rightSide\">\r\n                            { openedTab === 0 && <NamesSection /> }\r\n                            { openedTab === 1 && <PositioningSection /> }\r\n                            { openedTab === 2 && <ListSection /> }\r\n                            { openedTab === 3 && <ReferencingSection /> }\r\n                            { openedTab === 4 && <TypographySection /> }\r\n                            { openedTab === 5 && <DistancesSection /> }\r\n                            { openedTab === 6 && <FramesSection /> }\r\n                            { openedTab === 7 && <FillingSection /> }\r\n                            { openedTab === 8 && <TocSection /> }\r\n                            { openedTab === 9 && <ShortCutsSection /> }\r\n                            {/* openedTab === 10 && <TestSection /> */}\r\n                        </div>\r\n                    </DialogContent>\r\n                </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, isOpen, openedTab, validationError, isEditMode }}) => {\r\n    return { \r\n        formState: form,\r\n        isOpen,\r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        closeDialog: closeDialog(dispatch),\r\n        clearForm: () => dispatch(clearDecoratorForm()),\r\n        switchTab: payload => dispatch(switchDecDialogTab(payload)),\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecoratorDialog);","import DecoratorDialog from \"./DecoratorDialog\";\r\nexport default DecoratorDialog;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport DecoratorDialog from \"./components/DecoratorDialog\";\nimport { openDialog } from \"./components/DecoratorDialog/actions\";\nimport { clearSavedDecoratorForm,  saveDecoratorForm } from \"./actions\";\nimport { DecDataParser } from \"./components/DecoratorDialog/helpers\";\nimport theme from \"./components/DecoratorDialog/theme\";\n\nimport \"./App.css\";\n\nconst App = props => {\n    const { openDialog, saveForm, clearSavedForm, savedForm } = props;\n\n    const openEditDialog = () => {\n        openDialog(DecDataParser.parseToEdit(savedForm || {}));\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"startButtons\">\n                    { !savedForm ? (\n                        <Button \n                            onClick={() => openDialog()}\n                            color=\"primary\"\n                        >Create new</Button>\n                    ) : (\n                        <>\n                            <Button \n                                onClick={() => openEditDialog()}\n                            >Edit saved</Button>\n                            <Button \n                                onClick={clearSavedForm}\n                                color=\"secondary\"\n                            >Delete saved</Button>\n                        </>\n                    )}\n                </div>\n                <DecoratorDialog sendForm={saveForm} />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = ({ savedForm }) => {\n    return { savedForm };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openDialog: openDialog(dispatch),\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\n        clearSavedForm: () => dispatch(clearSavedDecoratorForm()),\n    };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SHOW_DEC_DIALOG, HIDE_DEC_DIALOG } from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isOpenReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SHOW_DEC_DIALOG:\r\n            return true;\r\n        case HIDE_DEC_DIALOG:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isOpenReducer;","import { UPDATE_DEC_FORM, CLEAR_DEC_FORM } from \"../../components/DecoratorDialog/actions\";\r\nimport { sampleText, initialFormState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst initialState = { \r\n    previewText: sampleText,\r\n    ...initialFormState,\r\n};\r\n\r\nconst decoratorFormReducer = (state = initialState, action) =>  {\r\n    switch (action.type) {\r\n        case UPDATE_DEC_FORM:\r\n            return { ...state, ...action.payload };\r\n        case CLEAR_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default decoratorFormReducer;","import { \r\n    UPDATE_VALIDATION_ERROR, \r\n    REMOVE_VALIDATION_ERROR, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nimport { tabsErrorInitialState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst validationErrorReducer = (state = tabsErrorInitialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_VALIDATION_ERROR:\r\n            return { ...state, ...action.payload };\r\n        case REMOVE_VALIDATION_ERROR:\r\n            return tabsErrorInitialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default validationErrorReducer;","import { \r\n    SWITCH_ON_DEC_DIALOG_EDIT_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_EDIT_MODE, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isEditModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_EDIT_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_EDIT_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isEditModeReducer;","import { \r\n    SWITCH_DEC_DIALOG_TAB,\r\n    RESET_DEC_DIALOG_TAB, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst initialState = 0;\r\n\r\nconst openedTabReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_DEC_DIALOG_TAB:\r\n            return action.payload;\r\n        case RESET_DEC_DIALOG_TAB:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default openedTabReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport isOpenReducer from \"./isOpenReducer\";\r\nimport decoratorFormReducer from \"./decoratorFormReducer\";\r\nimport validationErrorReducer from \"./validationErrorReducer\";\r\nimport isEditModeReducer from \"./isEditModeReducer\";\r\nimport openedTabReducer from \"./openedTabReducer\";\r\n\r\nconst decoratorDialogReducer = combineReducers({\r\n    isOpen: isOpenReducer,\r\n    openedTab: openedTabReducer,\r\n    validationError: validationErrorReducer,\r\n    isEditMode: isEditModeReducer,\r\n    form: decoratorFormReducer,\r\n});\r\n\r\nexport default decoratorDialogReducer;","import { SAVE_DEC_FORM, CLEAR_SAVED_DEC_FORM } from \"../actions\";\r\n\r\nconst initialState = null;\r\n\r\nexport const savedFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_DEC_FORM:\r\n            return action.payload;\r\n        case CLEAR_SAVED_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedFormReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport decoratorDialogReducer from \"./decoratorDialogReducer\";\r\nimport savedFormReducer from \"./savedFormReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    decoratorDialog: decoratorDialogReducer,\r\n    savedForm: savedFormReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}