{"version":3,"sources":["components/common/CustomInput.js","components/common/NewGroupDialog.js","components/common/withNewGroupControl.js","components/NewDecDialog/sections/NamesSection.js","components/NewDecDialog/sections/WordExportSection.js","components/common/CustomInputShort.js","constants.js","components/NewDecDialog/sections/PositioningSection/index.js","components/NewDecDialog/sections/PositioningSection/PositioningSection.js","components/common/Preview/ListPreview.js","utils/utils.js","components/NewDecDialog/sections/ListSection.js","components/NewDecDialog/sections/ReferencingSection.js","components/common/ContentEditable.js","components/common/Preview/Preview.js","components/common/Preview/index.js","components/common/ColorField/index.js","components/common/ColorField/ColorField.js","components/NewDecDialog/sections/TypographySection/index.js","components/NewDecDialog/sections/TypographySection/TypographySection.js","components/NewDecDialog/sections/DistancesSection.js","components/NewDecDialog/sections/FramesSection/FrameTypeInput.js","components/NewDecDialog/sections/FramesSection/index.js","components/NewDecDialog/sections/FramesSection/FramesSection.js","components/NewDecDialog/sections/FillingSection.js","components/NewDecDialog/sections/TocSection.js","components/NewDecDialog/sections/ShortCutsSection.js","components/NewDecDialog/sections/TestSection.js","theme.js","components/common/CustomTab.js","components/common/CustomTabs.js","components/common/CustomDialog.js","utils/getShortCutUtils.js","components/NewDecDialog/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","NewGroupDialog","state","props","currentGroup","groupType","nameEN","nameDE","nameRU","nameFR","groupKey","onInputChange","inputName","e","setState","target","value","onClose","hideDialog","onGroupSave","onSave","changeGroupSelect","trim","length","groupToSave","this","isOpen","isEditMode","titleText","buttonText","Dialog","className","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","variant","margin","onChange","DialogActions","Button","onClick","color","React","Component","withNewGroupControl","ViewComponent","groupSelect","newGroup","handleClick","newValue","decKey","changeDecKey","group","changeGroup","active","changeActive","styleNameEn","changeStyleNameEn","styleNameDe","changeStyleNameDe","styleNameRu","changeStyleNameRu","styleNameFr","changeStyleNameFr","changeGroupToCreate","newGroupName","onGroupChange","args","NativeSelect","Checkbox","checked","WordExportSection","wordStyleName","changeWordStyleName","softReturn","changeSoftReturn","CustomInputShort","listStyleType","name","backSpaceActions","key","returnOnEmptySectionActions","decoratorsList","alignmentsMap","center","left","right","justify","numberingSets","decimal","bulletNamesMap","bulletpoint","dash","star","PositioningSection","id","map","action","dec","ListPreview","listPreviewStyle","listChars","prefix","suffix","suffixDistance","sideNumberStyle","listItemsBeginnings","listChar","listItemBeginingStyle","marginRight","style","getCorrectColor","hex","correctColor","selectAllOnClick","defaultValue","focus","select","getOffset","alignType","parseFloat","slice","scrollToBottom","setTimeout","document","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","getListChars","isOrderedList","numberingStyle","listItem","unicodeChar","newBullet","Array","fill","ListSection","listPreviewProps","isList","changeIsList","listType","changeListType","listName","changeListName","changePrefix","changeSuffix","orderLevel","changeOrderLevel","changeSuffixDistance","magicTabs","changeMagicTabs","changeListItem","unicodeNumber","changeUnicodeNumber","changeUnicodeChar","changeNumberingStyle","continueNumbering","changeContinueNumbering","allowRestartNumbering","changeAllowRestartNumbering","includePreviousFrom","changencludePreviousFrom","sideNumber","changeSideNumber","sideNumberFont","changeSideNumberFont","sideNumberAlignment","changeSideNumberAlignment","sideNumberFontSize","changeSideNumberFontSize","sideNumberFontColor","changeSideNumberFontColor","sideNumberFillingColor","changeSideNumberFillingColor","sideNumberWidth","changeSideNumberWidth","sideNumberRadius","changeSideNumberRadius","fontColorSampleStyle","fillingColorSampleStyle","InputAdornment","InputProps","startAdornment","Object","entries","referenceGroup","changeReferenceGroup","changeXrefToCreate","onXrefChange","xref","__rest","s","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","q","propertyIsEnumerable","normalizeHtml","str","replace","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","children","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","current","getEl","emitChange","originalEvt","innerHTML","evt","assign","_a","tagName","ref","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","previewText","changePreviewText","previewStyle","verticalAlign","editableContentStyle","outline","marginBottom","selectAllChildren","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","required","colorError","inputError","pickerColor","colorSampleStyle","error","onChangeComplete","disableAlpha","TypographySection","previewProps","changeFontSize","fontColor","changeFontColor","fontColorName","changeFontColorName","font","changeFont","alignment","changeAlignment","bold","changeBold","italic","changeItalic","underlined","changeUnderlined","stroke","changeStroke","changeVerticalAlign","textTransform","changeTextTransform","FormControlLabel","control","label","labelPlacement","RadioGroup","row","Radio","DistancesSection","firstRowIndent","otherRowsIndent","lineSpacing","changeFirstRowIndent","changeOtherRowsIndent","changeLineSpacing","changeMarginTop","changeMarginBottom","wordSpacing","changeWordSpacing","customLineSpacing","changeCustomLineSpacing","FrameTypeInput","width","FramesSection","leftBorder","rightBorder","topBorder","bottomBorder","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColor","borderThickness","changeBorderThickness","borderType","changeBorderType","borderColorName","changeBorderColorName","previewBorderWidth","isNaN","borderLeft","marginLeft","borderRight","borderTop","borderBottom","Select","MenuItem","FillingSection","fillingColor","changeFillingColor","fillingColorName","changeFillingColorName","connectToPrevious","changeConnectToPrevious","TocSection","tocIndentation","changeTocIndentation","ShortCutSection","shortCutWinView","changeShortCutWin","shortCutMacView","changeShortCutMac","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomTabs","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","container","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","getShortCutUtils","systemName","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","isCmdPressed","stringValue","keys","CMD_KEYS","forEach","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","item_type","isEqual","keyboard_shortcut","childItems","child_items","itemKey","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","NewDecDialog","openedTab","bulletField","groupToCreate","xrefToCreate","shortCutWin","shortCutMac","toggleStateProperty","propName","setStateProperty","secondArg","undefined","setBullet","setColor","filteredInput","match","setNumber","setShortCut","valuePropName","viewPropName","isMac","convertEventToShortCut","changeOpenedTab","previewFontColor","previewFillingColor","previewAdditionalFillingColor","indentsDifference","previewMarginLeft","previewTextIndent","alignItems","textAlign","fontWeight","fontStyle","textDecoration","fontVariant","backgroundImage","textIndent","lineHeight","styledText","unstyledText","getUnstyledText","previewSideNumberFontColor","previewSideNumberFillingColor","namesSectionProps","wordExportProps","listSectionProps","newUnicodeNumber","newUnicodeChar","String","fromCharCode","parseInt","unicodeNumberToChar","charCodeAt","toString","unicodeCharToNumber","referencingSectionProps","typographySectionProps","distancesSectionProps","framesSectionProps","fillingSectionProps","tocSectionProps","shortCutsSectionProps","ThemeProvider","aria-labelledby","scroll","orientation","indicatorColor","ShortCutsSection","TestSection","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5a935dd.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: '183px',\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass NewGroupDialog extends React.Component {\r\n\r\n    state = this.props.currentGroup \r\n          ? this.props.currentGroup \r\n          : this.props.groupType !== \"xref\" \r\n          ? { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\" }\r\n          : { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\", groupKey: \"\" };\r\n    \r\n    onInputChange = inputName => e => {\r\n        this.setState({ \r\n            [inputName]: e.target.value \r\n        });\r\n    };\r\n\r\n    onClose = () => {\r\n        const {currentGroup, hideDialog } = this.props;\r\n        this.setState({ ...currentGroup });\r\n        hideDialog()\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        const { onSave, changeGroupSelect, hideDialog, groupType } = this.props;\r\n        if (this.state.nameEN.trim().length && (groupType !== \"xref\" || this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                nameEN: this.state.nameEN.trim(),\r\n                nameDE: this.state.nameDE.trim(),\r\n                nameRU: this.state.nameRU.trim(),\r\n                nameFR: this.state.nameFR.trim(),\r\n            };\r\n            if (groupType === \"xref\") {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            onSave(groupToSave);\r\n            changeGroupSelect(groupToSave)(null, this.state.nameEN.trim());\r\n            hideDialog();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode } = this.props;\r\n        const { onInputChange, onGroupSave, onClose } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${this.props.groupType === \"xref\" ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n        return (\r\n            <Dialog\r\n                className=\"paragraphDecorators-dialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        {\r\n                            this.props.groupType === \"xref\" \r\n                            &&\r\n                            <>\r\n                                <span>Group Key</span>\r\n                                <TextField \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    value={this.state.groupKey}\r\n                                />\r\n                            </>\r\n                        }\r\n                        <span>Name EN</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameEN\")}\r\n                            value={this.state.nameEN}\r\n                        />\r\n                        <span>Name DE</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameDE\")} \r\n                            value={this.state.nameDE}\r\n                        />                        \r\n                        <span>Name RU</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameRU\")} \r\n                            value={this.state.nameRU}\r\n                        />                        \r\n                        <span>Name FR</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameFR\")} \r\n                            value={this.state.nameFR}\r\n                        />                    \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isOpen: false,\r\n            groupSelect: \"\",\r\n            newGroup: this.props.newGroup || \"\",\r\n        }\r\n        \r\n        handleClick = () => {\r\n            this.setState(({ isOpen }) => {\r\n                return {\r\n                    isOpen: !isOpen\r\n                };\r\n            });\r\n        }\r\n    \r\n        onSave = newGroup => {\r\n            this.setState({ newGroup });\r\n        }\r\n    \r\n        changeGroupSelect = (newValue) => {\r\n            this.setState({\r\n                groupSelect: newValue,\r\n            });\r\n        }\r\n\r\n        hideDialog = () => {\r\n            this.setState({ isOpen: false });\r\n        }\r\n        \r\n        render() {\r\n            const { handleClick, onSave, changeGroupSelect, hideDialog } = this; \r\n            return ( <ViewComponent {...this.props} {...this.state} {...{ handleClick, onSave, changeGroupSelect, hideDialog }} /> );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"components/common/CustomInput\";\r\nimport NewGroupDialog from \"components/common/NewGroupDialog\";\r\nimport withNewGroupControl from \"components/common/withNewGroupControl\";\r\n\r\nconst NamesSection = (props) => {\r\n    const { \r\n        newGroup, \r\n        isOpen, \r\n        hideDialog, \r\n        handleClick, \r\n        onSave, \r\n        decKey, changeDecKey,\r\n        group, changeGroup,\r\n        active, changeActive,\r\n        styleNameEn, changeStyleNameEn,\r\n        styleNameDe, changeStyleNameDe,\r\n        styleNameRu, changeStyleNameRu,\r\n        styleNameFr, changeStyleNameFr,\r\n        changeGroupToCreate,\r\n    } = props;\r\n    \r\n    const newGroupName = newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n\r\n    const onGroupChange = group => (...args) => {\r\n        const value = args[0] ? args[0].target.value : args[1];\r\n        if (group.nameEN && value === group.nameEN) {\r\n            changeGroupToCreate(null, group);\r\n        } else {\r\n            changeGroupToCreate(null, \"\");\r\n        }\r\n        changeGroup(...args);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Key</span>\r\n            <TextField \r\n                value={decKey}\r\n                onChange={changeDecKey}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    value={group} \r\n                    onChange={onGroupChange(newGroup)}\r\n                    input={ <CustomInput /> }  \r\n                >\r\n                    <option value=\"\">...</option>\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"0\">Text</option>\r\n                    <option value=\"1\">Heading</option>\r\n                    <option value=\"2\">Heading Heading Heading Heading</option>\r\n                </NativeSelect>\r\n                { !(isEditMode && group !== newGroupName) && (\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                ) }\r\n            </div>\r\n\r\n            <span>Active</span>\r\n            <div>\r\n                <Checkbox\r\n                    checked={active}\r\n                    onChange={changeActive} \r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n\r\n            <span>Style name (English)</span>\r\n            <TextField \r\n                value={styleNameEn}\r\n                onChange={changeStyleNameEn}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Style name (German)</span>\r\n            <TextField \r\n                value={styleNameDe}\r\n                onChange={changeStyleNameDe}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Style name (Russian)</span>\r\n            <TextField \r\n                value={styleNameRu}\r\n                onChange={changeStyleNameRu}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Style name (French)</span>\r\n            <TextField \r\n                value={styleNameFr}\r\n                onChange={changeStyleNameFr}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={onGroupChange}\r\n                groupType=\"decorators\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(NamesSection);","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst WordExportSection = ({ wordStyleName, changeWordStyleName, softReturn, changeSoftReturn }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Style name in WORD</span>\r\n            <TextField \r\n                value={wordStyleName}\r\n                onChange={changeWordStyleName}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n            \r\n            <span>Soft return</span>\r\n            <div>\r\n                <Checkbox \r\n                    checked={softReturn}\r\n                    onChange={changeSoftReturn}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","export const listStyleType = [\r\n  {\r\n    name: '1, 2, 3',\r\n    value: 'decimal',\r\n  },\r\n  {\r\n    name: 'A, B, C',\r\n    value: 'upper-alpha',\r\n  },\r\n  {\r\n    name: 'a, b, c',\r\n    value: 'lower-alpha',\r\n  },\r\n  {\r\n    name: 'I, II, III',\r\n    value: 'upper-roman',\r\n  },\r\n  {\r\n    name: 'i, ii, iii',\r\n    value: 'lower-roman',\r\n  },\r\n];\r\n\r\nexport const backSpaceActions = [\r\n  { key: 'merge', value: 'Merge' },\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'remove_pd', value: 'Remove PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const returnOnEmptySectionActions = [\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'create_new_section', value: 'Create new section' },\r\n  { key: 'apply_default_pd', value: 'Apply default PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const decoratorsList = [\r\n    { name: \"...\", value: null },\r\n    { name: \"Text 0\", value: \"quick_text_0\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n];\r\n\r\nexport const alignmentsMap = {\r\n  center: \"center\",\r\n  left: \"flex-start\",\r\n  right: \"flex-end\",\r\n  justify: \"flex-start\",\r\n};\r\n\r\nexport const numberingSets = {\r\n  decimal: [\"1\", \"2\", \"3\", \"4\"],\r\n  \"upper-alpha\": [\"A\", \"B\", \"C\", \"D\"],\r\n  \"lower-alpha\": [\"a\", \"b\", \"c\", \"d\"],\r\n  \"upper-roman\": [\"I\", \"II\", \"III\", \"IV\"],\r\n  \"lower-roman\": [\"i\", \"ii\", \"iii\", \"iv\"],\r\n};\r\n\r\nexport const bulletNamesMap = {\r\n  bulletpoint: \"•\",\r\n  dash: \"—\",\r\n  star: \"★\",\r\n};","import PositioningSection from \"./PositioningSection.js\";\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport CustomInput from 'components/common/CustomInput';\r\nimport CustomInputShort from 'components/common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from 'constants.js'\r\n\r\nimport './style.css';\r\n\r\nconst PositioningSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <NativeSelect id=\"r1c2\" input={ <CustomInputShort /> }>\r\n                <option value={null}>...</option>\r\n                <option value=\"0\">0</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </NativeSelect>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <NativeSelect id=\"r3c2\" input={ <CustomInput /> }>\r\n                {backSpaceActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n            <span id=\"r4c1\">At the beginning of a section WITHOUT content</span>\r\n            <NativeSelect id=\"r4c2\" input={ <CustomInput /> }>\r\n                {returnOnEmptySectionActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n\r\n            <div id=\"r5\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n            <span id=\"r6c1\">Style of next section</span>\r\n            <NativeSelect id=\"r6c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r7c1\">In empty section change current style to</span>\r\n            <NativeSelect  id=\"r7c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n\r\n            <div id=\"r8\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n            <span id=\"r9c1\">TAB – change current style to</span>\r\n            <NativeSelect  id=\"r9c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r10c1\">SHIFT+TAB – change current style to</span>\r\n            <NativeSelect  id=\"r10c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PositioningSection;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = (props) => {\r\n    const { \r\n        listPreviewStyle, \r\n        listChars, \r\n        prefix, \r\n        suffix, \r\n        suffixDistance, \r\n        sideNumberStyle,\r\n    } = props;\r\n\r\n    const demonstrationElementClassName = \"demonstrationElement\";\r\n    const listItemsBeginnings = listChars.map(listChar => {\r\n        return (`${prefix}${listChar}${suffix}`);\r\n    });\r\n    const listItemBeginingStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className={demonstrationElementClassName}>\r\n                    <div\r\n                        className={`${demonstrationElementClassName}-text`}\r\n                        style={listPreviewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[3]}`}</span><span>The fourth list item</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListPreview;","import { numberingSets, bulletNamesMap } from \"constants.js\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = ({ isOrderedList, numberingStyle, listItem, unicodeChar }) => {\r\n    if (isOrderedList) {\r\n        return numberingSets[numberingStyle];\r\n    }\r\n    const newBullet = bulletNamesMap[listItem] || unicodeChar;\r\n    return Array(4).fill(newBullet);\r\n};\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport ListPreview from \"components/common/Preview/ListPreview\";\r\nimport CustomInput from \"components/common/CustomInput\";\r\nimport CustomInputShort from \"components/common/CustomInputShort\";\r\nimport { listStyleType, bulletNamesMap } from \"constants.js\"\r\nimport { getCorrectColor, selectAllOnClick, scrollToBottom } from \"utils\";\r\n\r\nconst ListSection = (props) => {\r\n    const {\r\n        listPreviewProps,\r\n        isList, changeIsList, \r\n        listType, changeListType, \r\n        listName, changeListName,\r\n        prefix, changePrefix,\r\n        suffix, changeSuffix,\r\n        orderLevel, changeOrderLevel,\r\n        suffixDistance, changeSuffixDistance,\r\n        magicTabs, changeMagicTabs,\r\n        listItem, changeListItem,\r\n        unicodeNumber, changeUnicodeNumber,\r\n        unicodeChar, changeUnicodeChar,\r\n        numberingStyle, changeNumberingStyle,\r\n        continueNumbering, changeContinueNumbering,\r\n        allowRestartNumbering, changeAllowRestartNumbering,\r\n        includePreviousFrom, changencludePreviousFrom,\r\n        sideNumber, changeSideNumber,\r\n        sideNumberFont, changeSideNumberFont,\r\n        sideNumberAlignment, changeSideNumberAlignment,\r\n        sideNumberFontSize, changeSideNumberFontSize,\r\n        sideNumberFontColor, changeSideNumberFontColor,\r\n        sideNumberFillingColor, changeSideNumberFillingColor,\r\n        sideNumberWidth, changeSideNumberWidth,\r\n        sideNumberRadius, changeSideNumberRadius,\r\n    } = props;\r\n\r\n    const onListTypeChange = (...args) => {\r\n        changeListType(...args);\r\n        scrollToBottom(\"content-rightSide\");\r\n    };\r\n\r\n    const onSideNumberChange = (...args) => {\r\n        changeSideNumber(...args);\r\n        scrollToBottom(\"content-rightSide\");\r\n    };\r\n\r\n    const fontColorSampleStyle = {\r\n        backgroundColor: `#${getCorrectColor(sideNumberFontColor)}`,\r\n    };\r\n\r\n    const fillingColorSampleStyle = {\r\n        backgroundColor: `#${getCorrectColor(sideNumberFillingColor)}`,\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                    <div className=\"listSection-firstSpan\">\r\n                        <span>Is it a list?</span>\r\n                    </div>\r\n                    <div>\r\n                        <Checkbox \r\n                            color=\"primary\" \r\n                            checked={isList} \r\n                            onChange={changeIsList} \r\n                        />\r\n                    </div>\r\n                    { isList && (\r\n                        <>\r\n                            <span>List name</span>\r\n                            <TextField\r\n                                value={listName}\r\n                                onChange={changeListName} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                            />\r\n\r\n                            <span>Order level</span>\r\n                            <div>\r\n                                <NativeSelect\r\n                                    value={orderLevel}\r\n                                    onChange={changeOrderLevel}\r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    <option value=\"\">...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n\r\n                            <span>Prefix</span>\r\n                            <TextField\r\n                                value={prefix}\r\n                                onChange={changePrefix} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                            />\r\n\r\n                            <span>Suffix</span>\r\n                            <TextField\r\n                                value={suffix}\r\n                                onChange={changeSuffix} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                onClick={selectAllOnClick(\".\")}\r\n                            />\r\n\r\n                            <span>Suffix distance</span>\r\n                            <div className=\"inputWithAdornment\">\r\n                                <NativeSelect\r\n                                    value={suffixDistance}\r\n                                    onChange={changeSuffixDistance} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    <option value=\"0.25\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </div>\r\n\r\n                            <span>Magic Tabs</span>\r\n                            <div>\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={magicTabs} \r\n                                    onChange={changeMagicTabs} \r\n                                />\r\n                            </div>\r\n\r\n                            <span>Type of list</span>\r\n                            <div>\r\n                                <NativeSelect \r\n                                    value={listType} \r\n                                    onChange={onListTypeChange} \r\n                                    input={ <CustomInput /> }\r\n                                >\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </>\r\n                    ) }\r\n                </div>\r\n                    { isList && listType === \"ordered\" && (\r\n                        <div className=\"listSection-typeSettings\">\r\n                            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {listStyleType.map(style => (\r\n                                          <option value={style.value} key={style.value}>{style.name}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div>\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div>\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changencludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Side number</span>\r\n                                <div>\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={onSideNumberChange}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                            </div> \r\n\r\n                            { sideNumber && (\r\n                                <div className=\"dialogGrid dialogGrid_2minCols listSection-typeSettings\">\r\n                                    <span>Font</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberFont}\r\n                                        onChange={changeSideNumberFont}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"Roboto, slab-serif\"}>Roboto</option>\r\n                                        <option value={\"'Source Serif Pro', serif\"}>Source Serif</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(\"12\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <div className=\"colorField\">\r\n                                        <TextField \r\n                                            value={sideNumberFontColor}\r\n                                            onChange={changeSideNumberFontColor}\r\n                                            onClick={selectAllOnClick(\"FFF\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                        <div className=\"colorSample\" style={fontColorSampleStyle}></div>\r\n                                    </div>\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <div className=\"colorField\">\r\n                                        <TextField \r\n                                            value={sideNumberFillingColor}\r\n                                            onChange={changeSideNumberFillingColor}\r\n                                            onClick={selectAllOnClick(\"1E88E5\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                        <div className=\"colorSample\" style={fillingColorSampleStyle}></div>\r\n                                    </div>\r\n                                        \r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(\"20\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>    \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(\"10\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>    \r\n                                </div> \r\n                            ) }\r\n                        </div>\r\n                    ) }\r\n                </div>\r\n                { isList && <div className=\"listPreviewBox\"><ListPreview {...listPreviewProps} /></div> }\r\n            </div>\r\n            { isList && listType === \"unordered\" && (\r\n                <div className=\"listSection-typeSettings\">\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listSection-firstSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={changeListItem} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Object.entries(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"individual\"}>Custom</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        {   listItem === \"individual\" && (\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Unicode number</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeNumber}\r\n                                            onChange={changeUnicodeNumber}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"unicodeInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Char</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeChar}\r\n                                            onChange={changeUnicodeChar}\r\n                                            onClick={selectAllOnClick()}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"bulletInput\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                        ) }\r\n                    </div> \r\n                </div> \r\n            ) }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListSection;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"components/common/CustomInput\";\r\nimport NewGroupDialog from \"components/common/NewGroupDialog\";\r\nimport withNewGroupControl from \"components/common/withNewGroupControl\";\r\n\r\nconst ReferencingSection = (props) => {\r\n    const { \r\n        newGroup, \r\n        isOpen, \r\n        hideDialog, \r\n        handleClick, \r\n        onSave,\r\n        referenceGroup, changeReferenceGroup,\r\n        changeXrefToCreate,\r\n    } = props;\r\n    \r\n    const newGroupName = newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n\r\n    const onXrefChange = xref => (...args) => {\r\n        const value = args[0] ? args[0].target.value : args[1];\r\n        if (xref.groupKey && xref.nameEN && value === xref.nameEN) {\r\n            changeXrefToCreate(null, xref);\r\n        } else {\r\n            changeXrefToCreate(null, \"\");\r\n        }\r\n        changeReferenceGroup(...args);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Reference group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={referenceGroup} \r\n                    onChange={onXrefChange(newGroup)} \r\n                >\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"\">none</option>\r\n                    <option value=\"0\">Reference group 1</option>\r\n                    <option value=\"1\">Reference group 2</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && referenceGroup !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={onXrefChange}\r\n                groupType=\"xref\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(ReferencingSection);","import * as React from 'react';\r\nimport deepEqual from 'fast-deep-equal';\r\nimport * as PropTypes from 'prop-types';\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, ' ');\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === 'function' ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== 'function' ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || 'div', Object.assign({}, props, { ref: typeof innerRef === 'function' ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport ContentEditable from \"components/common/ContentEditable\";\r\nimport { getOffset, selectAllEditableContent } from \"utils\"\r\n\r\nconst Preview = ({previewText, changePreviewText, previewStyle}) => {\r\n    const { verticalAlign, fontSize } = previewStyle;\r\n\r\n    const editableContentStyle = {\r\n        ...previewStyle, \r\n        outline: \"none\",\r\n        marginTop: `${parseFloat(previewStyle.marginTop) + getOffset(verticalAlign, fontSize)}pt`,\r\n        marginBottom: `${parseFloat(previewStyle.marginBottom) - getOffset(verticalAlign, fontSize)}pt`,\r\n    };\r\n\r\n    const demonstrationElementClassName = \"demonstrationElement\";\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div \r\n                className=\"preview-content preview-content_withPointer\" \r\n                onClick={selectAllEditableContent(demonstrationElementClassName)}\r\n            >\r\n                <div className={demonstrationElementClassName}>\r\n                    <ContentEditable\r\n                        className={`${demonstrationElementClassName}-text`}\r\n                        onChange={changePreviewText} \r\n                        html={previewText}\r\n                        style={editableContentStyle}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preview;","import Preview from \"./Preview.js\";\r\nexport default Preview;","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"utils\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.Component {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, required } = this.props;\r\n        const { showColorPicker, hideColorPicker, colorPickerHandler } = this;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        selectAllOnClick(\"000\")(e); \r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className=\"colorPicker-outerBox\">\r\n                        <div className=\"colorPicker-innerBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport { selectAllOnClick } from \"utils\";\r\nimport Preview from \"components/common/Preview\";\r\nimport CustomInput from \"components/common/CustomInput\";\r\nimport ColorField from \"components/common/ColorField\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = (props) => {\r\n    const { previewProps, fontSize, changeFontSize, fontColor, changeFontColor, fontColorName,\r\n        changeFontColorName,\r\n        font, \r\n        changeFont,\r\n        alignment, changeAlignment,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,\r\n        stroke, changeStroke, \r\n        verticalAlign, changeVerticalAlign,\r\n        textTransform, changeTextTransform} = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeFont}\r\n                >\r\n                    <option value={\"Roboto, slab-serif\"}>Roboto</option>\r\n                    <option value={\"'Source Serif Pro', serif\"}>Source Serif</option>\r\n                </NativeSelect>\r\n\r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(\"12\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                    value={fontColorName}\r\n                    onChange={changeFontColorName}\r\n                    onClick={selectAllOnClick(\"Black\")}\r\n                />\r\n\r\n                <span>Font color HEX</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    required\r\n                />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_indented\">\r\n            <span>Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox labeledCheckbox_topIndented\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Sub/Superscript</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={verticalAlign} \r\n                    onChange={changeVerticalAlign} \r\n                >\r\n                    <option value=\"baseline\">None</option>\r\n                    <option value=\"sub\">Subscript</option>\r\n                    <option value=\"super\">Superscript</option>\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TypographySection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { selectAllOnClick } from \"utils\";\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport Preview from \"components/common/Preview\";\r\n\r\nconst DistancesSection = (props) => {\r\n    const {\r\n        previewProps,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        changeFirstRowIndent,\r\n        changeOtherRowsIndent,\r\n        changeLineSpacing,\r\n        marginTop, changeMarginTop,\r\n        marginBottom, changeMarginBottom,\r\n        wordSpacing, changeWordSpacing,\r\n        customLineSpacing, changeCustomLineSpacing,\r\n    } = props;\r\n    \r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Margin top</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginTop}\r\n                        onChange={changeMarginTop}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>Margin bottom</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginBottom}\r\n                        onChange={changeMarginBottom}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>1st row indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={firstRowIndent}\r\n                        onChange={changeFirstRowIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Other rows indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={otherRowsIndent}\r\n                        onChange={changeOtherRowsIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Line spacing</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInputShort /> } \r\n                        value={lineSpacing} \r\n                        onChange={changeLineSpacing} \r\n                    >\r\n                        <option value=\"1.0\">1.0</option>\r\n                        <option className=\"highlightedOption\" value=\"1.15\">1.15</option>\r\n                        <option value=\"1.5\">1.5</option>\r\n                        <option value=\"2.0\">2.0</option>\r\n                        <option value=\"2.5\">2.5</option>\r\n                        <option value=\"3.0\">3.0</option>\r\n                        <option value=\"custom\">Custom</option>\r\n                    </NativeSelect> \r\n                    {\r\n                    lineSpacing === \"custom\" && \r\n                    (\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                        />                                            \r\n                    )\r\n                }\r\n                </div>\r\n                   \r\n                    \r\n                <span>Word spacing</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={wordSpacing}\r\n                        onChange={changeWordSpacing}\r\n                        onClick={selectAllOnClick(\"0\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DistancesSection;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default FrameTypeInput;","import FramesSection from \"./FramesSection.js\";\r\nexport default FramesSection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"utils\";\r\nimport FrameTypeInput from \"components/NewDecDialog/sections/FramesSection/FrameTypeInput\";\r\nimport ColorField from \"components/common/ColorField\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst FramesSection = (props) => {\r\n    const { \r\n        leftBorder, \r\n        rightBorder, \r\n        topBorder, \r\n        bottomBorder, \r\n        changeLeftBorder,\r\n        changeRightBorder,\r\n        changeTopBorder,\r\n        changeBottomBorder,\r\n        borderColor,\r\n        changeBorderColor,\r\n        borderThickness,\r\n        changeBorderThickness,\r\n        borderType,\r\n        changeBorderType,\r\n        borderColorName,\r\n        changeBorderColorName,\r\n     } = props;\r\n\r\n     const correctColor = getCorrectColor(borderColor);\r\n     const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n     const previewStyle = {\r\n         borderLeft: leftBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginLeft: leftBorder ? \"0\" : previewBorderWidth, \r\n         borderRight: rightBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginRight: rightBorder ? \"0\" : previewBorderWidth, \r\n         borderTop: topBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginTop: topBorder ? \"0\" : previewBorderWidth, \r\n         borderBottom: bottomBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginBottom: bottomBorder ? \"0\" : previewBorderWidth, \r\n     };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"directionControlsContainer\">\r\n                <div className=\"directionsControls\" style={previewStyle}>\r\n                    <span className=\"directionLabel\">Left</span>\r\n                    <div className=\"centralColumn\">\r\n                        <span className=\"directionLabel\">Top</span>\r\n                        <div className=\"checkboxesKit crossGrid\">\r\n                            <div id=\"r1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={topBorder}  \r\n                                    onChange={changeTopBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={leftBorder}  \r\n                                    onChange={changeLeftBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c2\" className=\"gridCell\">\r\n                            </div>\r\n                            <div id=\"r2c3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={rightBorder}  \r\n                                    onChange={changeRightBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={bottomBorder}  \r\n                                    onChange={changeBottomBorder}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"directionLabel\">Bottom</span>\r\n                    </div>\r\n                    <span className=\"directionLabel\">Right</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Frame color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    value={borderColorName}\r\n                    onChange={changeBorderColorName}\r\n                    onClick={selectAllOnClick(\"Red\")}\r\n                />\r\n\r\n                <span>Frame color HEX</span>\r\n                <ColorField \r\n                    colorCode={borderColor} \r\n                    changeColorCode={changeBorderColor}\r\n                    required\r\n                />\r\n\r\n                <span>Frame thickness</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={borderThickness}\r\n                        onChange={changeBorderThickness}\r\n                        onClick={selectAllOnClick(\"2\")}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>                        \r\n\r\n                <span>Type of frame</span>\r\n                <div >\r\n                    <Select\r\n                      input={<FrameTypeInput />}\r\n                      value={borderType}\r\n                      onChange={changeBorderType}\r\n                    >\r\n                        <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                        <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                        <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                        <MenuItem value=\"double\">══════</MenuItem>              \r\n                    </Select>\r\n                </div>\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox color=\"primary\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport Preview from \"components/common/Preview\";\r\nimport ColorField from \"components/common/ColorField\";\r\n\r\nconst  FillingSection = (props) => {\r\n    const { \r\n        previewProps, \r\n        fillingColor, changeFillingColor, \r\n        fillingColorName, changeFillingColorName,\r\n        connectToPrevious, changeConnectToPrevious,\r\n     } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color name</span>\r\n                <div>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        className=\"mediumTextField\" \r\n                        value={fillingColorName}\r\n                        onChange={changeFillingColorName}\r\n                    />\r\n                </div>\r\n\r\n                <span>Filling color HEX</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox \r\n                        color=\"primary\" \r\n                        checked={connectToPrevious} \r\n                        onChange={changeConnectToPrevious} \r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FillingSection;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport CustomInputShort from \"components/common/CustomInputShort\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TocSection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst ShortCutSection = (props) => {\r\n    const {\r\n        shortCutWinView, changeShortCutWin, \r\n        shortCutMacView, changeShortCutMac,\r\n    } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField \r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin} \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField \r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac} \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />     \r\n            </div>          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShortCutSection;","import React from \"react\";\r\n\r\nconst TypographySection = () => {\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n        \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TypographySection;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\n\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: 'initial',\r\n      backgroundColor: 'white',\r\n      transition: '0.2s',\r\n\r\n      '&:before': {\r\n        transition: '0.2s',\r\n      },\r\n\r\n      '&:hover': {\r\n        color: '#000',\r\n      },\r\n      '&$selected': {\r\n        backgroundColor: '#2196f3',\r\n        color: 'white',\r\n        opacity: 1,\r\n      },\r\n      '&:hover:active': {\r\n        backgroundColor: 'white',\r\n        transition: '0.2s',\r\n      },\r\n      '&$selected:hover:active': {\r\n        backgroundColor: '#2ca4ff',\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import Tabs from '@material-ui/core/Tabs';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTabs = withStyles(theme => ({\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n      }\r\n  }))(Tabs);\r\n\r\n  export default CustomTabs;","import { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        '&:after': {\r\n            height: '100%',\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: '1280px',\r\n        maxHeight: '850px',\r\n        minHeight: '550px',\r\n        width: 'calc(100% - 96px)',\r\n        height: 'calc(100% - 96px)',\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        border: 'none',\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: 'middle',\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","import keycode from 'keycode';\r\nimport isEqual from 'lodash/isEqual';\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === 'MacOS' ? 'Option' : 'Alt',\r\n      ctrlKey: systemName === 'MacOS' ? 'Control' : 'Ctrl',\r\n      shiftKey: 'Shift',\r\n      metaKey: 'Command',\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = '';\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === 'style') {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","import React from 'react';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport NamesSection from './sections/NamesSection';\r\nimport WordExportSection from './sections/WordExportSection';\r\nimport PositioningSection from './sections/PositioningSection';\r\nimport ListSection from './sections/ListSection';\r\nimport ReferencingSection from './sections/ReferencingSection';\r\nimport TypographySection from './sections/TypographySection';\r\nimport DistancesSection from './sections/DistancesSection';\r\nimport FramesSection from './sections/FramesSection';\r\nimport FillingSection from './sections/FillingSection';\r\nimport TocSection from './sections/TocSection';\r\nimport ShortCutsSection from './sections/ShortCutsSection';\r\nimport TestSection from './sections/TestSection';\r\n\r\nimport theme from '../../theme';\r\nimport CustomTab from '../common/CustomTab';\r\nimport CustomTabs from '../common/CustomTabs';\r\nimport CustomDialog from '../common/CustomDialog';\r\nimport { alignmentsMap } from 'constants.js';\r\nimport getShortCutUtils from \"utils/getShortCutUtils\";\r\nimport { \r\n    getCorrectColor, \r\n    getUnstyledText, \r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n    getListChars, \r\n} from 'utils';\r\n\r\nimport \"./style.css\";\r\n\r\nclass NewDecDialog extends React.Component {\r\n    state = { \r\n        openedTab: 0,\r\n        decKey: \"\",\r\n        group: \"\",\r\n        active: false,\r\n        styleNameEn: \"\",\r\n        styleNameDe: \"\",\r\n        styleNameRu: \"\",\r\n        styleNameFr: \"\",\r\n        isList: false,\r\n        listType: \"unordered\",\r\n        bulletField: \"\",\r\n        verticalAlign: \"baseline\",\r\n        textTransform: \"none\",\r\n        leftBorder: false,\r\n        rightBorder: false,\r\n        topBorder: false,\r\n        bottomBorder: false,\r\n        borderType: \"solid\",\r\n        borderColor: \"f00\",\r\n        borderColorName: \"Red\",\r\n        borderThickness: \"2\",\r\n        fontSize: \"12\",\r\n        fontColor: \"000\",\r\n        fontColorName: \"Black\",\r\n        alignment: \"left\",\r\n        font: \"Roboto\",\r\n        fillingColor: \"\",\r\n        fillingColorName: \"\",\r\n        firstRowIndent: \"0\",\r\n        otherRowsIndent: \"0\",\r\n        lineSpacing: \"1.15\",\r\n        customLineSpacing: \"\",\r\n        previewText: `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`,\r\n        bold: false,\r\n        italic: false,\r\n        underlined: false,\r\n        stroke: false,\r\n        connectToPrevious: false,\r\n        marginTop: \"6\",\r\n        marginBottom: \"6\",\r\n        wordSpacing: \"0\",   \r\n        listName: \"\",\r\n        prefix: \"\",\r\n        suffix: \"\",\r\n        orderLevel: \"\",\r\n        suffixDistance: \"0.25\",\r\n        magicTabs: false,\r\n        listItem: \"bulletpoint\",\r\n        unicodeNumber: \"\",\r\n        unicodeChar: \"\",\r\n        numberingStyle: \"decimal\",\r\n        continueNumbering: false,\r\n        allowRestartNumbering: false,\r\n        includePreviousFrom: \"\",\r\n        sideNumber: false,\r\n        sideNumberFont: \"Roboto\",\r\n        sideNumberAlignment: \"center\",\r\n        sideNumberFontSize: \"12\",\r\n        sideNumberFontColor: \"FFF\",\r\n        sideNumberFillingColor: \"1E88E5\",\r\n        sideNumberWidth: \"20\",\r\n        sideNumberRadius: \"10\",\r\n        tocIndentation: \"\",\r\n        groupToCreate: \"\",\r\n        xrefToCreate: \"\",\r\n        referenceGroup: \"\",\r\n        shortCutWin: \"\",\r\n        shortCutWinView: \"\",\r\n        shortCutMac: \"\",\r\n        shortCutMacView: \"\",\r\n        wordStyleName: \"\",\r\n        softReturn: false,\r\n    };\r\n\r\n    toggleStateProperty = propName => e => {\r\n        this.setState({\r\n            [propName]: e.target.checked\r\n        });\r\n    };\r\n\r\n    setStateProperty = propName => (e, secondArg = \"\") => {\r\n        const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n        this.setState({\r\n            [propName]: newValue,\r\n        });\r\n    };\r\n\r\n    setBullet = propName => e => {\r\n        const newBullet = e.target.value.length > 1 ? e.target.value[e.target.value.length - 1] : e.target.value;\r\n        this.setState({\r\n            [propName]: newBullet,\r\n        });\r\n        return newBullet;\r\n    };\r\n\r\n    setColor = propName => (e, secondArg) => {\r\n        let input = e ? (e.target.value || \"\") : secondArg;\r\n        \r\n        const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                              : \"\" ;\r\n        \r\n        if (filteredInput !== this.state[propName]) {\r\n            this.setState({\r\n                [propName]: filteredInput,\r\n            });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    setNumber = propName => e => {\r\n        let input = e.target.value || \"\";\r\n\r\n        const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                              ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                              : \"\" ;\r\n\r\n        if (filteredInput !== this.state[propName]) {\r\n          this.setState({\r\n              [propName]: filteredInput,\r\n          });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    setShortCut = (valuePropName, viewPropName, isMac) => e => {\r\n        const systemName = isMac ? \"MacOS\" : \"Windows\";\r\n        const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n        if (shortCut && shortCut.deleteKey) {\r\n          setTimeout(() => {\r\n            this.setState({ [valuePropName]: \"\" });\r\n            this.setState({ [viewPropName]: \"\" });\r\n          }, 100);\r\n        } else if (shortCut) {\r\n          this.setState({ [valuePropName]: shortCut.value });\r\n          this.setState({ [viewPropName]: shortCut.stringValue });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, onClose } = this.props;\r\n        const { setStateProperty, toggleStateProperty, setNumber, setColor, setBullet, setShortCut } = this;\r\n        const { \r\n            openedTab, \r\n            decKey,\r\n            group,\r\n            active,\r\n            styleNameEn,\r\n            styleNameDe,\r\n            styleNameRu,\r\n            styleNameFr,\r\n            isList, \r\n            listType, \r\n            verticalAlign, \r\n            textTransform,\r\n            leftBorder, \r\n            rightBorder,\r\n            topBorder,\r\n            bottomBorder, \r\n            borderType,\r\n            borderColor,\r\n            borderColorName,\r\n            fontColor,\r\n            fillingColor,\r\n            borderThickness,\r\n            firstRowIndent,\r\n            otherRowsIndent,\r\n            lineSpacing,\r\n            customLineSpacing,\r\n            previewText,\r\n            fontSize,\r\n            fontColorName,\r\n            font,\r\n            alignment,\r\n            bold,\r\n            italic,\r\n            underlined,\r\n            stroke,\r\n            fillingColorName,\r\n            connectToPrevious,\r\n            marginTop,\r\n            marginBottom,\r\n            wordSpacing,\r\n            listName,\r\n            prefix,\r\n            suffix,\r\n            orderLevel,\r\n            suffixDistance,\r\n            magicTabs,\r\n            listItem,\r\n            unicodeNumber,\r\n            unicodeChar,\r\n            numberingStyle,\r\n            continueNumbering,\r\n            allowRestartNumbering,\r\n            includePreviousFrom,\r\n            sideNumber,\r\n            sideNumberFont,\r\n            sideNumberAlignment,\r\n            sideNumberFontSize,\r\n            sideNumberFontColor,\r\n            sideNumberFillingColor,\r\n            sideNumberWidth,\r\n            sideNumberRadius,\r\n            tocIndentation,\r\n            groupToCreate,\r\n            xrefToCreate,\r\n            referenceGroup,\r\n            shortCutWinView,\r\n            shortCutMacView,\r\n            wordStyleName,\r\n            softReturn,\r\n        } = this.state;\r\n\r\n        const changeOpenedTab = setStateProperty(\"openedTab\");\r\n        const changeDecKey = setStateProperty(\"decKey\");\r\n        const changeGroup = setStateProperty(\"group\");\r\n        const changeActive = toggleStateProperty(\"active\");\r\n        const changeStyleNameEn = setStateProperty(\"styleNameEn\");\r\n        const changeStyleNameDe = setStateProperty(\"styleNameDe\");\r\n        const changeStyleNameRu = setStateProperty(\"styleNameRu\");\r\n        const changeStyleNameFr = setStateProperty(\"styleNameFr\");\r\n        const changeIsList = toggleStateProperty(\"isList\");\r\n        const changeVerticalAlign = setStateProperty(\"verticalAlign\");\r\n        const changeTextTransform = setStateProperty(\"textTransform\");\r\n        const changeLeftBorder = toggleStateProperty(\"leftBorder\");\r\n        const changeRightBorder = toggleStateProperty(\"rightBorder\");\r\n        const changeTopBorder = toggleStateProperty(\"topBorder\");\r\n        const changeBottomBorder = toggleStateProperty(\"bottomBorder\");\r\n        const changeBorderColor = setColor(\"borderColor\");\r\n        const changeFontColor = setColor(\"fontColor\");\r\n        const changeFillingColor = setColor(\"fillingColor\");\r\n        const changeBorderThickness = setNumber(\"borderThickness\");\r\n        const changeFirstRowIndent = setNumber(\"firstRowIndent\");\r\n        const changeOtherRowsIndent = setNumber(\"otherRowsIndent\");\r\n        const changeLineSpacing = setStateProperty(\"lineSpacing\");\r\n        const changeCustomLineSpacing = setNumber(\"customLineSpacing\");\r\n        const changeBorderColorName = setStateProperty(\"borderColorName\");\r\n        const changeFontSize = setNumber(\"fontSize\");\r\n        const changeFontColorName = setStateProperty(\"fontColorName\");\r\n        const changeFont = setStateProperty(\"font\");\r\n        const changeAlignment = setStateProperty(\"alignment\");\r\n        const changeBold = toggleStateProperty(\"bold\");\r\n        const changeItalic = toggleStateProperty(\"italic\");\r\n        const changeUnderlined = toggleStateProperty(\"underlined\");\r\n        const changeStroke = toggleStateProperty(\"stroke\");\r\n        const changeFillingColorName = setStateProperty(\"fillingColorName\");\r\n        const changeConnectToPrevious = toggleStateProperty(\"connectToPrevious\");\r\n        const changeMarginTop = setNumber(\"marginTop\");\r\n        const changeMarginBottom = setNumber(\"marginBottom\");\r\n        const changeWordSpacing = setNumber(\"wordSpacing\");\r\n        const changeListName = setStateProperty(\"listName\");\r\n        const changePrefix = setStateProperty(\"prefix\");\r\n        const changeSuffix = setStateProperty(\"suffix\");\r\n        const changeOrderLevel = setStateProperty(\"orderLevel\");\r\n        const changeSuffixDistance = setStateProperty(\"suffixDistance\");\r\n        const changeMagicTabs = toggleStateProperty(\"magicTabs\");\r\n        const changeListItem = setStateProperty(\"listItem\");\r\n        const changeNumberingStyle = setStateProperty(\"numberingStyle\");\r\n        const changeContinueNumbering = toggleStateProperty(\"continueNumbering\");\r\n        const changeAllowRestartNumbering = toggleStateProperty(\"allowRestartNumbering\");\r\n        const changencludePreviousFrom = setStateProperty(\"includePreviousFrom\");\r\n        const changeSideNumberFont = setStateProperty(\"sideNumberFont\");\r\n        const changeSideNumberAlignment = setStateProperty(\"sideNumberAlignment\");\r\n        const changeSideNumberFontSize = setNumber(\"sideNumberFontSize\");\r\n        const changeSideNumberFontColor = setColor(\"sideNumberFontColor\");\r\n        const changeSideNumberFillingColor = setColor(\"sideNumberFillingColor\");\r\n        const changeSideNumberWidth = setNumber(\"sideNumberWidth\");\r\n        const changeSideNumberRadius = setNumber(\"sideNumberRadius\");\r\n        const changeTocIndentation = setStateProperty(\"tocIndentation\");\r\n        const changeGroupToCreate = setStateProperty(\"groupToCreate\");\r\n        const changeXrefToCreate = setStateProperty(\"xrefToCreate\");\r\n        const changeReferenceGroup = setStateProperty(\"referenceGroup\");\r\n        const changeShortCutWin = setShortCut(\"shortCutWin\", \"shortCutWinView\");\r\n        const changeShortCutMac = setShortCut(\"shortCutMac\", \"shortCutMacView\", true);\r\n        const changeWordStyleName = setStateProperty(\"wordStyleName\");\r\n        const changeSoftReturn = toggleStateProperty(\"softReturn\");\r\n\r\n        const changeListType = e => {\r\n            const { value } = e.target;\r\n            setStateProperty(\"listType\")(null, value);\r\n            if (value === \"ordered\" && suffix === \"\") {\r\n                setStateProperty(\"suffix\")(null, \".\");\r\n            } else if (value === \"unordered\" && suffix === \".\") {\r\n                setStateProperty(\"suffix\")(null, \"\");\r\n            }\r\n        };\r\n\r\n        const changeSideNumber = e => {\r\n            toggleStateProperty(\"sideNumber\")(e);\r\n            if (e.target.checked && suffix === \".\") {\r\n                setStateProperty(\"suffix\")(null, \"\");\r\n            } else if (!e.target.checked && suffix === \"\") {\r\n                setStateProperty(\"suffix\")(null, \".\");\r\n            }\r\n        } \r\n        \r\n        const changeUnicodeChar = e => {\r\n            const newUnicodeChar = setBullet(\"unicodeChar\")(e);\r\n            const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n            setStateProperty(\"unicodeNumber\")(null, newUnicodeNumber);\r\n        };\r\n\r\n        const changeUnicodeNumber = e => {\r\n            const newUnicodeNumber = setColor(\"unicodeNumber\")(e);\r\n            const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n            setStateProperty(\"unicodeChar\")(null, newUnicodeChar);\r\n        };\r\n\r\n        const changePreviewText = e => {\r\n            const { value } = e.target;\r\n            if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n                setStateProperty(\"previewText\")(null, getUnstyledText(value));\r\n            } else {\r\n                setStateProperty(\"previewText\")(null, `<div><br></div>`);\r\n            }\r\n        };\r\n\r\n        const changeBorderType = e => {\r\n            setStateProperty(\"borderType\")(e);\r\n            if (e.target.value === \"double\" && borderThickness === \"2\") {\r\n                setStateProperty(\"borderThickness\")(null, \"3\");\r\n            }\r\n            if (e.target.value !== \"double\" && borderThickness === \"3\") {\r\n                setStateProperty(\"borderThickness\")(null, \"2\");\r\n            }\r\n         };\r\n\r\n        const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n        const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n        const previewAdditionalFillingColor = connectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n        const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n        const previewMarginLeft = otherRowsIndent ? `${otherRowsIndent >= 12 ? 12 : otherRowsIndent}cm` : 0;\r\n        const previewTextIndent = indentsDifference ? `${indentsDifference >= 12 ? 12 : indentsDifference}cm` : 0;\r\n\r\n        const previewStyle = {\r\n            fontSize: !fontSize ? \"0\" : `${fontSize <= 120 ? fontSize : 120}pt`,\r\n            color: `#${previewFontColor}`,\r\n            fontFamily: font,\r\n            alignItems: alignmentsMap[alignment],\r\n            textAlign: alignment,\r\n            fontWeight: bold ? \"bold\" : \"normal\",\r\n            fontStyle: italic ? \"italic\" : \"normal\",\r\n            textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n            verticalAlign,\r\n            textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n            fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n            backgroundColor: `#${previewFillingColor}`,\r\n            backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n            marginLeft: previewMarginLeft,\r\n            textIndent: previewTextIndent,\r\n            wordSpacing: `${wordSpacing || 0}pt`,\r\n            lineHeight: (lineSpacing !== \"custom\" ? lineSpacing : (!customLineSpacing ? \"1.15\" : `${customLineSpacing || 0}`)),\r\n            marginBottom: `${marginBottom || 0}pt`,\r\n            marginTop: `${marginTop || 0}pt`,\r\n        };\r\n\r\n        const previewProps = { previewText, changePreviewText, previewStyle };\r\n\r\n        const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"f5f5f5\");\r\n        const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n        const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n            fontFamily: sideNumberFont,\r\n            textAlign: sideNumberAlignment,\r\n            fontSize: !sideNumberFontSize ? \"0\" : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n            color: `#${previewSideNumberFontColor}`,\r\n            backgroundColor: `#${previewSideNumberFillingColor}`,\r\n            minWidth: `${sideNumberWidth || 0}pt`,\r\n            borderRadius: `${sideNumberRadius || 0}pt`,\r\n        };\r\n\r\n        const listPreviewProps = { \r\n            listChars: getListChars({\r\n                    isOrderedList: listType === \"ordered\", \r\n                    numberingStyle, \r\n                    listItem,\r\n                    unicodeChar,\r\n                }),\r\n            listPreviewStyle: previewStyle,\r\n            prefix, \r\n            suffix, \r\n            suffixDistance,\r\n            sideNumberStyle,\r\n        };\r\n\r\n        const namesSectionProps = {\r\n            decKey, changeDecKey,\r\n            group, changeGroup,\r\n            active, changeActive,\r\n            styleNameEn, changeStyleNameEn,\r\n            styleNameDe, changeStyleNameDe,\r\n            styleNameRu, changeStyleNameRu,\r\n            styleNameFr, changeStyleNameFr,\r\n            newGroup: groupToCreate, \r\n            changeGroupToCreate,\r\n        }; \r\n\r\n        const wordExportProps = {\r\n            wordStyleName, changeWordStyleName,\r\n            softReturn, changeSoftReturn,\r\n        };\r\n\r\n        const listSectionProps = { \r\n            listPreviewProps,\r\n            isList, changeIsList, \r\n            listType, changeListType, \r\n            listName, changeListName,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            orderLevel, changeOrderLevel,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listItem, changeListItem,\r\n            unicodeNumber, changeUnicodeNumber,\r\n            unicodeChar, changeUnicodeChar,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changencludePreviousFrom,\r\n            sideNumber, changeSideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberWidth, changeSideNumberWidth,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n        };\r\n\r\n        const referencingSectionProps = {\r\n            referenceGroup, changeReferenceGroup,\r\n            newGroup: xrefToCreate,\r\n            changeXrefToCreate,\r\n        };\r\n\r\n        const typographySectionProps = { \r\n            verticalAlign, \r\n            textTransform, \r\n            changeVerticalAlign, \r\n            changeTextTransform,\r\n            fontColor,\r\n            changeFontColor,\r\n            previewProps,\r\n            fontSize,\r\n            changeFontSize,\r\n            fontColorName,\r\n            changeFontColorName,\r\n            font, \r\n            changeFont,\r\n            alignment, changeAlignment,\r\n            bold, changeBold,\r\n            italic, changeItalic,\r\n            underlined, changeUnderlined,\r\n            stroke, changeStroke,\r\n        };\r\n\r\n        const distancesSectionProps = {\r\n            previewProps,\r\n            firstRowIndent,\r\n            otherRowsIndent,\r\n            lineSpacing,\r\n            changeFirstRowIndent,\r\n            changeOtherRowsIndent,\r\n            changeLineSpacing,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            wordSpacing, changeWordSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n        };\r\n\r\n        const framesSectionProps = { \r\n            leftBorder, \r\n            rightBorder, \r\n            topBorder, \r\n            bottomBorder, \r\n            changeLeftBorder, \r\n            changeRightBorder, \r\n            changeTopBorder, \r\n            changeBottomBorder, \r\n            borderColor,\r\n            changeBorderColor,\r\n            borderThickness,\r\n            changeBorderThickness,\r\n            borderType,\r\n            changeBorderType,\r\n            borderColorName,\r\n            changeBorderColorName,\r\n        };\r\n\r\n        const fillingSectionProps = { \r\n            fillingColor, \r\n            changeFillingColor,\r\n            fillingColorName,\r\n            changeFillingColorName,\r\n            previewProps,\r\n            connectToPrevious,\r\n            changeConnectToPrevious,\r\n        };\r\n\r\n        const tocSectionProps = {\r\n            tocIndentation, changeTocIndentation,\r\n        };\r\n\r\n        const shortCutsSectionProps = {\r\n            shortCutWinView, changeShortCutWin, \r\n            shortCutMacView, changeShortCutMac,\r\n        };\r\n        \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n            <CustomDialog\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"body\"\r\n                className=\"paragraphDecorators-dialog\"\r\n                fullWidth={true}\r\n                maxWidth={false}\r\n                id=\"dialog\"\r\n            >\r\n                <div className=\"header\">\r\n                    <DialogTitle className=\"header-title\">\r\n                        <p>Create new paragraph decorator</p>\r\n                    </DialogTitle>\r\n                    <div className=\"header-buttons\">\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick={onClose}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {}}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                    \r\n                <DialogContent className=\"content\">\r\n                    <div className=\"content-leftSide\">\r\n                        <CustomTabs \r\n                            className=\"dialogTabs\"\r\n                            value={openedTab} \r\n                            onChange={changeOpenedTab} \r\n                            orientation=\"vertical\"\r\n                            color=\"primary\"\r\n                            indicatorColor=\"primary\"\r\n                        >\r\n                            <CustomTab className=\"dialogTab\" label=\"Names\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"WORD export\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"List\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Test\" />\r\n                        </CustomTabs>\r\n                    </div>\r\n                    <div className=\"content-rightSide\">\r\n                        { openedTab === 0 && <NamesSection {...namesSectionProps} /> }\r\n                        { openedTab === 1 && <WordExportSection {...wordExportProps} /> }\r\n                        { openedTab === 2 && <PositioningSection /> }\r\n                        { openedTab === 3 && <ListSection {...listSectionProps} />}\r\n                        { openedTab === 4 && <ReferencingSection {...referencingSectionProps} /> }\r\n                        { openedTab === 5 && <TypographySection {...typographySectionProps} /> }\r\n                        { openedTab === 6 && <DistancesSection {...distancesSectionProps} /> }\r\n                        { openedTab === 7 && <FramesSection {...framesSectionProps} /> }\r\n                        { openedTab === 8 && <FillingSection {...fillingSectionProps} /> }\r\n                        { openedTab === 9 && <TocSection {...tocSectionProps} /> }\r\n                        { openedTab === 10 && <ShortCutsSection {...shortCutsSectionProps} /> }\r\n                        { openedTab === 11 && <TestSection {...typographySectionProps} /> }\r\n                    </div>\r\n                </DialogContent>\r\n            </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewDecDialog;","import React from 'react';\nimport './App.css';\n\nimport NewDecDialog from './components/NewDecDialog';\n\nclass App extends React.Component {\n  state = {\n    isOpen: true,\n  }\n\n  handleClick = () => {\n    this.setState(({ isOpen }) => {\n      return {\n        isOpen: !isOpen\n      };\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleClick}>Open</button>\n        <NewDecDialog \n          isOpen={this.state.isOpen}\n          onClose={() => {\n            this.setState({ isOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}