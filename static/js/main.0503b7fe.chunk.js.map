{"version":3,"sources":["components/DecoratorDialog/common/CustomInput.js","components/DecoratorDialog/common/LabelWithAsterisk.js","components/DecoratorDialog/constants/decoratorsList.js","components/DecoratorDialog/constants/localeConstants.js","components/DecoratorDialog/constants/constants.js","components/DecoratorDialog/constants/initialFormState.js","components/DecoratorDialog/helpers/isFontAvailable.js","components/DecoratorDialog/constants/fontsSet.js","components/DecoratorDialog/helpers/prepareColorCode.js","components/DecoratorDialog/helpers/DecDataConverter/converterUtils.js","components/DecoratorDialog/helpers/DecDataConverter/decToSendDefaultProps.js","components/DecoratorDialog/helpers/DecDataConverter/DecDataConverter.js","components/DecoratorDialog/helpers/DecDataConverter/index.js","components/DecoratorDialog/helpers/getShortCutUtils.js","components/DecoratorDialog/helpers/validationFunctions.js","components/DecoratorDialog/helpers/helpers.js","components/DecoratorDialog/common/NewGroupDialog.js","components/DecoratorDialog/hoc/withNewGroupControl.js","components/DecoratorDialog/actions/index.js","components/DecoratorDialog/sections/NamesSection.js","components/DecoratorDialog/common/CustomInputShort.js","components/DecoratorDialog/common/SectionTitle/index.js","components/DecoratorDialog/common/SectionTitle/SectionTitle.js","components/DecoratorDialog/sections/PositioningSection/BackSpaceActionInput.js","components/DecoratorDialog/sections/PositioningSection/index.js","components/DecoratorDialog/sections/PositioningSection/PositioningSection.js","components/DecoratorDialog/common/Preview/generators.js","components/DecoratorDialog/common/Preview/ListPreview.js","components/DecoratorDialog/common/ColorField/index.js","components/DecoratorDialog/common/ColorField/ColorField.js","components/DecoratorDialog/common/FontSelectFields.js","components/DecoratorDialog/sections/ListSection/ListSection.js","components/DecoratorDialog/sections/ListSection/index.js","components/DecoratorDialog/sections/ReferencingSection.js","components/DecoratorDialog/common/ContentEditable.js","components/DecoratorDialog/common/Preview/Preview.js","components/DecoratorDialog/common/Preview/index.js","components/DecoratorDialog/sections/TypographySection/index.js","components/DecoratorDialog/sections/TypographySection/TypographySection.js","components/DecoratorDialog/common/ConnectToPreviousField.js","components/DecoratorDialog/sections/DistancesSection.js","components/DecoratorDialog/sections/FramesSection/FrameTypeInput.js","components/DecoratorDialog/sections/FramesSection/generateBorderPreviewStyle.js","components/DecoratorDialog/sections/FramesSection/FramesSection.js","components/DecoratorDialog/sections/FramesSection/index.js","components/DecoratorDialog/sections/FillingSection.js","components/DecoratorDialog/sections/TocSection.js","components/DecoratorDialog/sections/ShortCutsSection.js","components/DecoratorDialog/theme.js","components/DecoratorDialog/common/CustomTab.js","components/DecoratorDialog/common/CustomErrorTab.js","components/DecoratorDialog/common/CustomTabs.js","components/DecoratorDialog/common/CustomDialog.js","components/DecoratorDialog/DecoratorDialog.js","components/DecoratorDialog/index.js","App.js","actions.js","reducers/decoratorDialogReducer/isOpenReducer.js","reducers/decoratorDialogReducer/decoratorFormReducer.js","reducers/decoratorDialogReducer/validationErrorReducer.js","reducers/decoratorDialogReducer/isEditModeReducer.js","reducers/decoratorDialogReducer/openedTabReducer.js","reducers/decoratorDialogReducer/index.js","reducers/savedFormReducer.js","reducers/rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","LabelWithAsterisk","children","className","decoratorsList","name","value","LANGS","langKey","langName","langFullName","regionName","regionFullName","ADDITIONAL_LANGS","slice","MAIN_LANG_KEY","alignmentList","center","left","right","justify","numberingSets","decimal","lineSpacings","orderedListStylesMap","Map","bulletNamesMap","sectionTypesMap","backSpaceActionsMap","sections","number","width","autoFillingRequiredFields","sideNumberFont","font","fontColor","marginBottom","firstRowIndent","otherRowsIndent","wordSpacing","lineSpacing","borderThickness","initialFormState","decKey","sectionTypes","Array","from","reduce","acc","i","key","group","groupToCreate","active","indentationalLevel","fixedIndentation","backspaceActionWithContent","backspaceActionWithContentStyle","returnActionNextSection","returnActionEmptySection","tabAction","shiftTabAction","isList","listName","orderLevel","suffixDistance","magicTabs","listType","listItem","unicodeNumber","unicodeChar","listItemString","numberingStyle","softReturn","continueNumbering","allowRestartNumbering","includePreviousFrom","patternMode","listPattern","prefix","suffix","sideNumber","customSideNumberFont","sideNumberAlignment","sideNumberFontSize","sideNumberFontColor","sideNumberFillingColor","sideNumberWidth","sideNumberLineHeight","sideNumberRadius","sideNumberBold","sideNumberItalic","sideNumberUnderlined","referenceGroup","referenceGroupToCreate","customFont","alignment","bold","italic","underlined","stroke","textTransform","readOnly","connectToPrevious","verticalAlign","customLineSpacing","borderLeft","borderRight","borderTop","borderBottom","borderType","fillingColor","tocIndentation","shortCutWin","shortCutWinView","shortCutMac","shortCutMacView","body","document","container","createElement","innerHTML","style","cssText","getWidth","appendChild","clientWidth","removeChild","monoWidth","serifWidth","sansWidth","isFontAvailable","fontsSet","filter","prepareColorCode","color","test","trim","rgbMatch","match","length","r","g","b","toString","rgbToHex","replaceDecNameIfDefault","decName","getNumber","val","getNumberString","decToSendDefaultProps","item_type","style_properties","keyboard_shortcut","xref_target_type_group_key","is_possible_xref_target","show_in_editor_toc","editor_toc_indentation","editor_toc_filter_level","list_key","item_order","extra_hanging_indentation","extra_hanging_indentation_at_grid","numerated_list_format","numerated_list_start","numerated_list_pattern","numerated_list_style","is_auto_restart_numbering","allow_restart_numbering","bullet_list_format","movable","content_required","change_pd_on_return_if_empty","pd_for_current_section_on_return_if_empty","on_return_indentation","item_order_allow_tab","DecDataConverter","rawDec","dec","order","res","section_types","Object","entries","map","hidden","initial_indentation","is_fixed_indentation","content_in_second_line","backspace_action","backspace_action_value","create_new_section_on_return_if_empty","pd_for_new_section_on_return_if_empty","on_return_style_key","on_tab_key","on_shift_tab_key","read_only","editor_style","initialState","propName","styles","textDecoration","indentsDifference","borderStyle","getStyleString","getSideNumberStyleString","unchangingProps","console","log","cur","includes","suffixDistanceMatch","prefixAndSuffixMatch","has","bullet","unicodeNumberToChar","hasOwnProperty","getShortCutUtils","convertShortcutToString","stylesProps","stylesString","sideNumberStylesString","keyValueStringsArray","split","stylesArray","keyValueStr","margin","indent","colorCodeMatch","thicknessMatch","lineTypeMatch","sideNumberCustomFont","getStylesObject","mapDecFields","systemName","e","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","indexOf","isCmdPressed","stringValue","keys","CMD_KEYS","forEach","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","isEqual","childItems","child_items","itemKey","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","getErrorState","form","isEditMode","errorState","validationChecks","namesSection","field","check","en_EN","checkDecKey","listSection","checkListName","getValidationChecks","errorFields","getTabNumberToSwitch","tabsErrorState","getCorrectColor","hex","correctColor","selectAllOnClick","defaultValue","target","focus","select","getUnstyledText","styledText","unstyledText","replace","String","fromCharCode","parseInt","unicodeCharToNumber","charCodeAt","scrollToBottom","setTimeout","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","changeAndScroll","changeFunction","timeOut","focusInput","inputRef","timeout","current","getPreviewFont","fillMissedFields","formState","fieldName","option","customOption","trimOnTextFieldBlur","changeFunc","NewGroupDialog","isXref","props","groupType","emptyGroup","groupKey","getInitialState","savedGroup","state","requiredFieldRef","React","createRef","onInputChange","inputName","setState","onClose","hideGroupDialogValidationError","closeGroupDialog","onGroupSave","groupToSave","saveGroup","showGroupDialogValidationError","this","isOpen","hasGroupDialogValidationError","titleText","buttonText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","onChange","error","variant","Fragment","DialogActions","Button","onClick","PureComponent","withNewGroupControl","ViewComponent","isGroupDialogOpen","openGroupDialog","Component","updateDecoratorForm","payload","type","clearDecoratorForm","updateValidationError","openDialog","dispatch","closeDialog","setValue","secondArg","newValue","undefined","toggleValue","checked","setBullet","newBullet","setColor","filteredInput","setNumber","setShortCut","valuePropName","viewPropName","search","convertEventToShortCut","NamesSection","decKeyInputRef","decNameEnInputRef","inputRefs","onGroupChange","groupName","changeGroupToCreate","changeGroup","onNameChange","changeName","onSectionTypesChange","typeName","changeSectionTypes","onValidationError","sectionErrors","prevprops","changeDecKey","changeActive","newGroupName","disabled","onBlur","FormControlLabel","control","Checkbox","label","labelPlacement","NativeSelect","connect","decoratorDialog","validationError","CustomInputShort","SectionTitle","text","BackSpaceActionInput","PositioningSection","changeIndentationalLevel","changeBackspaceActionWithContent","changeBackspaceActionWithContentStyle","changeBackspaceActionWithoutContent","changeBackspaceActionWithoutContentStyle","changeReturnActionNextSection","changeReturnActionEmptySection","changeTabAction","changeShiftTabAction","changeisFixedIndentation","backSpaceActionStyleSettingsState","generatePreviewStyle","fillingConnectToPrevious","previewFontColor","previewFillingColor","previewAdditionalFillingColor","previewMarginLeft","previewTextIndent","previewLineSpacing","offset","alignType","parseFloat","getOffset","previewMarginTop","previewMarginBottom","previewBorderLeft","previewBorderRight","previewBorderTop","previewBorderBottom","correctFontSize","alignItems","textAlign","fontWeight","fontStyle","fontVariant","backgroundImage","borderImage","marginLeft","textIndent","lineHeight","outline","paddingLeft","paddingRight","paddingTop","paddingBottom","previewText","isOrderedList","listChars","fill","getListChars","get","listItemBeginnings","li","previewStyle","isSideNumber","sideNumberStyle","previewSideNumberFontColor","previewSideNumberFillingColor","fontSizeNumber","previewFontSize","marginRight","generateSideNumberStyle","listItemBeginningStyle","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","defaultColorCode","required","bottomAligned","colorError","inputError","pickerColor","colorSampleStyle","colorPickerClassName","InputProps","startAdornment","InputAdornment","onChangeComplete","disableAlpha","FontSelectFields","customFontInputRef","onFontChange","changeFont","changeCustomFont","optionalFieldState","fontName","placeholder","ListSection","listNameInputRef","unicodeCharInputRef","onIsListChange","changeIsList","onListTypeChange","changeOrderLevel","changeListType","changeSuffix","onListItemChange","changeListItem","onUnicodeNumberChange","newUnicodeNumber","changeUnicodeNumber","newUnicodeChar","changeUnicodeChar","onUnicodeCharChange","onSideNumberChange","changeSideNumber","listPreviewProps","changeListName","changePatternMode","changeListPattern","changePrefix","changeSuffixDistance","changeMagicTabs","changeListItemString","changeNumberingStyle","changeContinueNumbering","changeAllowRestartNumbering","changeIncludePreviousFrom","changeSoftReturn","changeSideNumberFont","changeCustomSideNumberFont","changeSideNumberAlignment","changeSideNumberFontSize","changeSideNumberFontColor","changeSideNumberFillingColor","changeSideNumberWidth","changeSideNumberRadius","changeSideNumberBold","changeSideNumberItalic","changeSideNumberUnderlined","changeSideNumberLineHeight","mainListSettingsState","unorderedListSettingsState","customListItemSettingsState","customListItemSettingsState2","orderedListSettingsState","sideNumberSettingsState","RadioGroup","row","Radio","Switch","ReferencingSection","onXrefChange","xrefName","xref","changeReferenceGroupToCreate","changeReferenceGroup","__rest","s","t","p","prototype","call","getOwnPropertySymbols","q","propertyIsEnumerable","normalizeHtml","str","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","getEl","emitChange","originalEvt","evt","assign","_a","tagName","ref","onInput","onKeyUp","onKeyDown","contentEditable","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","onPreviewTextChange","changePreviewText","selectAllChildren","TypographySection","changeAlignment","changeFontSize","changeFontColor","changeBold","changeItalic","changeUnderlined","changeStroke","changeTextTransform","changeVerticalAlign","changeMarginTop","changeReadOnly","previewProps","changeConnectToPrevious","DistancesSection","customLineSpacingInputRef","onLineSpacingChange","changeLineSpacing","changeMarginBottom","changeFirstRowIndent","changeOtherRowsIndent","changeCustomLineSpacing","changeWordSpacing","customLineSpacingFieldState","marginFieldsState","FrameTypeInput","generateBorderPreviewStyle","previewBorderWidth","isNaN","FramesSection","onBorderTypeChange","changeBorderType","changeBorderThickness","changeBorderLeft","changeBorderRight","changeBorderTop","changeBorderBottom","changeBorderColor","id","Select","MenuItem","changeFillingColor","changeTocIndentation","changeShortCutWin","changeShortCutMac","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomErrorTab","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","justifyContent","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","DecoratorDialog","clearForm","onSaveButtonClick","switchTab","sendForm","values","some","convertToSend","onTabSwitch","tabNumber","isEmpty","openedTab","ThemeProvider","aria-labelledby","scroll","CustomTabs","orientation","indicatorColor","ShortCutsSection","switchDecDialogTab","savedForm","saveForm","saveDecoratorForm","clearSavedForm","convertToEdit","isOpenReducer","action","decoratorFormReducer","initialErrorState","validationErrorReducer","isEditModeReducer","openedTabReducer","decoratorDialogReducer","combineReducers","savedFormReducer","rootReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0503b7fe.chunk.js","sourcesContent":["import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: \"183px\",\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from \"react\";\r\n\r\nconst LabelWithAsterisk = ({ children }) => {\r\n    return (\r\n        <div className=\"labelWithAsterisk\">\r\n            <div className=\"labelWithAsterisk-labelBox\">\r\n                <span>{children}</span>\r\n            </div>\r\n            <div className=\"labelWithAsterisk-asteriskBox\">\r\n                <span className=\"labelWithAsterisk-asteriskMark\">*</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabelWithAsterisk;","const decoratorsList = [\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n    { name: \"Heading 1\", value: \"quick_heading_1\" },\r\n    { name: \"Heading 2\", value: \"quick_heading_2\" },\r\n    { name: \"Heading 3\", value: \"quick_heading_3\" },\r\n    { name: \"Heading 4\", value: \"quick_heading_4\" },\r\n    { name: \"Heading 5\", value: \"quick_heading_5\" },\r\n];\r\n\r\nexport default decoratorsList;","export const LANGS = [\n  { \n    langKey: \"en_EN\", \n    langName: \"EN\", \n    langFullName: \"English\", \n  },\n  { \n    langKey: \"de_DE\", \n    langName: \"DE\", \n    langFullName: \"German\", \n  },\n  { \n    langKey: \"ru_RU\", \n    langName: \"RU\", \n    langFullName: \"Russian\", \n  },\n  { \n    langKey: \"fr_FR\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"FR\",\n    regionFullName: \"France\"\n  },\n  { \n    langKey: \"fr_CA\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"CA\",\n    regionFullName: \"Canada\",\n  },\n  { \n    langKey: \"es_ES\", \n    langName: \"ES\", \n    langFullName: \"Spanish\", \n  },\n  { \n    langKey: \"fr_BE\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"BE\",\n    regionFullName: \"Belgium\",\n  },\n  { \n    langKey: \"nl_BE\", \n    langName: \"NL\", \n    langFullName: \"Dutch\",\n    regionName: \"BE\",\n    regionFullName: \"Belgium\"\n  },\n];\n\nexport const ADDITIONAL_LANGS = LANGS.slice(1);\n\nexport const MAIN_LANG_KEY = LANGS[0].langKey;","export const alignmentList = {\r\n    center: \"center\",\r\n    left: \"flex-start\",\r\n    right: \"flex-end\",\r\n    justify: \"flex-start\",\r\n};\r\n\r\nexport const numberingSets = {\r\n    decimal: [\"1\", \"2\", \"3\", \"88\", \"888\"],\r\n    \"upper-alpha\": [\"A\", \"B\", \"C\", \"XX\", \"XXX\"],\r\n    \"lower-alpha\": [\"a\", \"b\", \"c\", \"xx\", \"xxx\"],\r\n    \"upper-roman\": [\"I\", \"II\", \"III\", \"XX\", \"XXX\"],\r\n    \"lower-roman\": [\"i\", \"ii\", \"iii\", \"xx\", \"xxx\"],\r\n};\r\n\r\nexport const lineSpacings = [\"1.0\", \"1.15\", \"1.5\", \"2.0\", \"2.5\", \"3.0\"];\r\n\r\nexport const orderedListStylesMap = new Map([\r\n    [\"decimal\", \"1, 2, 3\"],\r\n    [\"upper-alpha\", \"A, B, C\"],\r\n    [\"lower-alpha\", \"a, b, c\"],\r\n    [\"upper-roman\", \"I, II, III\"],\r\n    [\"lower-roman\", \"i, ii, iii\"],\r\n]);\r\n\r\nexport const bulletNamesMap = new Map([\r\n    [\"2022\", \"•\"],\r\n    [\"2014\", \"—\"],\r\n    [\"2605\", \"★\"],\r\n]);\r\n\r\nexport const sectionTypesMap = new Map([\r\n    [\"text\", \"Text\"],\r\n    [\"table\", \"Table\"],\r\n    [\"image\", \"Image\"],\r\n]);\r\n\r\nexport const backSpaceActionsMap = new Map([\r\n    [\"merge\", \"Merge\"],\r\n    [\"apply_other_pd\", \"Apply other PD\"],\r\n    [\"remove_pd\", \"Remove PD\"],\r\n    [\"nothing\", \"Nothing\"],\r\n]);\r\n\r\nexport const sampleText = `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`;\r\n\r\n\r\nexport const sections = [\r\n    { \r\n        name: \"namesSection\", \r\n        number: 0 \r\n    },\r\n    { \r\n        name: \"positioningSection\", \r\n        number: 1 \r\n    },\r\n    { \r\n        name: \"listSection\", \r\n        number: 2 \r\n    },\r\n    { \r\n        name: \"referencingSection\", \r\n        number: 2 \r\n    },\r\n    { \r\n        name: \"typographySection\", \r\n        number: 3 \r\n    },\r\n    { \r\n        name: \"distancesSection\", \r\n        number: 4 \r\n    },\r\n    { \r\n        name: \"framesSection\", \r\n        number: 5 \r\n    },\r\n    { \r\n        name: \"fillingSection\", \r\n        number: 6 \r\n    },\r\n    { \r\n        name: \"tocSection\", \r\n        number: 7 \r\n    },\r\n    { \r\n        name: \"shortCutsSection\", \r\n        number: 8 \r\n    },\r\n];\r\n","import { LANGS } from \"./localeConstants\";\r\nimport { sectionTypesMap } from \"./constants\";\r\n\r\nexport const GLOBAL_FALLBACK_MARK = \"GLOBAL FALLBACK\";\r\nexport const DEFAULT_FONT = \"Helvetica\";\r\nexport const DEFAULT_FONT_SIZE = \"11\";\r\nexport const DEFAULT_SIDE_NUMBER_FONT_COLOR = \"FFF\";\r\nexport const DEFAULT_SIDE_NUMBER_FILLING_COLOR = \"1E88E5\";\r\nexport const DEFAULT_SIDE_NUMBER_WIDTH = \"20\";\r\nexport const DEFAULT_SIDE_NUMBER_RADIUS = \"10\";\r\nexport const DEFAULT_FONT_COLOR = \"000\";\r\nexport const DEFAULT_ROW_INDENT = \"0\";\r\nexport const DEFAULT_MARGIN = \"6\";\r\nexport const DEFAULT_WORD_SPACING = \"0\";\r\nexport const DEFAULT_LINE_SPACING = \"1.5\";\r\nexport const DEFAULT_BORDER_COLOR = \"F00\";\r\nexport const DEFAULT_BORDER_THICKNESS = \"2\";\r\n\r\nexport const autoFillingRequiredFields = {\r\n    sideNumberFont: DEFAULT_FONT,\r\n    font: DEFAULT_FONT,\r\n    fontSize: DEFAULT_FONT_SIZE,\r\n    fontColor: DEFAULT_FONT_COLOR,\r\n    marginTop: DEFAULT_MARGIN,\r\n    marginBottom: DEFAULT_MARGIN,\r\n    firstRowIndent: DEFAULT_ROW_INDENT,\r\n    otherRowsIndent: DEFAULT_ROW_INDENT,\r\n    wordSpacing: DEFAULT_WORD_SPACING,   \r\n    lineSpacing: DEFAULT_LINE_SPACING,\r\n    borderColor: DEFAULT_BORDER_COLOR,\r\n    borderThickness: DEFAULT_BORDER_THICKNESS,\r\n};\r\n\r\nexport const initialFormState = {\r\n    ...autoFillingRequiredFields,\r\n    decKey: \"\",\r\n    sectionTypes: { ...Array.from(sectionTypesMap).reduce((acc, [ key ], i) => ({ ...acc, [key]: !i }), {})},\r\n    group: \"\",\r\n    groupToCreate: \"\",\r\n    active: true,\r\n    name: { ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}) },\r\n    indentationalLevel: \"\",\r\n    fixedIndentation: true,\r\n    backspaceActionWithContent: \"merge\",\r\n    backspaceActionWithContentStyle: \"\",\r\n    returnActionNextSection: GLOBAL_FALLBACK_MARK,\r\n    returnActionEmptySection: GLOBAL_FALLBACK_MARK,\r\n    tabAction: \"\",\r\n    shiftTabAction: \"\",\r\n    isList: false,\r\n    listName: \"\",\r\n    orderLevel: \"\",\r\n    suffixDistance: \"0.5\",\r\n    magicTabs: false,\r\n    listType: \"unordered\",\r\n    listItem: \"2022\",\r\n    unicodeNumber: \"\",\r\n    unicodeChar: \"\",\r\n    listItemString: \"\",\r\n    numberingStyle: \"decimal\",\r\n    softReturn: false,\r\n    continueNumbering: false,\r\n    allowRestartNumbering: false,\r\n    includePreviousFrom: \"\",\r\n    patternMode: false,\r\n    listPattern: \"\",\r\n    prefix: \"\",\r\n    suffix: \"\",\r\n    sideNumber: false,\r\n    customSideNumberFont: \"\",\r\n    sideNumberAlignment: \"center\",\r\n    sideNumberFontSize: \"\",\r\n    sideNumberFontColor: DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    sideNumberFillingColor: DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    sideNumberWidth: DEFAULT_SIDE_NUMBER_WIDTH,\r\n    sideNumberLineHeight: \"\",\r\n    sideNumberRadius: DEFAULT_SIDE_NUMBER_RADIUS,\r\n    sideNumberBold: false,\r\n    sideNumberItalic: false,\r\n    sideNumberUnderlined: false,\r\n    referenceGroup: \"\",\r\n    referenceGroupToCreate: \"\",\r\n    customFont: \"\",\r\n    alignment: \"left\",\r\n    bold: false,\r\n    italic: false,\r\n    underlined: false,\r\n    stroke: false,\r\n    textTransform: \"none\",\r\n    readOnly: false,\r\n    connectToPrevious: false,\r\n    verticalAlign: \"baseline\",\r\n    customLineSpacing: \"\",\r\n    borderLeft: false,\r\n    borderRight: false,\r\n    borderTop: false,\r\n    borderBottom: false,\r\n    borderType: \"solid\",\r\n    fillingColor: \"\",\r\n    tocIndentation: \"\",\r\n    shortCutWin: \"\",\r\n    shortCutWinView: \"\",\r\n    shortCutMac: \"\",\r\n    shortCutMacView: \"\",\r\n};","const { body } = document;\r\nlet width;\r\n\r\nconst container = document.createElement('span');\r\ncontainer.innerHTML = Array(100).join('wi');\r\ncontainer.style.cssText = [\r\n    'position:absolute',\r\n    'width:auto',\r\n    'font-size:128px',\r\n    'left:-99999px'\r\n].join(' !important;');\r\n\r\nconst getWidth = fontFamily => {\r\n    container.style.fontFamily = fontFamily;\r\n\r\n    body.appendChild(container);\r\n    width = container.clientWidth;\r\n    body.removeChild(container);\r\n\r\n    return width;\r\n};\r\n\r\nconst monoWidth  = getWidth('monospace');\r\nconst serifWidth = getWidth('serif');\r\nconst sansWidth  = getWidth('sans-serif');\r\n\r\nconst isFontAvailable = font => {\r\n    return monoWidth !== getWidth(font + ',monospace') ||\r\n    sansWidth !== getWidth(font + ',sans-serif') ||\r\n    serifWidth !== getWidth(font + ',serif');\r\n};\r\n\r\nexport default isFontAvailable;","import { DEFAULT_FONT } from \"./initialFormState\";\r\nimport isFontAvailable from \"../helpers/isFontAvailable\";\r\n\r\nconst standartFonts = [\r\n    DEFAULT_FONT,\r\n    \"Source Sans Pro\",\r\n    \"Dejavu Sans\",\r\n    \"Dejavu Serif\",\r\n    \"Open Sans\",\r\n    \"Montserrat\",\r\n    \"Arial\",\r\n    \"Georgia\",\r\n    \"Verdana\",\r\n    \"Times New Roman\",\r\n];\r\n\r\nconst fontsSet = standartFonts.filter(font => (font === DEFAULT_FONT || isFontAvailable(font)));\r\n\r\nexport default fontsSet;","const rgbToHex = (r, g, b) => {\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\n\nconst prepareColorCode = color => {\n    if (!color || typeof color !== \"string\") {\n        return;\n    }\n\n    if (!/#/.test(color)) {\n        const rgbMatch = color.match(/(\\d{1,3}).*?(\\d{1,3}).*?(\\d{1,3})/);\n        if (rgbMatch.length === 4) {\n            const [, r, g, b] = rgbMatch;\n            return rgbToHex(+r, +g, +b).trim().slice(1);\n        }\n    } else {\n        return color.trim().slice(1);\n    }\n};\n\nexport default prepareColorCode;","import { GLOBAL_FALLBACK_MARK, fontsSet, lineSpacings } from \"../../constants\";\r\nimport prepareColorCode from \"../prepareColorCode\";\r\n\r\nconst DEFAULT_DECORATOR = \"Text 2000\";\r\n\r\nexport const replaceDecNameIfDefault = decName => {\r\n    if (decName === DEFAULT_DECORATOR) {\r\n        return GLOBAL_FALLBACK_MARK;\r\n    }\r\n    if (decName === GLOBAL_FALLBACK_MARK) {\r\n        return DEFAULT_DECORATOR;\r\n    }\r\n    return decName;\r\n};\r\n\r\nexport const getNumber = val => val ? +val : null;\r\n\r\nexport const getNumberString = val => typeof val === \"number\" ? `${val}` : \"\";\r\n\r\nexport const getNumeratedListPattern = (order, prefix, suffix) => {\r\n    return `${prefix || \"\"}{${order || 0}}${suffix || \"\"}`;\r\n};\r\n\r\nexport const getStyleString = (rawDec, initialState) => {\r\n    const dec = {};\r\n    // eslint-disable-next-line\r\n    for (let propName in rawDec) {\r\n        if (rawDec[propName] !== initialState[propName]) {\r\n            dec[propName] = rawDec[propName];\r\n        }\r\n    }\r\n    const styles = {};\r\n    \r\n    dec.font && (styles[\"font-family\"] = dec.customFont || dec.font);\r\n    dec.fontSize && (styles[\"font-size\"] = `${dec.fontSize}pt`);\r\n    dec.fontColor && dec.fontColor !== \"000000\" && (styles.color = `#${dec.fontColor}`);\r\n    dec.verticalAlign && (styles[\"vertical-align\"] = dec.verticalAlign);\r\n    dec.bold && (styles[\"font-weight\"] = \"bold\");\r\n    dec.italic && (styles[\"font-style\"] = \"italic\");\r\n\r\n    const textDecoration = `${dec.underlined ? \"underline\" : \"\"} ${dec.stroke ? \"line-through\" : \"\"}`.trim()\r\n    textDecoration && (styles[\"text-decoration\"] = textDecoration);\r\n\r\n    if (dec.textTransform) {\r\n        if (dec.textTransform === \"small-caps\") {\r\n            styles[\"font-variant\"] = \"small-caps\";\r\n        } else {\r\n            styles[\"text-transform\"] = dec.textTransform;\r\n        }\r\n    }\r\n\r\n    if (dec.connectToPrevious) {\r\n        styles[\"margin-top\"] = \"-1px\";\r\n        styles[\"margin-bottom\"] = \"-1px\";\r\n        styles[\"padding-top\"] = \"1px\";\r\n        styles[\"padding-bottom\"] = \"1px\";\r\n    } else {\r\n        dec.marginTop && (styles[\"margin-top\"] = `${dec.marginTop}pt`);\r\n        dec.marginBottom && (styles[\"margin-bottom\"] = `${dec.marginBottom}pt`);\r\n    }\r\n\r\n    if (dec.firstRowIndent || dec.otherRowsIndent) {\r\n        const indentsDifference = +(dec.firstRowIndent || 0) - +(dec.otherRowsIndent || 0);\r\n        if (!indentsDifference) {\r\n            styles[\"margin-left\"] = `${dec.otherRowsIndent}cm`;\r\n        } else {\r\n            styles[\"text-indent\"] = `${indentsDifference}cm`;\r\n            dec.otherRowsIndent && (styles[\"margin-left\"] = `${dec.otherRowsIndent}cm`);\r\n        }\r\n    }\r\n\r\n    if (dec.customLineSpacing !== \"1.4em\") {\r\n        styles[\"line-height\"] = dec.customLineSpacing || rawDec.lineSpacing;\r\n    }\r\n\r\n    if (dec.borderLeft || dec.borderRight || dec.borderTop || dec.borderBottom) {\r\n        const borderThickness = dec.borderThickness || initialState.borderThickness;\r\n        const borderType = dec.borderType || initialState.borderType;\r\n        const borderColor = dec.borderColor || initialState.borderColor;\r\n        const borderStyle = ` ${borderThickness}pt ${borderType} #${borderColor}`;\r\n\r\n        dec.borderLeft && (styles[\"border-left\"] = borderStyle);\r\n        dec.borderRight && (styles[\"border-right\"] = borderStyle);\r\n        dec.borderTop && (styles[\"border-top\"] = borderStyle);\r\n        dec.borderBottom && (styles[\"border-bottom\"] = borderStyle);\r\n    }\r\n    \r\n    dec.wordSpacing && (styles[\"word-spacing\"] = `${dec.wordSpacing}pt`);\r\n\r\n    dec.fillingColor && (styles[\"background-color\"] = `#${dec.fillingColor}`);\r\n\r\n    return Object.entries(styles).reduce((acc, [key, value]) => (`${acc} ${key}:${value};`), \"\").trim();\r\n};\r\n\r\nexport const getSideNumberStyleString = dec => {\r\n    const styles = {};\r\n\r\n    if (dec.font !== dec.sideNumberFont || dec.customFont !== dec.customSideNumberFont) {\r\n        styles[\"font-family\"] = dec.customSideNumberFont || dec.sideNumberFont;\r\n    }\r\n\r\n    styles[\"text-align\"] = dec.sideNumberAlignment || \"center\";\r\n    if (dec.sideNumberFontSize && dec.fontSize !== dec.sideNumberFontSize) {\r\n        styles[\"font-size\"] = `${dec.sideNumberFontSize}pt`;\r\n    }\r\n    \r\n    dec.sideNumberFontColor && (styles.color = `#${dec.sideNumberFontColor}`);\r\n    dec.sideNumberFillingColor && (styles[\"background-color\"] = `#${dec.sideNumberFillingColor}`);\r\n    dec.sideNumberWidth && (styles[\"min-width\"] = `${dec.sideNumberWidth}pt`);\r\n    dec.sideNumberLineHeight && (styles[\"line-height\"] = `${dec.sideNumberLineHeight}pt`);\r\n    dec.sideNumberRadius && (styles[\"border-radius\"] = `${dec.sideNumberRadius}pt`);\r\n    dec.sideNumberBold && (styles[\"font-weight\"] = \"bold\");\r\n    dec.sideNumberItalic && (styles[\"font-style\"] = \"italic\");\r\n    dec.sideNumberUnderlined && (styles[\"text-decoration\"] = \"underline\");\r\n\r\n    return Object.entries(styles).reduce((acc, [key, value]) => (`${acc} ${key}:${value};`), \"\").trim();\r\n};\r\n\r\nexport const getStylesObject = (stylesString = \"\", sideNumberStylesString = \"\") => {\r\n    const res = {};\r\n    if (stylesString) {\r\n        const keyValueStringsArray = stylesString.split(\";\");\r\n        if (keyValueStringsArray.length) {\r\n            const stylesArray = keyValueStringsArray.map(keyValueStr => keyValueStr.split(\":\"))\r\n                .map(([key, value]) => [(key || \"\").trim(), (value || \"\").trim()])\r\n                .filter(([key, value]) => key && value);\r\n            \r\n            if (stylesArray.length) {\r\n                const styles = stylesArray.reduce((acc, [key, value]) => ({...acc, [key]: value }), {});\r\n                \r\n                if (styles[\"font-family\"]) {\r\n                    if (fontsSet.includes(styles[\"font-family\"])) {\r\n                        res.font = styles[\"font-family\"];\r\n                    } else {\r\n                        res.font = \"custom\";\r\n                        res.customFont = styles[\"font-family\"];\r\n                    }\r\n                }\r\n\r\n                styles[\"font-size\"] && (res.fontSize = styles[\"font-size\"].slice(0, -2));\r\n                styles.color && (res.fontColor = styles.color.slice(1));\r\n                styles[\"vertical-align\"] && (res.verticalAlign = styles[\"vertical-align\"]);\r\n                \r\n                if (styles[\"font-weight\"] === \"bold\" || +styles[\"font-weight\"] >= 700) {\r\n                    res.bold = true;\r\n                }\r\n\r\n                styles[\"font-style\"] === \"italic\" && (res.italic = true);\r\n\r\n                if (styles[\"text-decoration\"]) {\r\n                    styles[\"text-decoration\"].includes(\"underline\") && (res.underlined = true);\r\n                    styles[\"text-decoration\"].includes(\"line-through\") && (res.stroke = true);\r\n                }\r\n\r\n                if (styles[\"text-transform\"] === \"lowercase\" || styles[\"text-transform\"] ===  \"uppercase\") {\r\n                    res.textTransform = styles[\"text-transform\"];\r\n                }\r\n                \r\n                styles[\"font-variant\"] === \"small-caps\" && (res.textTransform = styles[\"font-variant\"]);\r\n                \r\n                if (\r\n                    styles[\"margin-top\"] === \"-1px\" && \r\n                    styles[\"margin-bottom\"] === \"-1px\" && \r\n                    styles[\"padding-top\"] === \"1px\" && \r\n                    styles[\"padding-bottom\"] === \"1px\"\r\n                ) {\r\n                    res.connectToPrevious = true;\r\n                } else {\r\n                    styles[\"margin-top\"] && (res.marginTop = styles[\"margin-top\"].slice(0, -2));\r\n                    styles[\"margin-bottom\"] && (res.marginBottom = styles[\"margin-bottom\"].slice(0, -2));\r\n                }\r\n\r\n                if (styles[\"margin-left\"] && !styles[\"text-indent\"]) {\r\n                    res.firstRowIndent = styles[\"margin-left\"].slice(0, -2);\r\n                    res.otherRowsIndent = res.firstRowIndent;\r\n                } else if (styles[\"text-indent\"] && !styles[\"margin-left\"]) {\r\n                    res.firstRowIndent = styles[\"text-indent\"].slice(0, -2); \r\n                } else if (styles[\"margin-left\"] && styles[\"text-indent\"]) {\r\n                    const margin = +(styles[\"margin-left\"].slice(0, -2));\r\n                    const indent = +(styles[\"text-indent\"].slice(0, -2));\r\n                    res.otherRowsIndent = `${margin}`;\r\n                    res.firstRowIndent = `${margin + indent}`;\r\n                }\r\n\r\n                if (styles[\"line-height\"]) {\r\n                    if (lineSpacings.includes(styles[\"line-height\"])) {\r\n                        res.lineSpacing = styles[\"line-height\"];\r\n                    } else {\r\n                        res.lineSpacing = \"custom\";\r\n                        res.customLineSpacing = styles[\"line-height\"];\r\n                    }\r\n                }\r\n\r\n                const borderStyle = styles[\"border-top\"] \r\n                    || styles[\"border-bottom\"] \r\n                    || styles[\"border-left\"] \r\n                    || styles[\"border-right\"];\r\n\r\n                if (borderStyle) {\r\n                    const colorCodeMatch = borderStyle.match(/#[\\da-f]{6}|#[\\da-f]{3}|\\(.*?\\)/i);\r\n                    const thicknessMatch = borderStyle.match(/\\d+(?:\\.\\d+)?(?:px|pt)/i);\r\n                    const lineTypeMatch = borderStyle.match(/solid|dotted|dashed|double|groove|ridge|inset|outset/);\r\n\r\n                    if (colorCodeMatch && thicknessMatch && lineTypeMatch) {\r\n                        res.borderColor = prepareColorCode(colorCodeMatch[0]);\r\n                        res.borderThickness = thicknessMatch[0].slice(0, -2);\r\n                        res.borderType = lineTypeMatch[0];\r\n                    }\r\n\r\n                    styles[\"border-top\"] && (res.borderTop = true);\r\n                    styles[\"border-bottom\"] && (res.borderBottom = true);\r\n                    styles[\"border-left\"] && (res.borderLeft = true);\r\n                    styles[\"border-right\"] && (res.borderRight = true);\r\n                }\r\n\r\n                styles[\"word-spacing\"] && (res.wordSpacing = styles[\"word-spacing\"].slice(0, -2));\r\n                styles[\"background-color\"] && (res.fillingColor = styles[\"background-color\"].slice(1));\r\n            }\r\n        }\r\n    }\r\n\r\n    if (sideNumberStylesString) {\r\n        const keyValueStringsArray = sideNumberStylesString.split(\";\");\r\n        if (keyValueStringsArray.length) {\r\n            const stylesArray = keyValueStringsArray.map(keyValueStr => keyValueStr.split(\":\"))\r\n                .map(([key, value]) => [(key || \"\").trim(), (value || \"\").trim()])\r\n                .filter(([key, value]) => key && value);\r\n            \r\n            if (stylesArray.length) {\r\n                res.sideNumber = true;\r\n\r\n                const styles = stylesArray.reduce((acc, [key, value]) => ({...acc, [key]: value }), {});\r\n                \r\n                if (styles[\"font-family\"]) {\r\n                    if (fontsSet.includes(styles[\"font-family\"])) {\r\n                        res.sideNumberFont = styles[\"font-family\"];\r\n                    } else {\r\n                        res.sideNumberFont = \"custom\";\r\n                        res.sideNumberCustomFont = styles[\"font-family\"];\r\n                    }\r\n                } else if (res.font) {\r\n                    res.sideNumberFont = res.font;\r\n                    res.sideNumberCustomFont = res.customFont;\r\n                }\r\n\r\n                res.sideNumberAlignment = styles[\"text-align\"] || \"center\";\r\n                res.sideNumberFontSize = styles[\"font-size\"] ? styles[\"font-size\"].slice(0, -2) : \"\";\r\n                res.sideNumberFontColor = styles.color ? styles.color.slice(1) : \"\";\r\n                res.sideNumberFillingColor = styles[\"background-color\"] ? styles[\"background-color\"].slice(1) : \"\";\r\n                res.sideNumberWidth = styles[\"min-width\"] ? styles[\"min-width\"].slice(0, -2) : \"\";\r\n\r\n                styles[\"line-height\"] && (res.sideNumberLineHeight = styles[\"line-height\"].slice(0, -2));\r\n\r\n                res.sideNumberRadius = styles[\"border-radius\"] ? styles[\"border-radius\"].slice(0, -2) : \"\";\r\n\r\n                if (styles[\"font-weight\"] === \"bold\" || +styles[\"font-weight\"] >= 700) {\r\n                    res.sideNumberBold = true;\r\n                }\r\n\r\n                styles[\"font-style\"] === \"italic\" && (res.sideNumberItalic = true);\r\n                styles[\"text-decoration\"] && styles[\"text-decoration\"].includes(\"underline\") && (res.sideNumberUnderlined = true);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!res.lineSpacing && !res.customLineSpacing) {\r\n        res.lineSpacing = \"custom\";\r\n        res.customLineSpacing = \"1.4em\";\r\n    }\r\n\r\n    return res;\r\n};","const decToSendDefaultProps = {\r\n    item_type: \"style\",\r\n    style_properties: {},\r\n    keyboard_shortcut: {},\r\n    xref_target_type_group_key: null,\r\n    is_possible_xref_target: false,\r\n    show_in_editor_toc: false,\r\n    editor_toc_indentation: null,\r\n    editor_toc_filter_level: null,\r\n    list_key: null,\r\n    item_order: null,\r\n    extra_hanging_indentation: null,\r\n    extra_hanging_indentation_at_grid: false,\r\n    numerated_list_format: null,\r\n    numerated_list_start: null,\r\n    numerated_list_pattern: null,\r\n    numerated_list_style: \"\",\r\n    is_auto_restart_numbering: false,\r\n    allow_restart_numbering: false,\r\n    bullet_list_format: null,\r\n    movable: true,\r\n    content_required: false,\r\n    change_pd_on_return_if_empty: false,\r\n    pd_for_current_section_on_return_if_empty: null,\r\n    on_return_indentation: null,\r\n    item_order_allow_tab: false,\r\n};\r\n\r\nexport default decToSendDefaultProps;","import { \r\n    sectionTypesMap, \r\n    bulletNamesMap, \r\n    orderedListStylesMap,\r\n    initialFormState,\r\n} from \"../../constants\";\r\nimport {\r\n    replaceDecNameIfDefault,\r\n    getNumber,\r\n    getNumberString,\r\n    getNumeratedListPattern,\r\n    getStyleString,\r\n    getSideNumberStyleString,\r\n    getStylesObject,\r\n} from \"./converterUtils\";\r\nimport decToSendDefaultProps from \"./decToSendDefaultProps\";\r\nimport { unicodeNumberToChar, getShortCutUtils } from \"../index\";\r\n\r\nclass DecDataConverter {\r\n    static convertToSend(rawDec) {\r\n        const dec = {};\r\n        // eslint-disable-next-line\r\n        for (let key in rawDec) {\r\n            dec[key] = rawDec[key] !== \"\" ? rawDec[key] : null;\r\n        }\r\n\r\n        const res = {};\r\n        res.key = dec.decKey;\r\n        res.section_types = Object.entries(dec.sectionTypes).filter(([, value]) => value).map(([key]) => key);\r\n        res.hidden = !dec.active;\r\n        res.name = dec.name;\r\n\r\n        res.initial_indentation = getNumber(dec.indentationalLevel);\r\n        res.is_fixed_indentation = dec.fixedIndentation;\r\n        res.content_in_second_line = dec.softReturn;\r\n        res.backspace_action = dec.backspaceActionWithContent;\r\n        res.backspace_action_value = replaceDecNameIfDefault(dec.backspaceActionWithContentStyle);\r\n        res.create_new_section_on_return_if_empty = !!dec.returnActionEmptySection;\r\n        res.pd_for_new_section_on_return_if_empty = replaceDecNameIfDefault(dec.returnActionEmptySection);\r\n        res.on_return_style_key = replaceDecNameIfDefault(dec.returnActionNextSection);\r\n        res.on_tab_key = dec.tabAction;\r\n        res.on_shift_tab_key = dec.shiftTabAction;\r\n\r\n        if (dec.isList) {\r\n            res.list_key = dec.listName;\r\n            res.item_order = dec.orderLevel ? getNumber(dec.orderLevel) : null;\r\n            res.extra_hanging_indentation = dec.suffixDistance === \"0.5\" ? null : `${dec.suffixDistance}cm`;\r\n            res.extra_hanging_indentation_at_grid = dec.magicTabs;\r\n            if (dec.listType === \"ordered\") {\r\n                // for ordered list\r\n                res.numerated_list_format = dec.numberingStyle;\r\n                if (dec.patternMode) {\r\n                    // for composite numbering\r\n                    res.numerated_list_pattern = dec.listPattern;\r\n                } else {\r\n                    // for simple numbering\r\n                    res.numerated_list_pattern = getNumeratedListPattern(dec.orderLevel, dec.prefix, dec.suffix);\r\n                }\r\n                res.is_auto_restart_numbering = !dec.continueNumbering;\r\n                res.allow_restart_numbering = dec.allowRestartNumbering;\r\n                res.numerated_list_start = dec.includePreviousFrom;\r\n                res.numerated_list_style = \"styles settings\";\r\n            } else {\r\n                // for unordered list\r\n                if ((dec.listItem === \"custom\" && !dec.unicodeNumber)) {\r\n                    res.bullet_list_format = null;\r\n                } else if (dec.listItem === \"string\") {\r\n                    res.bullet_list_format = dec.listItemString;\r\n                } else {\r\n                    res.bullet_list_format = `\\\\${dec.unicodeNumber || dec.listItem}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (dec.referenceGroup) {\r\n            res.xref_target_type_group_key = dec.referenceGroup;\r\n            res.is_possible_xref_target = true;\r\n        }\r\n\r\n        if (dec.alignment && dec.alignment !== \"left\") {\r\n            res.style_properties = { alignment: dec.alignment };\r\n        }\r\n        res.read_only = dec.readOnly;\r\n\r\n        if (dec.tocIndentation) {\r\n            res.show_in_editor_toc = true;\r\n            res.editor_toc_indentation = +dec.tocIndentation;\r\n            res.editor_toc_filter_level = +dec.tocIndentation;\r\n        }\r\n\r\n        if (dec.shortCutMac) {\r\n            res.keyboard_shortcut = dec.shortCutMac;\r\n        }\r\n\r\n        res.editor_style = getStyleString(rawDec, initialFormState);\r\n        res.numerated_list_style = dec.sideNumber ? getSideNumberStyleString(rawDec) : \"\";\r\n\r\n        const unchangingProps = {\r\n            group: rawDec.group,\r\n            groupToCreate: rawDec.groupToCreate,\r\n            referenceGroup: rawDec.referenceGroup,\r\n            referenceGroupToCreate: rawDec.referenceGroupToCreate,\r\n            shortCutWin: rawDec.shortCutWin,\r\n            shortCutWinView: rawDec.shortCutWinView,\r\n        };\r\n                \r\n        console.log(\"send\", {...decToSendDefaultProps, ...res});\r\n\r\n        return { ...rawDec, ...decToSendDefaultProps, ...res,  ...unchangingProps };\r\n    }\r\n\r\n    static convertToEdit(rawDec) {\r\n        const dec = {};\r\n        // eslint-disable-next-line\r\n        for (let key in rawDec) {\r\n            dec[key] = rawDec[key] !== null ? rawDec[key] : \"\";\r\n        }\r\n\r\n        const res = {};\r\n        res.decKey = dec.key;\r\n        res.sectionTypes = Array.from(sectionTypesMap).map(([ key ]) => key).reduce((acc, cur) => ({\r\n            ...acc,\r\n            [cur]: dec.section_types.includes(cur),\r\n        }), {});\r\n        res.active = !dec.hidden;\r\n        res.name = dec.name;\r\n\r\n        res.indentationalLevel = getNumberString(dec.initial_indentation);\r\n        res.fixedIndentation = dec.is_fixed_indentation;\r\n        res.softReturn = dec.content_in_second_line;\r\n        res.backspaceActionWithContent = dec.backspace_action;\r\n        res.backspaceActionWithContentStyle = replaceDecNameIfDefault(dec.backspace_action_value);\r\n        res.returnActionNextSection = replaceDecNameIfDefault(dec.on_return_style_key);\r\n        res.returnActionEmptySection = replaceDecNameIfDefault(dec.pd_for_new_section_on_return_if_empty);\r\n        res.tabAction = dec.on_tab_key;\r\n        res.shiftTabAction = dec.on_shift_tab_key;\r\n\r\n        // res.numerated_list_format, dec.prefix, dec.suffix, dec.OrderLevel\r\n        if (dec.list_key || dec.bullet_list_format) {\r\n            res.isList = true;\r\n            res.listName = dec.list_key;\r\n            res.orderLevel = dec.item_order ? getNumberString(dec.item_order) : \"0\";\r\n            const suffixDistanceMatch = `${(dec.extra_hanging_indentation||\"0.5cm\")}`.match(/[\\d.]*/);\r\n            res.suffixDistance = suffixDistanceMatch ? suffixDistanceMatch[0] : \"0.5\";\r\n            res.magicTabs = dec.extra_hanging_indentation_at_grid;\r\n            if (dec.numerated_list_pattern) {\r\n                // for ordered list\r\n                res.listType = \"ordered\";\r\n                if (/{.*?{/.test(dec.numerated_list_pattern)) {\r\n                    // for composite numbering\r\n                    res.patternMode = true;\r\n                    res.listPattern = dec.numerated_list_pattern;\r\n                } else {\r\n                    // for simple numbering\r\n                    const prefixAndSuffixMatch = dec.numerated_list_pattern.match(/(.*?){.*}(.*)/);\r\n                    if (prefixAndSuffixMatch) {\r\n                        res.prefix = prefixAndSuffixMatch[1] || \"\";\r\n                        res.suffix = prefixAndSuffixMatch[2] || \"\";\r\n                    }\r\n                }\r\n                res.numberingStyle = orderedListStylesMap.has(dec.numerated_list_format) ? dec.numerated_list_format : \"decimal\";\r\n                res.continueNumbering = !dec.is_auto_restart_numbering;\r\n                res.allowRestartNumbering = dec.allow_restart_numbering;\r\n                res.includePreviousFrom = dec.numerated_list_start;\r\n            } else {\r\n                // for unordered list\r\n                res.listType = \"unordered\";\r\n                if ((dec.bullet_list_format || \"\").match(/^\\\\[\\da-f]+/i)) {\r\n                    const bullet = dec.bullet_list_format.slice(1);\r\n                    if (bulletNamesMap.has(bullet)) {\r\n                        res.listItem = bullet;\r\n                    } else {\r\n                        res.listItem = \"custom\";\r\n                        res.unicodeNumber = bullet;\r\n                        res.unicodeChar = unicodeNumberToChar(bullet);\r\n                    }\r\n                } else {\r\n                    // strings or empty bullets\r\n                    res.listItem = dec.bullet_list_format ? \"string\" : \"custom\";\r\n                    res.listItemString = dec.bullet_list_format;\r\n                }\r\n            }\r\n        }\r\n\r\n        res.referenceGroup = dec.xref_target_type_group_key || \"\";\r\n\r\n        if (dec.style_properties.alignment) {\r\n            res.alignment = dec.style_properties.alignment;\r\n        }\r\n        res.readOnly = !!dec.read_only;\r\n        res.tocIndentation = getNumberString(dec.editor_toc_indentation);\r\n\r\n        if ((dec.keyboard_shortcut||{}).hasOwnProperty(\"keyCode\")) {\r\n            res.shortCutMac = dec.keyboard_shortcut;\r\n            res.shortCutMacView = getShortCutUtils(\"MacOS\").convertShortcutToString(dec.keyboard_shortcut);\r\n        }\r\n\r\n        const stylesProps = getStylesObject(dec.editor_style, dec.numerated_list_style);\r\n\r\n        const unchangingProps = {\r\n            group: rawDec.group,\r\n            groupToCreate: rawDec.groupToCreate,\r\n            referenceGroup: rawDec.referenceGroup,\r\n            referenceGroupToCreate: rawDec.referenceGroupToCreate,\r\n            shortCutWin: rawDec.shortCutWin,\r\n            shortCutWinView: rawDec.shortCutWinView,\r\n        };\r\n\r\n        console.log(\"recieve\", { ...initialFormState, ...res, ...stylesProps });\r\n\r\n        return { ...rawDec, ...initialFormState, ...res, ...stylesProps, ...unchangingProps };\r\n    }\r\n\r\n    static mapDecFields = {};\r\n}\r\n\r\nexport default DecDataConverter;","import DecDataConverter from \"./DecDataConverter\";\r\nexport default DecDataConverter;","import keycode from \"keycode\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === \"MacOS\" ? \"Option\" : \"Alt\",\r\n      ctrlKey: systemName === \"MacOS\" ? \"Control\" : \"Ctrl\",\r\n      shiftKey: \"Shift\",\r\n      metaKey: \"Command\",\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = \"\";\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === \"style\") {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","import { sections } from \"../constants\";\r\n\r\nexport const checkNames = ({ name }) => !!name.en_EN;\r\nexport const checkDecKey = ({ decKey }, isEditMode) => (isEditMode || !!decKey);\r\nexport const checkListName = ({ isList, listType, listName }) => {\r\n    if (!isList || (isList && listType === \"unordered\")) {\r\n        return true;\r\n    } else {\r\n        return !!listName;\r\n    }\r\n};\r\n\r\nconst getValidationChecks = (form, isEditMode) => {\r\n    return { \r\n        namesSection: [\r\n            {\r\n                field: \"name\",\r\n                check: () => checkNames(form),\r\n            },\r\n            {\r\n                field: \"decKey\",\r\n                check: () => checkDecKey(form, isEditMode),\r\n            },\r\n        ],\r\n        listSection: [\r\n            {\r\n                field: \"listName\",\r\n                check: () => checkListName(form),\r\n            },\r\n        ],\r\n    };\r\n};\r\n\r\nexport const getErrorState = (form, isEditMode) => {\r\n    const errorState = {};\r\n    const validationChecks = getValidationChecks(form, isEditMode);\r\n    \r\n    // eslint-disable-next-line\r\n    for (let propName in validationChecks) {\r\n        const errorFields = validationChecks[propName].filter(({ check }) => !check()).map(({ field }) => field);\r\n        if (errorFields.length) {\r\n            errorState[propName] = errorFields;\r\n        }\r\n    }\r\n\r\n    return errorState;\r\n};\r\n\r\nexport const getTabNumberToSwitch = tabsErrorState => {\r\n    // eslint-disable-next-line\r\n    for (const { name, number } of sections) {\r\n        if (tabsErrorState[name]) {\r\n            return number;\r\n        }\r\n    }\r\n};","import { \r\n    numberingSets, \r\n    autoFillingRequiredFields, \r\n    DEFAULT_FONT, \r\n} from \"../constants\";\r\nimport isFontAvailable from \"./isFontAvailable\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const changeAndScroll = (changeFunction, timeOut) => (...args) => {\r\n    changeFunction(...args);\r\n    if (!timeOut) {\r\n        scrollToBottom(\"content-rightSide\");\r\n    } else {\r\n        setTimeout(() => {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }, timeOut);\r\n    }\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = (isOrderedList, numberingStyle, bullet) => (\r\n    isOrderedList ? numberingSets[numberingStyle] : Array(4).fill(bullet)\r\n);\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};\r\n\r\nexport const focusInput = (inputRef, timeout = 300) => {\r\n    setTimeout(() => {\r\n        inputRef.current.focus();\r\n    }, timeout);\r\n};\r\n\r\nexport const focusOnEmptyField = refs => {\r\n    for (let i = 0; i < refs.length; i++) {\r\n        if (!refs[i].current.value) {\r\n            focusInput(refs[i]);\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\nexport const getPreviewFont = (font, customFont) => {\r\n    if (font !== \"custom\" && isFontAvailable(font)) {\r\n        return font;\r\n    } else if (font === \"custom\" && customFont && isFontAvailable(customFont)) {\r\n        return customFont;\r\n    }\r\n    return `'${DEFAULT_FONT}', 'Roboto', sans-serif`;\r\n}\r\n\r\nexport const fillMissedFields = formState => {\r\n    const res = { ...formState };\r\n    \r\n    [\r\n        [\"font\", \"customFont\"],\r\n        [\"sideNumberFont\", \"customSideNumberFont\"], \r\n        [\"lineSpacing\", \"customLineSpacing\"],\r\n    ].forEach(([option, customOption]) => {\r\n        if (formState[option] === \"custom\" && !formState[customOption]) {\r\n            res[option] = null;\r\n        }\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    for (let fieldName in autoFillingRequiredFields) {\r\n        if (!res[fieldName]) {\r\n            res[fieldName] = autoFillingRequiredFields[fieldName];\r\n        }\r\n    }\r\n\r\n    return res;\r\n};\r\n\r\nexport const trimOnTextFieldBlur = changeFunc => e => {\r\n    if (e.target.value) {\r\n        changeFunc({ target: { value: e.target.value.trim()}});\r\n    }\r\n};","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport LabelWithAsterisk from \"./LabelWithAsterisk\";\r\nimport { focusInput } from \"../helpers\";\r\nimport { LANGS, MAIN_LANG_KEY, ADDITIONAL_LANGS } from \"../constants\";\r\n\r\nclass NewGroupDialog extends React.PureComponent {\r\n    isXref = this.props.groupType === \"xref\";\r\n\r\n    emptyGroup = {\r\n        ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}),\r\n        ...this.isXref && { groupKey: \"\" },\r\n    };\r\n\r\n    getInitialState = () => ({ ...this.emptyGroup, ...this.props.savedGroup });\r\n\r\n    state = this.getInitialState();\r\n\r\n    requiredFieldRef = React.createRef();\r\n\r\n    onInputChange = inputName => e => {\r\n        this.setState({ [inputName]: e.target.value });\r\n    };\r\n\r\n    onClose = () => {\r\n        this.setState(this.getInitialState());\r\n        this.props.hideGroupDialogValidationError();\r\n        this.props.closeGroupDialog();\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        if ((!this.isXref && this.state[MAIN_LANG_KEY].trim().length) || (this.isXref && this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: this.state[langKey].trim() }), {}),\r\n            };\r\n            if (this.isXref) {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            this.props.hideGroupDialogValidationError();\r\n            this.props.saveGroup(null, (groupToSave[MAIN_LANG_KEY] || groupToSave.groupKey), groupToSave);\r\n            this.props.closeGroupDialog();\r\n        } else {\r\n            this.props.showGroupDialogValidationError();\r\n            focusInput(this.requiredFieldRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode, hasGroupDialogValidationError } = this.props;\r\n        const { onInputChange, onGroupSave, onClose, isXref } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${isXref ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"decoratorDialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        { isXref && (\r\n                            <>\r\n                                <LabelWithAsterisk>Group Key</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state.groupKey}\r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state.groupKey}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { isXref ? (\r\n                            <>\r\n                                <span>Name EN</span>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state[MAIN_LANG_KEY]}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                            <React.Fragment key={langKey}>\r\n                                <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                                <TextField\r\n                                    value={this.state[langKey]}\r\n                                    onChange={onInputChange(langKey)} \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </React.Fragment>\r\n                        )) }                 \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isGroupDialogOpen: false,\r\n            hasGroupDialogValidationError: false,\r\n        };\r\n        \r\n        openGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: true });\r\n        };\r\n\r\n        closeGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: false });\r\n        };\r\n\r\n        showGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: true });\r\n        };\r\n\r\n        hideGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: false });\r\n        };\r\n\r\n        render() {\r\n            const { \r\n                openGroupDialog, \r\n                closeGroupDialog, \r\n                showGroupDialogValidationError, \r\n                hideGroupDialogValidationError \r\n            } = this; \r\n\r\n            return ( \r\n                <ViewComponent \r\n                    {...this.props} \r\n                    {...this.state} \r\n                    {...{ openGroupDialog, closeGroupDialog, showGroupDialogValidationError, hideGroupDialogValidationError }} \r\n                /> \r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import { getShortCutUtils } from \"../helpers\";\r\n\r\nexport const UPDATE_DEC_FORM = \"UPDATE_DEC_FORM\";\r\nexport const CLEAR_DEC_FORM = \"CLEAR_DEC_FORM\";\r\nexport const SHOW_DEC_DIALOG = \"SHOW_DEC_DIALOG\";\r\nexport const HIDE_DEC_DIALOG = \"HIDE_DEC_DIALOG\";\r\nexport const SWITCH_DEC_DIALOG_TAB = \"SWITCH_DEC_DIALOG_TAB\";\r\nexport const RESET_DEC_DIALOG_TAB = \"RESET_DEC_DIALOG_TAB\";\r\nexport const SWITCH_ON_DEC_DIALOG_EDIT_MODE = \"SWITCH_ON_DEC_DIALOG_EDIT_MOD\";\r\nexport const SWITCH_OFF_DEC_DIALOG_EDIT_MODE = \"SWITCH_OFF_DEC_DIALOG_EDIT_MODE\";\r\nexport const UPDATE_VALIDATION_ERROR = \"UPDATE_VALIDATION_ERROR\";\r\nexport const REMOVE_VALIDATION_ERROR = \"REMOVE_VALIDATION_ERROR\";\r\n\r\nexport const updateDecoratorForm = payload => {\r\n    return {\r\n        type: UPDATE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearDecoratorForm = payload => {\r\n    return {\r\n        type: CLEAR_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const showDecoratorDialog = () => {\r\n    return {\r\n        type: SHOW_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const hideDecoratorDialog = () => {\r\n    return {\r\n        type: HIDE_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const switchDecDialogTab = payload => {\r\n    return {\r\n        type: SWITCH_DEC_DIALOG_TAB,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const resetDecDialogTab = () => {\r\n    return {\r\n        type: RESET_DEC_DIALOG_TAB,\r\n    };\r\n}\r\n\r\nexport const switchOnDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const updateValidationError = payload => {\r\n    return {\r\n        type: UPDATE_VALIDATION_ERROR,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const removeValidationError = () => {\r\n    return {\r\n        type: REMOVE_VALIDATION_ERROR,\r\n    };\r\n};\r\n\r\nexport const openDialog = dispatch => dec => {\r\n    if (dec) {\r\n        dispatch(updateDecoratorForm(dec));\r\n        dispatch(switchOnDecDialogEditMode());\r\n    } \r\n    dispatch(showDecoratorDialog());\r\n};\r\n\r\nexport const closeDialog = dispatch => () => {\r\n    dispatch(hideDecoratorDialog());\r\n    dispatch(switchOffDecDialogEditMode());\r\n    dispatch(removeValidationError());\r\n    dispatch(resetDecDialogTab());\r\n    dispatch(clearDecoratorForm());\r\n};\r\n\r\nexport const setValue = dispatch => propName => (e, secondArg = \"\") => {\r\n    const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const toggleValue = dispatch => propName => (e, secondArg) => {\r\n    const newValue = e ? e.target.checked : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const setBullet = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const newBullet = input.length > 1 ? input[input.length - 1] : input;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newBullet,\r\n    }));\r\n    return newBullet;\r\n};\r\n\r\nexport const setColor = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n    \r\n    const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                          ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                          : \"\" ;\r\n    \r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setNumber = dispatch => propName => (e, secondArg) => {\r\n    let input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                          ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                          : \"\" ;\r\n\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setShortCut = dispatch => (valuePropName, viewPropName) => e => {\r\n    const systemName = valuePropName.search(/mac/gi) !== -1 ? \"MacOS\" : \"Windows\";\r\n    const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n    if (shortCut && shortCut.deleteKey) {\r\n        setTimeout(() => {\r\n            dispatch(updateDecoratorForm({ \r\n                [valuePropName]: \"\" \r\n            }));\r\n            dispatch(updateDecoratorForm({ \r\n                [viewPropName]: \"\" \r\n            }));\r\n        }, 100);\r\n    } else if (shortCut) {\r\n        dispatch(updateDecoratorForm({ \r\n            [valuePropName]: shortCut.value \r\n        }));\r\n        dispatch(updateDecoratorForm({ \r\n            [viewPropName]: shortCut.stringValue \r\n        }));\r\n    }\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { trimOnTextFieldBlur, focusInput } from \"../helpers\";\r\nimport { setValue, toggleValue, updateValidationError } from \"../actions\";\r\nimport { MAIN_LANG_KEY, ADDITIONAL_LANGS, sectionTypesMap } from \"../constants\";\r\n\r\nclass NamesSection extends React.Component {\r\n    decKeyInputRef = React.createRef();\r\n    decNameEnInputRef = React.createRef();\r\n    inputRefs = [this.decKeyInputRef, this.decNameEnInputRef];\r\n\r\n    onGroupChange = (e, groupName, group) => {\r\n        if (group) {\r\n            this.props.changeGroupToCreate(null, group);\r\n        }\r\n        this.props.changeGroup(e, groupName);\r\n    };\r\n\r\n    onNameChange = langKey => e => {\r\n        const newValue = {\r\n            ...this.props.name,\r\n            [langKey]: e.target.value,\r\n        };\r\n        this.props.changeName(null, newValue);\r\n    };\r\n\r\n    onSectionTypesChange = typeName => e => {\r\n        const newValue = {\r\n            ...this.props.sectionTypes,\r\n            [typeName]: e.target.checked,\r\n        };\r\n        this.props.changeSectionTypes(null, newValue);\r\n    };\r\n\r\n    onValidationError = () => {\r\n        const sectionErrors = this.props.sectionErrors || [];\r\n        if (sectionErrors.includes(\"decKey\")) {\r\n            focusInput(this.decKeyInputRef);\r\n        } else if (sectionErrors.includes(\"name\")) {\r\n            focusInput(this.decNameEnInputRef);\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.sectionErrors) {\r\n            this.onValidationError();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.sectionErrors && !prevprops.sectionErrors) {\r\n            this.onValidationError();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            groupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,\r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            sectionErrors,\r\n            decKey, changeDecKey,\r\n            sectionTypes,\r\n            group,\r\n            active, changeActive,\r\n            name,\r\n        } = this.props;\r\n\r\n        const newGroupName = groupToCreate[MAIN_LANG_KEY];\r\n        const isEditMode = !!newGroupName;\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n                { isEditMode ? (\r\n                    <React.Fragment>\r\n                        <span>Key</span>\r\n                        <TextField \r\n                            value={decKey}\r\n                            inputRef={this.decKeyInputRef}\r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            disabled\r\n                        />\r\n                    </React.Fragment>\r\n                ) : (\r\n                    <React.Fragment>\r\n                        <LabelWithAsterisk>Key</LabelWithAsterisk>\r\n                        <TextField \r\n                            value={decKey}\r\n                            onChange={changeDecKey}\r\n                            onBlur={trimOnTextFieldBlur(changeDecKey)}\r\n                            error={!!(sectionErrors && sectionErrors.includes(\"decKey\"))}\r\n                            inputRef={this.decKeyInputRef}\r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                        />\r\n                    </React.Fragment>\r\n                )}\r\n\r\n                <span>Section types</span>\r\n                <div className=\"checkBoxesSet\">\r\n                    { Array.from(sectionTypesMap).map(([ key, value ]) => (\r\n                        <div className=\"labeledCheckbox\" key={key}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label={value}\r\n                                labelPlacement=\"end\"\r\n                                checked={sectionTypes[key]}\r\n                                onChange={this.onSectionTypesChange(key)}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <span>Group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={group} \r\n                        onChange={this.onGroupChange}\r\n                        input={ <CustomInput /> }  \r\n                    >\r\n                        <option value=\"\">...</option>\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"0\">Text</option>\r\n                        <option value=\"1\">Heading</option>\r\n                        <option value=\"2\">Heading Heading Heading Heading</option>\r\n                    </NativeSelect>\r\n                    { !(isEditMode && group !== newGroupName) && (\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                    ) }\r\n                </div>\r\n\r\n                <span>Active</span>\r\n                <div className=\"unlabeledCheckbox\">\r\n                    <Checkbox\r\n                        checked={active}\r\n                        onChange={changeActive} \r\n                        color=\"primary\" \r\n                    />\r\n                </div>\r\n\r\n                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                <TextField \r\n                    value={name[MAIN_LANG_KEY]}\r\n                    onChange={this.onNameChange(MAIN_LANG_KEY)}\r\n                    onBlur={trimOnTextFieldBlur(this.onNameChange(MAIN_LANG_KEY))}\r\n                    error={!!(sectionErrors && sectionErrors.includes(\"name\"))}\r\n                    inputRef={this.decNameEnInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                  <React.Fragment key={langKey}>\r\n                    <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                    <TextField \r\n                        value={name[langKey]}\r\n                        onChange={this.onNameChange(langKey)}\r\n                        onBlur={trimOnTextFieldBlur(this.onNameChange(langKey))}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                    />\r\n                  </React.Fragment>  \r\n                )) }\r\n\r\n                <NewGroupDialog \r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onGroupChange}\r\n                    savedGroup={groupToCreate}\r\n                    groupType=\"decorators\"\r\n                    { ...{ \r\n                        isGroupDialogOpen,\r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return { \r\n        sectionErrors: validationError.namesSection,\r\n        formState: form,\r\n        decKey: form.decKey,\r\n        group: form.group,\r\n        active: form.active,\r\n        name: form.name,\r\n        groupToCreate: form.groupToCreate,\r\n        sectionTypes: form.sectionTypes,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeDecKey: setValue(dispatch)(\"decKey\"),\r\n        changeGroup: setValue(dispatch)(\"group\"),\r\n        changeGroupToCreate: setValue(dispatch)(\"groupToCreate\"),\r\n        changeActive: toggleValue(dispatch)(\"active\"),\r\n        changeName: setValue(dispatch)(\"name\"),\r\n        changeSectionTypes: setValue(dispatch)(\"sectionTypes\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(NamesSection)));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","import SectionTitle from \"./SectionTitle\";\r\nexport default SectionTitle;","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst SectionTitle = ({text, children}) => (\r\n    <>\r\n        <div className=\"sectionTitle\">\r\n            <span>{text || children}</span>\r\n        </div>\r\n        <div className=\"spaceHolder\"/>\r\n    </>\r\n);\r\n\r\nexport default SectionTitle;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst BackSpaceActionInput = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"175px\",\r\n      width: \"175px\",\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default BackSpaceActionInput;","import PositioningSection from \"./PositioningSection\";\r\nexport default PositioningSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport SectionTitle from \"../../common/SectionTitle\";\r\nimport { backSpaceActionsMap, decoratorsList, GLOBAL_FALLBACK_MARK } from \"../../constants\";\r\nimport BackSpaceActionInput from \"./BackSpaceActionInput\";\r\nimport { setValue, toggleValue } from \"../../actions\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst PositioningSection = props => {\r\n    const {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        fixedIndentation, changeisFixedIndentation,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    } = props;\r\n\r\n    const onBackspaceActionChange = e => {\r\n        if (e.target.value === \"apply_other_pd\") {\r\n            changeBackspaceActionWithContentStyle(null, GLOBAL_FALLBACK_MARK);\r\n        } else if (backspaceActionWithContentStyle) {\r\n            changeBackspaceActionWithContentStyle(null, \"\");\r\n        }\r\n        changeBackspaceActionWithContent(e);\r\n    };\r\n\r\n    const backSpaceActionStyleSettingsState = backspaceActionWithContent === \"apply_other_pd\" ? \"shown\" : \"hidden\";\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Indentational level</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={indentationalLevel}\r\n                    onChange={changeIndentationalLevel}\r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>Fixed indentation</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={fixedIndentation}\r\n                    onChange={changeisFixedIndentation}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n            \r\n            <SectionTitle text=\"BACKSPACE\" />\r\n\r\n            <span>At the beginning of a section with content</span>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <NativeSelect \r\n                        value={backspaceActionWithContent}\r\n                        onChange={onBackspaceActionChange}\r\n                        input={ <BackSpaceActionInput /> }\r\n                    >\r\n                        {Array.from(backSpaceActionsMap).map(([key, value]) => (\r\n                            <option value={key} key={key}>{value}</option>\r\n                        ))}\r\n                    </NativeSelect>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${backSpaceActionStyleSettingsState} wideSelectBox`}>\r\n                    <NativeSelect\r\n                        value={backspaceActionWithContentStyle}\r\n                        onChange={changeBackspaceActionWithContentStyle}\r\n                        input={ <CustomInput /> }\r\n                    >\r\n                        <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n\r\n            <SectionTitle text=\"RETURN\" />\r\n\r\n\r\n            <span>Style of next section</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={returnActionNextSection}\r\n                    onChange={changeReturnActionNextSection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n\r\n            <span>PD for new section on return if empty</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect \r\n                    value={returnActionEmptySection}\r\n                    onChange={changeReturnActionEmptySection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <SectionTitle text=\"TAB / SHIFT+TAB\" />\r\n\r\n            <span>TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={tabAction}\r\n                    onChange={changeTabAction}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>SHIFT+TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={shiftTabAction}\r\n                    onChange={changeShiftTabAction} \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        indentationalLevel: form.indentationalLevel,\r\n        backspaceActionWithContent: form.backspaceActionWithContent,\r\n        backspaceActionWithContentStyle: form.backspaceActionWithContentStyle,\r\n        returnActionNextSection: form.returnActionNextSection,\r\n        returnActionEmptySection: form.returnActionEmptySection,\r\n        tabAction: form.tabAction,\r\n        shiftTabAction: form.shiftTabAction,\r\n        fixedIndentation: form.fixedIndentation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeIndentationalLevel: setValue(dispatch)(\"indentationalLevel\"),\r\n        changeBackspaceActionWithContent: setValue(dispatch)(\"backspaceActionWithContent\"),\r\n        changeBackspaceActionWithContentStyle: setValue(dispatch)(\"backspaceActionWithContentStyle\"),\r\n        changeBackspaceActionWithoutContent: setValue(dispatch)(\"backspaceActionWithoutContent\"),\r\n        changeBackspaceActionWithoutContentStyle: setValue(dispatch)(\"backspaceActionWithoutContentStyle\"),\r\n        changeReturnActionNextSection: setValue(dispatch)(\"returnActionNextSection\"),\r\n        changeReturnActionEmptySection: setValue(dispatch)(\"returnActionEmptySection\"),\r\n        changeTabAction: setValue(dispatch)(\"tabAction\"),\r\n        changeShiftTabAction: setValue(dispatch)(\"shiftTabAction\"),\r\n        changeisFixedIndentation: toggleValue(dispatch)(\"fixedIndentation\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(PositioningSection));","import { getOffset, getCorrectColor, getPreviewFont } from \"../../helpers\";\r\nimport { alignmentList, DEFAULT_FONT_SIZE, DEFAULT_LINE_SPACING } from \"../../constants\";\r\n\r\nexport const generatePreviewStyle = formState => {\r\n    const {\r\n        font,\r\n        customFont,\r\n        alignment,\r\n        fontSize,\r\n        fontColor,\r\n        bold,\r\n        italic,\r\n        underlined,\r\n        stroke,\r\n        textTransform,\r\n        verticalAlign,\r\n        marginTop,\r\n        marginBottom,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        customLineSpacing,\r\n        wordSpacing,\r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderType,\r\n        borderColor,\r\n        borderThickness,\r\n        fillingColor,\r\n        fillingConnectToPrevious,\r\n        connectToPrevious,\r\n    } = formState;\r\n    \r\n    const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n    const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n    const previewAdditionalFillingColor = fillingConnectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n    const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n    const previewMarginLeft = `${!otherRowsIndent ? 0 : (otherRowsIndent >= 6 ? 6 : otherRowsIndent)}cm`;\r\n    const previewTextIndent = `${!indentsDifference ? 0 : (indentsDifference >= 6 ? 6 : indentsDifference)}cm`;\r\n    const previewLineSpacing = lineSpacing !== \"custom\" ? lineSpacing : (customLineSpacing || DEFAULT_LINE_SPACING);\r\n    const offset = getOffset(verticalAlign, fontSize);\r\n    const previewMarginTop = `${(!connectToPrevious ? parseFloat(marginTop) : 0) + offset}pt`;\r\n    const previewMarginBottom = `${(!connectToPrevious ? parseFloat(marginBottom) : 0) - offset}pt`;\r\n    const previewBorderLeft = borderLeft ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderRight = borderRight ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderTop = borderTop ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderBottom = borderBottom ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const correctFontSize = fontSize <= 120 ? fontSize : 120;\r\n    const previewStyle = {\r\n        fontSize: !fontSize ? `${DEFAULT_FONT_SIZE}pt` : `${correctFontSize}pt`,\r\n        color: `#${previewFontColor}`,\r\n        fontFamily: getPreviewFont(font, customFont),\r\n        alignItems: alignmentList[alignment],\r\n        textAlign: alignment,\r\n        fontWeight: bold ? \"bold\" : \"normal\",\r\n        fontStyle: italic ? \"italic\" : \"normal\",\r\n        textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n        verticalAlign,\r\n        textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n        fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n        backgroundColor: `#${previewFillingColor}`,\r\n        backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        borderImage: `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        marginLeft: previewMarginLeft,\r\n        textIndent: previewTextIndent,\r\n        wordSpacing: `${wordSpacing || 0}pt`,\r\n        lineHeight: previewLineSpacing,\r\n        marginTop: previewMarginTop,\r\n        marginBottom: previewMarginBottom,\r\n        borderLeft: previewBorderLeft,\r\n        borderRight: previewBorderRight,\r\n        borderTop: previewBorderTop,\r\n        borderBottom: previewBorderBottom,\r\n        outline: \"none\",\r\n        ...borderLeft && { paddingLeft: `${correctFontSize / 3}pt`},\r\n        ...borderRight && { paddingRight: `${correctFontSize / 3}pt`},\r\n        ...borderTop && { paddingTop: `${correctFontSize / 3}pt`},\r\n        ...borderBottom && { paddingBottom: `${correctFontSize / 3}pt`},\r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport const generateSideNumberStyle = formState => {\r\n    const { \r\n        listType,\r\n        suffixDistance,\r\n        sideNumber,\r\n        sideNumberFont,\r\n        customSideNumberFont,\r\n        sideNumberAlignment,\r\n        sideNumberFontSize,\r\n        sideNumberFontColor,\r\n        sideNumberFillingColor,\r\n        sideNumberWidth,\r\n        sideNumberRadius,\r\n        sideNumberBold,\r\n        sideNumberItalic,\r\n        sideNumberUnderlined,\r\n        sideNumberLineHeight,\r\n        fontSize,\r\n        fontColor,\r\n        fillingColor,\r\n    } = formState;\r\n\r\n    const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, getCorrectColor(fontColor ,\"000\"));\r\n    const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, getCorrectColor(fillingColor ,\"f5f5f5\"));\r\n    const fontSizeNumber = +(sideNumberFontSize || fontSize || DEFAULT_FONT_SIZE);\r\n    const previewFontSize = `${fontSizeNumber <= 120 ? fontSizeNumber : 120}pt`;\r\n\r\n\r\n    const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n        fontFamily: getPreviewFont(sideNumberFont, customSideNumberFont),\r\n        textAlign: sideNumberAlignment,\r\n        fontSize: previewFontSize,\r\n        color: `#${previewSideNumberFontColor}`,\r\n        backgroundColor: `#${previewSideNumberFillingColor}`,\r\n        minWidth: `${!sideNumberWidth ? 0 : (+sideNumberWidth < 150 ? sideNumberWidth : 150)}pt`,\r\n        borderRadius: `${sideNumberRadius || 0}pt`,\r\n        fontWeight: sideNumberBold ? \"bold\" : \"normal\",\r\n        fontStyle: sideNumberItalic ? \"italic\" : \"normal\",\r\n        textDecoration: sideNumberUnderlined ? \"underline\" : \"none\",\r\n        ...sideNumberLineHeight && { lineHeight: `${sideNumberLineHeight}pt`},\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n    };\r\n\r\n    return sideNumberStyle;\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { generatePreviewStyle, generateSideNumberStyle } from \"./generators\";\r\nimport { getListChars } from \"../../helpers\";\r\nimport { bulletNamesMap } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = props => {\r\n    const { \r\n        formState,\r\n        prefix, \r\n        suffix, \r\n        suffixDistance,\r\n        listType,\r\n        listItem, \r\n        unicodeChar,\r\n        listItemString,\r\n        numberingStyle,\r\n        sideNumber,\r\n        patternMode,\r\n    } = props;\r\n\r\n    const isOrderedList = listType === \"ordered\";\r\n\r\n    let currentBullet;\r\n\r\n    if (listItem === \"custom\") {\r\n        currentBullet = unicodeChar;\r\n    } else if (listItem === \"string\") {\r\n        currentBullet = listItemString;\r\n    } else {\r\n        currentBullet = bulletNamesMap.get(listItem);\r\n    }\r\n\r\n    const listChars = getListChars(isOrderedList, numberingStyle, currentBullet);\r\n\r\n    let listItemBeginnings = (listType === \"ordered\" && patternMode) ? listChars : listChars.map(li => (`${prefix}${li}${suffix}`));\r\n\r\n    const previewStyle = generatePreviewStyle(formState);\r\n    const isSideNumber = isOrderedList && sideNumber;\r\n    const sideNumberStyle = isSideNumber ? generateSideNumberStyle(formState) : {};\r\n    const listItemBeginningStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className=\"demonstrationElement\">\r\n                    <div\r\n                        className=\"demonstrationElement-text\"\r\n                        style={previewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                        { isSideNumber && (\r\n                            <>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[3]}`}</span><span>One more list item</span>\r\n                                </div>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[4]}`}</span><span>And one more</span>\r\n                                </div>\r\n                            </>\r\n                        ) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n        prefix: form.prefix, \r\n        suffix: form.suffix,\r\n        patternMode: form.patternMode,\r\n        suffixDistance: form.suffixDistance,\r\n        listType: form.listType,\r\n        listItem: form.listItem, \r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        sideNumber: form.sideNumber,\r\n        listItemString: form.listItemString,\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps)(ListPreview));","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.PureComponent {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, defaultColorCode, required, bottomAligned } = this.props;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n        const colorPickerClassName = `colorPicker${ bottomAligned ? \" colorPicker_bottomAligned\" : \"\"}`;\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        if (defaultColorCode) {\r\n                            selectAllOnClick(defaultColorCode)(e);\r\n                        }\r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={this.showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className={colorPickerClassName}>\r\n                        <div className=\"colorPicker-chromeBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={this.colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={this.hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport CustomInput from \"./CustomInput\";\r\nimport { focusInput, changeAndScroll } from \"../helpers\";\r\nimport fontsSet from \"../constants/fontsSet\";\r\n\r\nclass FontSelectFields extends React.PureComponent {\r\n    customFontInputRef = React.createRef();\r\n\r\n    onFontChange = e => {\r\n        this.props.changeFont(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customFontInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { font, customFont, changeCustomFont } = this.props;\r\n        const optionalFieldState = font === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        return (\r\n            <>\r\n                <span >Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeAndScroll(this.onFontChange, 500)}\r\n                >\r\n                    { fontsSet.map(fontName => <option value={fontName} key={fontName}>{fontName}</option>) }\r\n                    <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                </NativeSelect>\r\n    \r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <span></span>\r\n                </div>\r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <TextField \r\n                        value={customFont}\r\n                        onChange={changeCustomFont}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        placeholder=\"Enter the font name\"\r\n                        inputRef={this.customFontInputRef}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FontSelectFields;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport ListPreview from \"../../common/Preview/ListPreview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport LabelWithAsterisk from \"../../common/LabelWithAsterisk\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport { \r\n    orderedListStylesMap, \r\n    bulletNamesMap, \r\n    DEFAULT_FONT_SIZE,\r\n    DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    DEFAULT_SIDE_NUMBER_WIDTH,\r\n    DEFAULT_SIDE_NUMBER_RADIUS,\r\n } from \"../../constants\";\r\nimport { \r\n    updateValidationError,\r\n    setValue,\r\n    toggleValue,\r\n    setNumber,\r\n    setColor,\r\n    setBullet,\r\n} from \"../../actions\";\r\nimport { \r\n    selectAllOnClick, \r\n    changeAndScroll,\r\n    scrollToBottom,\r\n    focusInput,\r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber,\r\n    trimOnTextFieldBlur,\r\n} from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ListSection extends React.Component {\r\n    listNameInputRef = React.createRef();\r\n    unicodeCharInputRef = React.createRef();\r\n\r\n    onIsListChange = e => {\r\n        const { listName } = this.props;\r\n        this.props.changeIsList(e);\r\n\r\n        if (e.target.checked && !listName) {\r\n            focusInput(this.listNameInputRef);\r\n        }       \r\n    };\r\n\r\n    onListTypeChange = e => {\r\n        const { suffix, listName, orderLevel } = this.props;\r\n        const { value } = e.target;\r\n\r\n        if (value === \"ordered\" && !orderLevel) {\r\n            this.props.changeOrderLevel(null, \"0\")\r\n        }\r\n\r\n        this.props.changeListType(null, value);\r\n\r\n        if (value === \"ordered\" && !listName) {\r\n            focusInput(this.listNameInputRef);\r\n        } else {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }\r\n        if (value === \"ordered\" && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        } else if (value === \"unordered\" && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        }\r\n    };\r\n\r\n    onListItemChange = e => {\r\n        this.props.changeListItem(e);\r\n        if (e.target.value === \"custom\" && !this.props.unicodeChar) {\r\n            focusInput(this.unicodeCharInputRef);\r\n        }\r\n    };\r\n\r\n    onUnicodeNumberChange = e => {\r\n        const newUnicodeNumber = this.props.changeUnicodeNumber(e);\r\n        const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n        this.props.changeUnicodeChar(null, newUnicodeChar);\r\n    };\r\n    \r\n    onUnicodeCharChange = e => {\r\n        const newUnicodeChar = this.props.changeUnicodeChar(e);\r\n        const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n        this.props.changeUnicodeNumber(null, newUnicodeNumber);\r\n    };\r\n\r\n    onSideNumberChange = e => {\r\n        const { suffix } = this.props;\r\n        this.props.changeSideNumber(e);\r\n        if (e.target.checked && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        } else if (!e.target.checked && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.sectionErrors) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.sectionErrors && !prevprops.sectionErrors) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            sectionErrors,\r\n            listPreviewProps,\r\n            isList,\r\n            listName, changeListName,\r\n            orderLevel, changeOrderLevel,\r\n            patternMode, changePatternMode,\r\n            listPattern, changeListPattern,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listType,\r\n            listItem,\r\n            unicodeNumber,\r\n            unicodeChar,\r\n            listItemString, changeListItemString,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changeIncludePreviousFrom,\r\n            softReturn, changeSoftReturn,\r\n            sideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            customSideNumberFont, changeCustomSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberWidth, changeSideNumberWidth,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n            sideNumberBold, changeSideNumberBold,\r\n            sideNumberItalic, changeSideNumberItalic,\r\n            sideNumberUnderlined, changeSideNumberUnderlined,\r\n            sideNumberLineHeight, changeSideNumberLineHeight,\r\n        } = this.props;\r\n        \r\n        const mainListSettingsState = isList ? \"shown\" : \"hidden\";\r\n        const unorderedListSettingsState = (isList && listType === \"unordered\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState = (isList && listType === \"unordered\" && listItem === \"custom\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState2 = (isList && listType === \"unordered\" && listItem === \"string\") ? \"shown\" : \"hidden\";\r\n        const orderedListSettingsState = (isList && listType === \"ordered\") ? \"shown\" : \"hidden\";\r\n        const sideNumberSettingsState = (isList && listType === \"ordered\" && sideNumber) ? \"shown\" : \"hidden\";\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"dialogGrid dialogGrid_2cols\">\r\n                    <div>\r\n                        <div>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                                <div className=\"listItemSpan\">\r\n                                    <span>Is it a list?</span>\r\n                                </div>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={isList} \r\n                                        onChange={this.onIsListChange} \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${mainListSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth optionalSettings\">\r\n                                    { listType === \"unordered\" ? (\r\n                                        <span>List name</span>\r\n                                    ) : (\r\n                                        <LabelWithAsterisk>List name</LabelWithAsterisk>\r\n                                    )}\r\n                                    <TextField\r\n                                        value={listName}\r\n                                        onChange={changeListName}\r\n                                        onBlur={trimOnTextFieldBlur(changeListName)}\r\n                                        error={!!(sectionErrors && sectionErrors.includes(\"listName\"))}\r\n                                        inputRef={this.listNameInputRef}\r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Order level</span>\r\n                                    <div>\r\n                                        <NativeSelect\r\n                                            value={orderLevel}\r\n                                            onChange={changeOrderLevel}\r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            { listType !== \"ordered\" && (<option value=\"\">...</option>)}\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                    </div>\r\n\r\n                                    <span>Suffix distance</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <NativeSelect\r\n                                            value={suffixDistance}\r\n                                            onChange={changeSuffixDistance} \r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"0.25\">0.25</option>\r\n                                            <option value=\"0.5\">0.5</option>\r\n                                            <option value=\"0.75\">0.75</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"1.25\">1.25</option>\r\n                                            <option value=\"1.5\">1.5</option>\r\n                                            <option value=\"1.75\">1.75</option>\r\n                                            <option value=\"2\">2</option>\r\n                                        </NativeSelect>\r\n                                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                                    </div>\r\n    \r\n                                    <span>Magic Tabs</span>\r\n                                    <div className=\"unlabeledCheckbox\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={magicTabs} \r\n                                            onChange={changeMagicTabs} \r\n                                        />\r\n                                    </div>\r\n    \r\n                                    <span>Type of list</span>\r\n                                    <RadioGroup \r\n                                        value={listType} \r\n                                        onChange={this.onListTypeChange}\r\n                                        row\r\n                                    >\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"unordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Unordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"ordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Ordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                    </RadioGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${orderedListSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {Array.from(orderedListStylesMap).map(([key, value]) => (\r\n                                            <option value={key} key={key}>{value}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changeIncludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                \r\n                                <span>Advanced list pattern settings</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Switch\r\n                                        checked={patternMode}\r\n                                        onChange={changePatternMode}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                { !patternMode ? (\r\n                                    <>\r\n                                        <span>Prefix</span>\r\n                                        <TextField\r\n                                            value={prefix}\r\n                                            onChange={changePrefix} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                        />\r\n        \r\n                                        <span>Suffix</span>\r\n                                        <TextField\r\n                                            value={suffix}\r\n                                            onChange={changeSuffix} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            onClick={selectAllOnClick(\".\")}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <span>Ordered list pattern</span>\r\n                                        <TextField\r\n                                            value={listPattern}\r\n                                            onChange={changeListPattern} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            onClick={selectAllOnClick(\".\")}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                                \r\n                                <span>Soft return</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox \r\n                                        checked={softReturn}\r\n                                        onChange={changeSoftReturn}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Side number</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={changeAndScroll(this.onSideNumberChange)}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                { (patternMode && !sideNumber) && (<div />)}\r\n                            </div> \r\n    \r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${sideNumberSettingsState}`}>\r\n                                <div className=\"flexibleGrid listTypeSettings\">\r\n                                    <FontSelectFields \r\n                                        font={sideNumberFont}\r\n                                        changeFont={changeSideNumberFont}\r\n                                        customFont={customSideNumberFont}\r\n                                        changeCustomFont={changeCustomSideNumberFont}\r\n                                    />\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFontColor} \r\n                                        changeColorCode={changeSideNumberFontColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FONT_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFillingColor} \r\n                                        changeColorCode={changeSideNumberFillingColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FILLING_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n    \r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_WIDTH)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span>Line height</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberLineHeight}\r\n                                            onChange={changeSideNumberLineHeight}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>  \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_RADIUS)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span className=\"stylingsSpan\">Stylings</span>\r\n                                    <div className=\"checkBoxesSet\">\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberBold}\r\n                                                onChange={changeSideNumberBold}\r\n                                                label=\"Bold\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberItalic}\r\n                                                onChange={changeSideNumberItalic}\r\n                                                label=\"Italic\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                label=\"Underlined\"\r\n                                                labelPlacement=\"end\"\r\n                                                checked={sideNumberUnderlined}\r\n                                                onChange={changeSideNumberUnderlined}\r\n                                            />\r\n                                        </div>\r\n                                    </div>  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className={`listPreviewBox optionalSettings optionalSettings_${mainListSettingsState}`}>\r\n                        <ListPreview {...listPreviewProps} />\r\n                    </div>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${unorderedListSettingsState}`}>\r\n                    <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listItemSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={this.onListItemChange} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Array.from(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"custom\"} className=\"highlightedOption\">Custom bullet</option>\r\n                                    <option value={\"string\"} className=\"highlightedOption\">Custom string</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={`optionalSettings optionalSettings_${customListItemSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Unicode number</span>\r\n                                        <div>\r\n                                            <TextField  \r\n                                                value={unicodeNumber}\r\n                                                onChange={this.onUnicodeNumberChange}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"unicodeInput\" \r\n                                                InputProps={{\r\n                                                    startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Symbol</span>\r\n                                        <div>\r\n                                            <TextField \r\n                                                value={unicodeChar}\r\n                                                onChange={this.onUnicodeCharChange}\r\n                                                onClick={selectAllOnClick()}\r\n                                                inputRef={this.unicodeCharInputRef}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"bulletInput\" \r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div> \r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_${customListItemSettingsState2}`}>\r\n                                <div className=\"listItemCustomString\">\r\n                                    <div className=\"dialogGrid dialogGrid_1col dialogGrid_leftIndented\">\r\n                                        <TextField\r\n                                            value={listItemString}\r\n                                            onChange={changeListItemString}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return {\r\n        sectionErrors: validationError.listSection,\r\n        formState: form,\r\n        isList: form.isList,\r\n        listName: form.listName, \r\n        orderLevel: form.orderLevel,\r\n        suffixDistance: form.suffixDistance,\r\n        magicTabs: form.magicTabs,\r\n        listType: form.listType,\r\n        listItem: form.listItem,\r\n        unicodeNumber: form.unicodeNumber,\r\n        unicodeChar: form.unicodeChar,\r\n        listItemString: form.listItemString,\r\n        numberingStyle: form.numberingStyle,\r\n        continueNumbering: form.continueNumbering,\r\n        allowRestartNumbering: form.allowRestartNumbering,\r\n        includePreviousFrom: form.includePreviousFrom,\r\n        patternMode: form.patternMode,\r\n        listPattern: form.listPattern,\r\n        prefix: form.prefix,\r\n        suffix: form.suffix,\r\n        softReturn: form.softReturn,\r\n        sideNumber: form.sideNumber,\r\n        sideNumberFont: form.sideNumberFont,\r\n        customSideNumberFont: form.customSideNumberFont,\r\n        sideNumberAlignment: form.sideNumberAlignment,\r\n        sideNumberFontSize: form.sideNumberFontSize,\r\n        sideNumberFontColor: form.sideNumberFontColor,\r\n        sideNumberFillingColor: form.sideNumberFillingColor,\r\n        sideNumberWidth: form.sideNumberWidth,\r\n        sideNumberRadius: form.sideNumberRadius,\r\n        sideNumberBold: form.sideNumberBold,\r\n        sideNumberItalic: form.sideNumberItalic,\r\n        sideNumberUnderlined: form.sideNumberUnderlined,\r\n        sideNumberLineHeight: form.sideNumberLineHeight,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeListName: setValue(dispatch)(\"listName\"),\r\n        changeIsList: toggleValue(dispatch)(\"isList\"),\r\n        changeOrderLevel: setValue(dispatch)(\"orderLevel\"),\r\n        changeSuffixDistance: setValue(dispatch)(\"suffixDistance\"),\r\n        changeMagicTabs: toggleValue(dispatch)(\"magicTabs\"),\r\n        changeListType: setValue(dispatch)(\"listType\"),\r\n        changeListItem: setValue(dispatch)(\"listItem\"),\r\n        changeUnicodeNumber: setColor(dispatch)(\"unicodeNumber\"),\r\n        changeUnicodeChar: setBullet(dispatch)(\"unicodeChar\"),\r\n        changeListItemString: setValue(dispatch)(\"listItemString\"),\r\n        changeNumberingStyle: setValue(dispatch)(\"numberingStyle\"),\r\n        changeContinueNumbering: toggleValue(dispatch)(\"continueNumbering\"),\r\n        changeAllowRestartNumbering: toggleValue(dispatch)(\"allowRestartNumbering\"),\r\n        changeIncludePreviousFrom: setValue(dispatch)(\"includePreviousFrom\"),\r\n        changeListPattern: setValue(dispatch)(\"listPattern\"),\r\n        changePrefix: setValue(dispatch)(\"prefix\"),\r\n        changeSuffix: setValue(dispatch)(\"suffix\"),\r\n        changePatternMode: toggleValue(dispatch)(\"patternMode\"),\r\n        changeSoftReturn: toggleValue(dispatch)(\"softReturn\"),\r\n        changeSideNumber: toggleValue(dispatch)(\"sideNumber\"),\r\n        changeSideNumberFont: setValue(dispatch)(\"sideNumberFont\"),\r\n        changeCustomSideNumberFont: setValue(dispatch)(\"customSideNumberFont\"),\r\n        changeSideNumberAlignment: setValue(dispatch)(\"sideNumberAlignment\"),\r\n        changeSideNumberFontSize: setNumber(dispatch)(\"sideNumberFontSize\"),\r\n        changeSideNumberFontColor: setColor(dispatch)(\"sideNumberFontColor\"),\r\n        changeSideNumberFillingColor: setColor(dispatch)(\"sideNumberFillingColor\"),\r\n        changeSideNumberWidth: setNumber(dispatch)(\"sideNumberWidth\"),\r\n        changeSideNumberRadius: setNumber(dispatch)(\"sideNumberRadius\"),\r\n        changeSideNumberBold: toggleValue(dispatch)(\"sideNumberBold\"),\r\n        changeSideNumberItalic: toggleValue(dispatch)(\"sideNumberItalic\"),\r\n        changeSideNumberUnderlined: toggleValue(dispatch)(\"sideNumberUnderlined\"),\r\n        changeSideNumberLineHeight: setNumber(dispatch)(\"sideNumberLineHeight\"),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListSection);","import ListSection from \"./ListSection\";\r\nexport default ListSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { setValue } from \"../actions\";\r\nimport { MAIN_LANG_KEY } from \"../constants\";\r\n\r\nclass ReferencingSection extends React.Component {\r\n    onXrefChange = (e, xrefName, xref) => {\r\n        if (xref) {\r\n            this.props.changeReferenceGroupToCreate(null, xref);\r\n        }\r\n        this.props.changeReferenceGroup(e, xrefName);\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            referenceGroupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,  \r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            referenceGroup,\r\n        } = this.props;\r\n        \r\n        const newGroupName = referenceGroupToCreate[MAIN_LANG_KEY] || referenceGroupToCreate.groupKey;\r\n        const isEditMode = !!newGroupName;\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Reference group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInput /> } \r\n                        value={referenceGroup} \r\n                        onChange={this.onXrefChange} \r\n                    >\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"\">none</option>\r\n                        <option value=\"0\">Reference group 1</option>\r\n                        <option value=\"1\">Reference group 2</option>\r\n                    </NativeSelect>\r\n                    {\r\n                        !(isEditMode && referenceGroup !== newGroupName) &&\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                     }\r\n                </div>\r\n                <NewGroupDialog\r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onXrefChange}\r\n                    savedGroup={referenceGroupToCreate}\r\n                    groupType=\"xref\" \r\n                    { ...{ \r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        referenceGroup: form.referenceGroup,\r\n        referenceGroupToCreate: form.referenceGroupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeReferenceGroup: setValue(dispatch)(\"referenceGroup\"),\r\n        changeReferenceGroupToCreate: setValue(dispatch)(\"referenceGroupToCreate\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(ReferencingSection)));","import * as React from \"react\";\r\nimport deepEqual from \"fast-deep-equal\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \");\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === \"function\" ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== \"function\" ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || \"table\", Object.assign({}, props, { ref: typeof innerRef === \"function\" ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContentEditable from \"../ContentEditable\";\r\nimport { generatePreviewStyle } from \"./generators\";\r\nimport { setValue } from \"../../actions\";\r\nimport { selectAllEditableContent, getUnstyledText } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nclass Preview extends React.Component {\r\n    onPreviewTextChange = e => {\r\n        const { value } = e.target;\r\n        if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n            this.props.changePreviewText(null, getUnstyledText(value));\r\n        } else {\r\n            this.props.changePreviewText(null, `<div><br></div>`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const previewStyle = generatePreviewStyle(this.props.formState);\r\n        const { previewText } = this.props;\r\n    \r\n        return (\r\n            <div className=\"preview\">\r\n                <span className=\"preview-title\">Preview</span>\r\n                <div \r\n                    className=\"preview-content preview-content_withPointer\" \r\n                    onClick={selectAllEditableContent(\"demonstrationElement\")}\r\n                >\r\n                    <div className=\"demonstrationElement\">\r\n                        <ContentEditable\r\n                            className=\"demonstrationElement-text\"\r\n                            onChange={this.onPreviewTextChange} \r\n                            html={previewText}\r\n                            style={previewStyle}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changePreviewText: setValue(dispatch)(\"previewText\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(Preview));","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport Preview from \"../../common/Preview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport {  setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { DEFAULT_FONT_SIZE, DEFAULT_FONT_COLOR } from \"../../constants\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = props => {\r\n    const { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign,\r\n        readOnly, changeReadOnly,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"flexibleGrid\">\r\n                <FontSelectFields { ...{ font, changeFont, customFont, changeCustomFont }} />\r\n                \r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    defaultColorCode={DEFAULT_FONT_COLOR}\r\n                    required\r\n                />\r\n\r\n                <span>Sub/Superscript</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={verticalAlign} \r\n                        onChange={changeVerticalAlign}\r\n                        input={ <CustomInput /> } \r\n                    >\r\n                        <option value=\"baseline\">None</option>\r\n                        <option value=\"sub\">Subscript</option>\r\n                        <option value=\"super\">Superscript</option>\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_topIndented\">\r\n            <span className=\"stylingsSpan\">Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Read only</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={readOnly}\r\n                    onChange={changeReadOnly}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        font: form.font,\r\n        customFont: form.customFont,\r\n        alignment: form.alignment,\r\n        fontSize: form.fontSize,\r\n        fontColor: form.fontColor,\r\n        bold: form.bold,\r\n        italic: form.italic,\r\n        underlined: form.underlined,\r\n        stroke: form.stroke,\r\n        textTransform: form.textTransform,\r\n        verticalAlign: form.verticalAlign,\r\n        readOnly: form.readOnly,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeFont: setValue(dispatch)(\"font\"),\r\n        changeCustomFont: setValue(dispatch)(\"customFont\"),\r\n        changeAlignment: setValue(dispatch)(\"alignment\"),\r\n        changeFontSize: setNumber(dispatch)(\"fontSize\"),\r\n        changeFontColor: setColor(dispatch)(\"fontColor\"),\r\n        changeBold: toggleValue(dispatch)(\"bold\"),\r\n        changeItalic: toggleValue(dispatch)(\"italic\"),\r\n        changeUnderlined: toggleValue(dispatch)(\"underlined\"),\r\n        changeStroke: toggleValue(dispatch)(\"stroke\"),\r\n        changeTextTransform: setValue(dispatch)(\"textTransform\"),\r\n        changeVerticalAlign: setValue(dispatch)(\"verticalAlign\"),\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeReadOnly: toggleValue(dispatch)(\"readOnly\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TypographySection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { toggleValue } from \"../actions\";\r\n\r\nconst ConnectToPreviousField = ({ connectToPrevious, changeConnectToPrevious }) => (\r\n    <>\r\n        <span>Merge sections</span>\r\n        <div className=\"unlabeledCheckbox\">\r\n            <Checkbox \r\n                checked={connectToPrevious}\r\n                onChange={changeConnectToPrevious}\r\n                color=\"primary\" \r\n            />\r\n        </div>\r\n    </>\r\n);\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeConnectToPrevious: toggleValue(dispatch)(\"connectToPrevious\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ConnectToPreviousField));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport Preview from \"../common/Preview\";\r\nimport { setValue, setNumber } from \"../actions\";\r\nimport { DEFAULT_MARGIN, DEFAULT_WORD_SPACING, lineSpacings } from \"../constants\";\r\nimport { selectAllOnClick, focusInput, changeAndScroll } from \"../helpers\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\n\r\nclass DistancesSection extends React.Component {\r\n    customLineSpacingInputRef = React.createRef();\r\n\r\n    onLineSpacingChange = e => {\r\n        this.props.changeLineSpacing(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customLineSpacingInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            previewProps,\r\n            connectToPrevious,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            firstRowIndent, changeFirstRowIndent,\r\n            otherRowsIndent, changeOtherRowsIndent,\r\n            lineSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n            wordSpacing, changeWordSpacing,\r\n        } = this.props;\r\n\r\n        const customLineSpacingFieldState = lineSpacing === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        const marginFieldsState = !connectToPrevious ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div className=\"flexibleGrid\">\r\n                    <ConnectToPreviousField />\r\n                    <div className={`optionalField optionalField ${marginFieldsState}`}>\r\n                      <span>Margin top</span>\r\n                    </div>\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginTop}\r\n                            onChange={changeMarginTop}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <div className={`optionalField ${marginFieldsState}`}>\r\n                        <span>Margin bottom</span>\r\n                    </div>\r\n\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginBottom}\r\n                            onChange={changeMarginBottom}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <span>1st row indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={firstRowIndent}\r\n                            onChange={changeFirstRowIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Other rows indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={otherRowsIndent}\r\n                            onChange={changeOtherRowsIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Line spacing</span>\r\n                    <div>\r\n                        <NativeSelect \r\n                            input={ <CustomInputShort /> } \r\n                            value={lineSpacing} \r\n                            onChange={changeAndScroll(this.onLineSpacingChange, 500)} \r\n                        >   \r\n                            { lineSpacings.map(value => (\r\n                                <option value={value} key={value}>{value}</option>\r\n                            ))}\r\n                            <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                        </NativeSelect> \r\n                    </div>\r\n\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                    </div>\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                            placeholder=\"Your value\"\r\n                            inputRef={this.customLineSpacingInputRef}\r\n                        />                                            \r\n                    </div>\r\n                        \r\n                    <span>Word spacing</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={wordSpacing}\r\n                            onChange={changeWordSpacing}\r\n                            onClick={selectAllOnClick(DEFAULT_WORD_SPACING)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n        marginTop: form.marginTop,\r\n        marginBottom: form.marginBottom,\r\n        firstRowIndent: form.firstRowIndent,\r\n        otherRowsIndent: form.otherRowsIndent,\r\n        lineSpacing: form.lineSpacing,\r\n        customLineSpacing: form.customLineSpacing,\r\n        wordSpacing: form.wordSpacing,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeMarginBottom: setNumber(dispatch)(\"marginBottom\"),\r\n        changeFirstRowIndent: setNumber(dispatch)(\"firstRowIndent\"),\r\n        changeOtherRowsIndent: setNumber(dispatch)(\"otherRowsIndent\"),\r\n        changeLineSpacing: setValue(dispatch)(\"lineSpacing\"),\r\n        changeCustomLineSpacing: setValue(dispatch)(\"customLineSpacing\"),\r\n        changeWordSpacing: setNumber(dispatch)(\"wordSpacing\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(DistancesSection));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default FrameTypeInput;","import { getCorrectColor } from \"../../helpers\";\r\n\r\nconst generateBorderPreviewStyle = formState => {\r\n    const { \r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderColor,\r\n        borderThickness,\r\n        borderType,\r\n    } = formState;\r\n\r\n    const correctColor = getCorrectColor(borderColor);\r\n    const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n    const previewStyle = {\r\n        borderLeft: borderLeft ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginLeft: borderLeft ? \"0\" : previewBorderWidth, \r\n        borderRight: borderRight ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginRight: borderRight ? \"0\" : previewBorderWidth, \r\n        borderTop: borderTop ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginTop: borderTop ? \"0\" : previewBorderWidth, \r\n        borderBottom: borderBottom ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginBottom: borderBottom ? \"0\" : previewBorderWidth, \r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport default generateBorderPreviewStyle;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport FrameTypeInput from \"../../sections/FramesSection/FrameTypeInput\";\r\nimport Preview from \"../../common/Preview\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport ConnectToPreviousField from \"../../common/ConnectToPreviousField\";\r\nimport generateBorderPreviewStyle from \"./generateBorderPreviewStyle\";\r\nimport { setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\nimport { DEFAULT_BORDER_COLOR, DEFAULT_BORDER_THICKNESS } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass FramesSection extends React.Component {\r\n    onBorderTypeChange = e => {\r\n        this.props.changeBorderType(e);\r\n        if (e.target.value === \"double\" && this.props.borderThickness === \"2\") {\r\n            this.props.changeBorderThickness(null, \"3\");\r\n        } else if (e.target.value !== \"double\" && this.props.borderThickness === \"3\") {\r\n            this.props.changeBorderThickness(null, \"2\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            previewProps,\r\n            formState,\r\n            borderLeft, changeBorderLeft, \r\n            borderRight, changeBorderRight,\r\n            borderTop, changeBorderTop, \r\n            borderBottom, changeBorderBottom, \r\n            borderColor, changeBorderColor,\r\n            borderThickness, changeBorderThickness,\r\n            borderType,\r\n         } = this.props;\r\n\r\n        const previewStyle = generateBorderPreviewStyle(formState)\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div>\r\n                    <div className=\"directionControlsContainer\">\r\n                        <div className=\"directionsControls\" style={previewStyle}>\r\n                            <span className=\"directionLabel\">Left</span>\r\n                            <div className=\"centralColumn\">\r\n                                <span className=\"directionLabel\">Top</span>\r\n                                <div className=\"checkboxesKit crossGrid\">\r\n                                    <div id=\"r1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderTop}  \r\n                                            onChange={changeBorderTop}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderLeft}  \r\n                                            onChange={changeBorderLeft}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c2\" className=\"gridCell\">\r\n                                    </div>\r\n                                    <div id=\"r2c3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderRight}  \r\n                                            onChange={changeBorderRight}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderBottom}  \r\n                                            onChange={changeBorderBottom}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"directionLabel\">Bottom</span>\r\n                            </div>\r\n                            <span className=\"directionLabel\">Right</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <span>Frame color</span>\r\n                        <ColorField \r\n                            colorCode={borderColor} \r\n                            changeColorCode={changeBorderColor}\r\n                            defaultColorCode={DEFAULT_BORDER_COLOR}\r\n                            required\r\n                        />\r\n        \r\n                        <span>Frame thickness</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                                value={borderThickness}\r\n                                onChange={changeBorderThickness}\r\n                                onClick={selectAllOnClick(DEFAULT_BORDER_THICKNESS)}\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>                        \r\n        \r\n                        <span>Type of frame</span>\r\n                        <div >\r\n                            <Select\r\n                            input={<FrameTypeInput />}\r\n                            value={borderType}\r\n                            onChange={this.onBorderTypeChange}\r\n                            >\r\n                                <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                                <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                                <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                                <MenuItem value=\"double\">══════</MenuItem>              \r\n                            </Select>\r\n                        </div>\r\n\r\n                        <ConnectToPreviousField />\r\n                    </div>\r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        borderLeft: form.borderLeft,\r\n        borderRight: form.borderRight,\r\n        borderTop: form.borderTop,\r\n        borderBottom: form.borderBottom,\r\n        borderColor: form.borderColor,\r\n        borderThickness: form.borderThickness,\r\n        borderType: form.borderType,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeBorderLeft: toggleValue(dispatch)(\"borderLeft\"),\r\n        changeBorderRight: toggleValue(dispatch)(\"borderRight\"),\r\n        changeBorderTop: toggleValue(dispatch)(\"borderTop\"),\r\n        changeBorderBottom: toggleValue(dispatch)(\"borderBottom\"),\r\n        changeBorderColor: setColor(dispatch)(\"borderColor\"),\r\n        changeBorderThickness: setNumber(dispatch)(\"borderThickness\"),\r\n        changeBorderType: setValue(dispatch)(\"borderType\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FramesSection));","import FramesSection from \"./FramesSection\";\r\nexport default FramesSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Preview from \"../common/Preview\";\r\nimport ColorField from \"../common/ColorField\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\nimport { setColor } from \"../actions\";\r\n\r\nconst  FillingSection = ({ previewProps, fillingColor, changeFillingColor }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n                <ConnectToPreviousField />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        fillingColor: form.fillingColor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeFillingColor: setColor(dispatch)(\"fillingColor\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FillingSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport { setValue } from \"../actions\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        tocIndentation: form.tocIndentation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeTocIndentation: setValue(dispatch)(\"tocIndentation\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TocSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { setShortCut } from \"../actions\";\r\n\r\nconst ShortCutSection = ({ shortCutWinView, shortCutMacView, changeShortCutWin, changeShortCutMac }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        shortCutWinView: form.shortCutWinView,\r\n        shortCutMacView: form.shortCutMacView,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeShortCutWin: setShortCut(dispatch)(\"shortCutWin\", \"shortCutWinView\"),\r\n        changeShortCutMac: setShortCut(dispatch)(\"shortCutMac\", \"shortCutMacView\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ShortCutSection));","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomErrorTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n      textDecoration: \"red underline\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n        textDecoration: \"indianred underline\",\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomErrorTab;","import Tabs from \"@material-ui/core/Tabs\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n    }\r\n};\r\n\r\nexport default withStyles(styles)(Tabs);","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        width: \"100vw\",\r\n        justifyContent: \"center\",\r\n        minWidth: \"700px\",\r\n    },\r\n    scrollBody: {\r\n        \"&:after\": {\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: \"1280px\",\r\n        maxHeight: \"850px\",\r\n        minHeight: \"550px\",\r\n        width: \"calc(100vw - 150px)\",\r\n        minWidth: \"600px\",\r\n        height: \"calc(100% - 96px)\",\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        border: \"none\",\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: \"middle\",\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { isEmpty, isEqual } from \"lodash\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport NamesSection from \"./sections/NamesSection\";\r\nimport PositioningSection from \"./sections/PositioningSection\";\r\nimport ListSection from \"./sections/ListSection\";\r\nimport ReferencingSection from \"./sections/ReferencingSection\";\r\nimport TypographySection from \"./sections/TypographySection\";\r\nimport DistancesSection from \"./sections/DistancesSection\";\r\nimport FramesSection from \"./sections/FramesSection\";\r\nimport FillingSection from \"./sections/FillingSection\";\r\nimport TocSection from \"./sections/TocSection\";\r\nimport ShortCutsSection from \"./sections/ShortCutsSection\";\r\n// import TestSection from \"./sections/TestSection\";\r\n\r\nimport theme from \"./theme\";\r\nimport CustomTab from \"./common/CustomTab\";\r\nimport CustomErrorTab from \"./common/CustomErrorTab\";\r\nimport CustomTabs from \"./common/CustomTabs\";\r\nimport CustomDialog from \"./common/CustomDialog\";\r\nimport { \r\n    closeDialog, \r\n    clearDecoratorForm, \r\n    switchDecDialogTab, \r\n    updateValidationError \r\n} from \"./actions\";\r\nimport { \r\n    fillMissedFields, \r\n    DecDataConverter, \r\n    getErrorState,\r\n    getTabNumberToSwitch,\r\n} from \"./helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass DecoratorDialog extends React.Component {\r\n    onClose = () => {\r\n        this.props.closeDialog();\r\n        this.props.clearForm();\r\n    };\r\n\r\n    onSaveButtonClick = () => {\r\n        const { formState, updateValidationError, switchTab, sendForm } = this.props;\r\n        const errorState = getErrorState(formState);\r\n        if (Object.values(errorState).some(item => item.length)) {\r\n            updateValidationError(errorState);\r\n            switchTab(getTabNumberToSwitch(errorState));\r\n        } else {\r\n            const formToSend = DecDataConverter.convertToSend(fillMissedFields(formState));\r\n            sendForm(formToSend);\r\n            this.onClose();\r\n        }\r\n    };\r\n\r\n    onTabSwitch = (e, tabNumber) => {\r\n        this.props.switchTab(tabNumber);\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (!isEmpty(this.props.validationError)) {\r\n            const { formState, updateValidationError, isEditMode } = this.props;\r\n            const errorState = getErrorState(formState, isEditMode);\r\n            if (!isEqual(errorState, this.props.validationError)) {\r\n                updateValidationError(errorState);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { \r\n            isOpen, \r\n            openedTab,\r\n            validationError, \r\n            isEditMode,\r\n        } = this.props;\r\n    \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <CustomDialog\r\n                    open={isOpen}\r\n                    onClose={this.onClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                    scroll=\"body\"\r\n                    className=\"decoratorDialog\"\r\n                    fullWidth={true}\r\n                    maxWidth={false}\r\n                    id=\"dialog\"\r\n                >\r\n                    <div className=\"header\">\r\n                        <DialogTitle className=\"header-title\">\r\n                            <p>Create new paragraph decorator</p>\r\n                        </DialogTitle>\r\n                        <div className=\"header-buttons\">\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                onClick={this.onClose}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.onSaveButtonClick}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                {isEditMode ? \"Save\" : \"Create\"}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <DialogContent className=\"content\">\r\n                        <div className=\"content-leftSide\">\r\n                            <CustomTabs \r\n                                className=\"dialogTabs\"\r\n                                value={openedTab} \r\n                                onChange={this.onTabSwitch} \r\n                                orientation=\"vertical\"\r\n                                color=\"primary\"\r\n                                indicatorColor=\"primary\"\r\n                            >\r\n                                { validationError.namesSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"Decorator's name\" /> )\r\n                                    :  ( <CustomTab className=\"dialogTab\" label=\"Decorator's name\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n    \r\n                                { validationError.listSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"List\" /> ) \r\n                                    : ( <CustomTab className=\"dialogTab\" label=\"List\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                                {/* <CustomTab className=\"dialogTab\" label=\"Test\" /> */}\r\n                            </CustomTabs>\r\n                        </div>\r\n                        <div className=\"content-rightSide\">\r\n                            { openedTab === 0 && <NamesSection /> }\r\n                            { openedTab === 1 && <PositioningSection /> }\r\n                            { openedTab === 2 && <ListSection /> }\r\n                            { openedTab === 3 && <ReferencingSection /> }\r\n                            { openedTab === 4 && <TypographySection /> }\r\n                            { openedTab === 5 && <DistancesSection /> }\r\n                            { openedTab === 6 && <FramesSection /> }\r\n                            { openedTab === 7 && <FillingSection /> }\r\n                            { openedTab === 8 && <TocSection /> }\r\n                            { openedTab === 9 && <ShortCutsSection /> }\r\n                            {/* openedTab === 10 && <TestSection /> */}\r\n                        </div>\r\n                    </DialogContent>\r\n                </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, isOpen, openedTab, validationError, isEditMode }}) => {\r\n    return { \r\n        formState: form,\r\n        isOpen,\r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        closeDialog: closeDialog(dispatch),\r\n        clearForm: () => dispatch(clearDecoratorForm()),\r\n        switchTab: payload => dispatch(switchDecDialogTab(payload)),\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecoratorDialog);","import DecoratorDialog from \"./DecoratorDialog\";\r\nexport default DecoratorDialog;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport DecoratorDialog from \"./components/DecoratorDialog\";\nimport { openDialog } from \"./components/DecoratorDialog/actions\";\nimport { clearSavedDecoratorForm,  saveDecoratorForm } from \"./actions\";\nimport { DecDataConverter } from \"./components/DecoratorDialog/helpers\";\nimport theme from \"./components/DecoratorDialog/theme\";\n\nimport \"./App.css\";\n\nconst App = props => {\n    const { openDialog, saveForm, clearSavedForm, savedForm } = props;\n\n    const openEditDialog = () => {\n        openDialog(DecDataConverter.convertToEdit(savedForm || {}));\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"startButtons\">\n                    { !savedForm ? (\n                        <Button \n                            onClick={() => openDialog()}\n                            color=\"primary\"\n                        >Create new</Button>\n                    ) : (\n                        <>\n                            <Button \n                                onClick={openEditDialog}\n                            >Edit saved</Button>\n                            <Button \n                                onClick={clearSavedForm}\n                                color=\"secondary\"\n                            >Delete saved</Button>\n                        </>\n                    )}\n                </div>\n                <DecoratorDialog sendForm={saveForm} />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = ({ savedForm }) => {\n    return { savedForm };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openDialog: openDialog(dispatch),\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\n        clearSavedForm: () => dispatch(clearSavedDecoratorForm()),\n    };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","export const SAVE_DEC_FORM = \"SAVE_DEC_FORM\";\r\nexport const CLEAR_SAVED_DEC_FORM = \"CLEAR_SAVED_DEC_FORM\";\r\n\r\nexport const saveDecoratorForm = payload => {\r\n    return {\r\n        type: SAVE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearSavedDecoratorForm = () => {\r\n    return {\r\n        type: CLEAR_SAVED_DEC_FORM,\r\n    };\r\n};","import { SHOW_DEC_DIALOG, HIDE_DEC_DIALOG } from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isOpenReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SHOW_DEC_DIALOG:\r\n            return true;\r\n        case HIDE_DEC_DIALOG:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isOpenReducer;","import { UPDATE_DEC_FORM, CLEAR_DEC_FORM } from \"../../components/DecoratorDialog/actions\";\r\nimport { sampleText, initialFormState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst initialState = { \r\n    previewText: sampleText,\r\n    ...initialFormState,\r\n};\r\n\r\nconst decoratorFormReducer = (state = initialState, action) =>  {\r\n    switch (action.type) {\r\n        case UPDATE_DEC_FORM:\r\n            return { ...state, ...action.payload };\r\n        case CLEAR_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default decoratorFormReducer;","import { \r\n    UPDATE_VALIDATION_ERROR, \r\n    REMOVE_VALIDATION_ERROR, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst initialErrorState = {};\r\n\r\nconst validationErrorReducer = (state = initialErrorState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_VALIDATION_ERROR:\r\n            return action.payload;\r\n        case REMOVE_VALIDATION_ERROR:\r\n            return initialErrorState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default validationErrorReducer;","import { \r\n    SWITCH_ON_DEC_DIALOG_EDIT_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_EDIT_MODE, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isEditModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_EDIT_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_EDIT_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isEditModeReducer;","import { \r\n    SWITCH_DEC_DIALOG_TAB,\r\n    RESET_DEC_DIALOG_TAB, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst initialState = 0;\r\n\r\nconst openedTabReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_DEC_DIALOG_TAB:\r\n            return action.payload;\r\n        case RESET_DEC_DIALOG_TAB:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default openedTabReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport isOpenReducer from \"./isOpenReducer\";\r\nimport decoratorFormReducer from \"./decoratorFormReducer\";\r\nimport validationErrorReducer from \"./validationErrorReducer\";\r\nimport isEditModeReducer from \"./isEditModeReducer\";\r\nimport openedTabReducer from \"./openedTabReducer\";\r\n\r\nconst decoratorDialogReducer = combineReducers({\r\n    isOpen: isOpenReducer,\r\n    openedTab: openedTabReducer,\r\n    validationError: validationErrorReducer,\r\n    isEditMode: isEditModeReducer,\r\n    form: decoratorFormReducer,\r\n});\r\n\r\nexport default decoratorDialogReducer;","import { SAVE_DEC_FORM, CLEAR_SAVED_DEC_FORM } from \"../actions\";\r\n\r\nconst initialState = null;\r\n\r\nexport const savedFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_DEC_FORM:\r\n            return action.payload;\r\n        case CLEAR_SAVED_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedFormReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport decoratorDialogReducer from \"./decoratorDialogReducer\";\r\nimport savedFormReducer from \"./savedFormReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    decoratorDialog: decoratorDialogReducer,\r\n    savedForm: savedFormReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}