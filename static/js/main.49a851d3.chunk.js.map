{"version":3,"sources":["components/common/CustomInput.js","components/common/NewGroupDialog.js","components/common/withNewGroupControl.js","components/NewDecDialog/sections/NamesSection.js","components/NewDecDialog/sections/WordExportSection.js","components/common/CustomInputShort.js","constants.js","components/NewDecDialog/sections/PositioningSection/index.js","components/NewDecDialog/sections/PositioningSection/PositioningSection.js","components/NewDecDialog/sections/ListSection.js","components/NewDecDialog/sections/ReferencingSection.js","utils.js","components/NewDecDialog/sections/TypographySection.js","components/NewDecDialog/sections/DistancesSection.js","components/NewDecDialog/sections/FramesSection/FrameTypeInput.js","components/NewDecDialog/sections/FramesSection/index.js","components/NewDecDialog/sections/FramesSection/FramesSection.js","components/NewDecDialog/sections/FillingSection.js","components/NewDecDialog/sections/TocSection.js","components/NewDecDialog/sections/ShortCutsSection.js","components/common/ContentEditable.js","components/common/Preview/Preview.js","components/common/Preview/index.js","components/NewDecDialog/sections/TestSection.js","theme.js","components/common/CustomTab.js","components/common/CustomTabs.js","components/common/CustomDialog.js","components/NewDecDialog/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","NewGroupDialog","state","props","groupType","nameEN","nameDE","nameRU","nameFR","groupKey","onInputChange","inputName","e","setState","target","value","onClose","currentGroup","hideDialog","onSave","changeGroupSelect","trim","length","groupToSave","this","isOpen","isEditMode","titleText","buttonText","Dialog","className","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","variant","margin","onChange","DialogActions","Button","onClick","color","React","Component","withNewGroupControl","View","groupSelect","newGroup","handleClick","newValue","newGroupName","NativeSelect","Checkbox","WordExportSection","CustomInputShort","listStyleType","name","backSpaceActions","key","returnOnEmptySectionActions","decoratorsList","alignmentsMap","center","left","right","PositioningSection","id","map","action","dec","ListSection","isList","listType","changeIsList","changeListType","bulletField","setBulletField","Fragment","checked","InputAdornment","charCodeAt","toString","style","getCorrectColor","hex","correctColor","selectAllOnClick","defaultValue","focus","select","TypographySection","verticalAlign","textTransform","changeVerticalAlign","changeTextTransform","fontColor","changeFontColor","colorSampleStyle","InputProps","startAdornment","FormControlLabel","control","label","labelPlacement","RadioGroup","aria-label","row","Radio","DistancesSection","firstRowIndent","otherRowsIndent","lineSpacing","changeFirstRowIndent","changeOtherRowsIndent","changeLineSpacing","FrameTypeInput","width","FramesSection","leftBorder","rightBorder","topBorder","bottomBorder","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColor","borderThickness","changeBorderThickness","borderType","changeBorderType","borderColorName","changeBorderColorName","previewBorderWidth","isNaN","parseFloat","previewStyle","borderLeft","marginLeft","borderRight","marginRight","borderTop","borderBottom","marginBottom","Select","MenuItem","FillingSection","fillingColor","changeFillingColor","TocSection","ShortCutSection","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","normalizeHtml","str","replace","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","children","childNodes","textNode","isTargetFocused","document","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","current","getEl","emitChange","originalEvt","innerHTML","evt","assign","_a","tagName","ref","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","previewText","changePreviewText","console","log","outline","TestSection","previewProps","changeFontSize","fontColorName","changeFontColorName","font","changeFont","alignment","changeAlignment","bold","changeBold","italic","changeItalic","underlined","changeUnderlined","stroke","changeStroke","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomTabs","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","container","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","NewDecDialog","openedTab","toggleStateProperty","propName","setStateProperty","setColor","filteredInput","match","slice","setNumber","changeOpenedTab","listSectionProps","typographySectionProps","alignItems","distancesSectionProps","framesSectionProps","fillingSectionProps","ThemeProvider","aria-labelledby","scroll","orientation","indicatorColor","ShortCutsSection","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49a851d3.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: '183px',\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass NewGroupDialog extends React.Component {\r\n\r\n    state = this.props.groupType !== \"xref\" \r\n          ? { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\" }\r\n          : { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\", groupKey: \"\" };\r\n    \r\n    onInputChange = inputName => e => {\r\n        this.setState({ \r\n            [inputName]: e.target.value \r\n        });\r\n    };\r\n\r\n    onClose = () => {\r\n        const {currentGroup, hideDialog } = this.props;\r\n        this.setState({ ...currentGroup });\r\n        hideDialog()\r\n    };\r\n\r\n    onSave = () => {\r\n        const { onSave, changeGroupSelect, hideDialog, groupType } = this.props;\r\n        if (this.state.nameEN.trim().length && (groupType !== \"xref\" || this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                nameEN: this.state.nameEN.trim(),\r\n                nameDE: this.state.nameDE.trim(),\r\n                nameRU: this.state.nameRU.trim(),\r\n                nameFR: this.state.nameFR.trim(),\r\n            };\r\n            if (groupType === \"xref\") {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            onSave(groupToSave);\r\n            changeGroupSelect(this.state.nameEN.trim());\r\n            hideDialog();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode } = this.props;\r\n        const { onInputChange, onSave, onClose } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${this.props.groupType === \"xref\" ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"paragraphDecorators-dialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        {\r\n                            this.props.groupType === \"xref\" \r\n                            &&\r\n                            <>\r\n                                <span>Group Key</span>\r\n                                <TextField \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    value={this.state.groupKey}\r\n                                />\r\n                            </>\r\n                        }\r\n                        <span>Name EN</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameEN\")}\r\n                            value={this.state.nameEN}\r\n                        />\r\n                        <span>Name DE</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameDE\")} \r\n                            value={this.state.nameDE}\r\n                        />                        \r\n                        <span>Name RU</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameRU\")} \r\n                            value={this.state.nameRU}\r\n                        />                        \r\n                        <span>Name FR</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameFR\")} \r\n                            value={this.state.nameFR}\r\n                        />                    \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (View) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isOpen: false,\r\n            groupSelect: \"\",\r\n            newGroup: {},\r\n        }\r\n        \r\n        handleClick = () => {\r\n            this.setState(({ isOpen }) => {\r\n                return {\r\n                    isOpen: !isOpen\r\n                };\r\n            })\r\n        }\r\n    \r\n        onSave = newGroup => {\r\n            this.setState({ newGroup });\r\n        }\r\n    \r\n        changeGroupSelect = (newValue) => {\r\n            this.setState({\r\n                groupSelect: newValue,\r\n            });\r\n        }\r\n\r\n        hideDialog = () => {\r\n            this.setState({ isOpen: false });\r\n        }\r\n        \r\n        render() {\r\n            const { handleClick, onSave, changeGroupSelect, hideDialog } = this; \r\n            return <View \r\n                {...this.props} \r\n                {...this.state}\r\n                {...{ handleClick, onSave, changeGroupSelect, hideDialog }}\r\n                />\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport CustomInput from '../../common/CustomInput';\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from '../../common/withNewGroupControl';\r\n\r\nconst NamesSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Key</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    <option value=\"\">...</option>\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"0\">Text</option>\r\n                    <option value=\"1\">Heading</option>\r\n                    <option value=\"2\">Heading Heading Heading Heading</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n\r\n            <span>Active</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n            <span>Style name (English)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (German)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (Russian)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (French)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"decorators\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(NamesSection);","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst WordExportSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Style name in WORD</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n            \r\n            <span>Soft return</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","export const listStyleType = [\r\n  {\r\n    name: 'Decimal',\r\n    value: 'decimal',\r\n  },\r\n  {\r\n    name: 'Decimal leading zero',\r\n    value: 'decimal-leading-zero',\r\n  },\r\n  {\r\n    name: 'Lower alpha',\r\n    value: 'lower-alpha',\r\n  },\r\n  {\r\n    name: 'Lower greek',\r\n    value: 'lower-greek',\r\n  },\r\n  {\r\n    name: 'Lower latin',\r\n    value: 'lower-latin',\r\n  },\r\n  {\r\n    name: 'Lower roman',\r\n    value: 'lower-roman',\r\n  },\r\n  {\r\n    name: 'Upper alpha',\r\n    value: 'upper-alpha',\r\n  },\r\n  {\r\n    name: 'Upper greek',\r\n    value: 'upper-greek',\r\n  },\r\n  {\r\n    name: 'Upper latin',\r\n    value: 'upper-latin',\r\n  },\r\n  {\r\n    name: 'Upper roman',\r\n    value: 'upper-roman',\r\n  },\r\n];\r\n\r\nexport const backSpaceActions = [\r\n  { key: 'merge', value: 'Merge' },\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'remove_pd', value: 'Remove PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const returnOnEmptySectionActions = [\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'create_new_section', value: 'Create new section' },\r\n  { key: 'apply_default_pd', value: 'Apply default PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const decoratorsList = [\r\n    { name: \"...\", value: null },\r\n    { name: \"Text 0\", value: \"quick_text_0\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n];\r\n\r\nexport const alignmentsMap = {\r\n  center: \"center\",\r\n  left: \"flex-start\",\r\n  right: \"flex-end\",\r\n};","import PositioningSection from \"./PositioningSection.js\";\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport CustomInput from 'components/common/CustomInput';\r\nimport CustomInputShort from 'components/common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from 'constants.js'\r\n\r\nimport './style.css';\r\n\r\nconst PositioningSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <NativeSelect id=\"r1c2\" input={ <CustomInputShort /> }>\r\n                <option value={null}>...</option>\r\n                <option value=\"0\">0</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </NativeSelect>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <NativeSelect id=\"r3c2\" input={ <CustomInput /> }>\r\n                {backSpaceActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n            <span id=\"r4c1\">At the beginning of a section WITHOUT content</span>\r\n            <NativeSelect id=\"r4c2\" input={ <CustomInput /> }>\r\n                {returnOnEmptySectionActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n\r\n            <div id=\"r5\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n            <span id=\"r6c1\">Style of next section</span>\r\n            <NativeSelect id=\"r6c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r7c1\">In empty section change current style to</span>\r\n            <NativeSelect  id=\"r7c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n\r\n            <div id=\"r8\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n            <span id=\"r9c1\">TAB – change current style to</span>\r\n            <NativeSelect  id=\"r9c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r10c1\">SHIFT+TAB – change current style to</span>\r\n            <NativeSelect  id=\"r10c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { listStyleType } from '../../../constants'\r\n\r\nconst ListSection = ({ isList, listType, changeIsList, changeListType, bulletField, setBulletField }) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Is it a list?</span></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><span>List name</span></li>\r\n                            <li><span>Order level</span></li>\r\n                            <li><span>Prefix</span></li>\r\n                            <li><span>Suffix</span></li>\r\n                            <li><span>Suffix distance</span></li>\r\n                            <li><span>Magic Tabs</span></li>\r\n                            <li><span>Type of list</span></li>\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><Checkbox color=\"primary\" checked={isList} onChange={changeIsList} /></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value={null}>...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value=\"0.5\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </li>\r\n                            <li><Checkbox color=\"primary\" /></li>\r\n                            <li>\r\n                                <NativeSelect value={listType} onChange={changeListType} input={ <CustomInput /> }>\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Bullet character</span></li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Numbering style</span></li>\r\n                                    <li><span>Continue numbering after interruption</span></li>\r\n                                    <li><span>Allow restart numbering</span></li>\r\n                                    <li><span>Include previous levels from</span></li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                <li></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <TextField \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"paragraphDecorators-dialog__bullet-input\" \r\n                                            onChange={setBulletField}\r\n                                            value={bulletField}\r\n                                         />                                            \r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            { bulletField ? `Unicode: ${bulletField.charCodeAt(0).toString(16)}` : \"\"}\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            {listStyleType.map(style => (\r\n                                              <option value={style.value} key={style.value}>{style.name}</option>\r\n                                            ))}                                    \r\n                                        </NativeSelect>\r\n                                    </li>\r\n                                    <li><Checkbox color=\"primary\" /></li>\r\n                                    <li><Checkbox color=\"primary\" checked={true} /></li>\r\n                                    <li>\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            <option value={null}>...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            Preview: А.1.1\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ListSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from \"../../common/withNewGroupControl\";\r\n\r\nconst ReferencingSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Reference group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"\">none</option>\r\n                    <option value=\"0\">Reference group 1</option>\r\n                    <option value=\"1\">Reference group 2</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"xref\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(ReferencingSection);","export const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n}\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n}","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst TypographySection = (props) => {\r\n    const { \r\n        verticalAlign, \r\n        textTransform, \r\n        changeVerticalAlign, \r\n        changeTextTransform,\r\n        fontColor,\r\n        changeFontColor,\r\n    } = props;\r\n\r\n    const correctColor = getCorrectColor(fontColor);\r\n\r\n    const colorSampleStyle = {\r\n        backgroundColor: `#${correctColor}`,\r\n    };\r\n    \r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Font</span></li>\r\n                    <li><span>Alignment</span></li>\r\n                    <li><span>Font size</span></li>\r\n                    <li><span>Font color name</span></li>\r\n                    <li><span>Font color HEX</span></li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                        <span>Stylings</span>\r\n                    </li>\r\n                    <li><span>Sub/Superscript</span></li>\r\n                    <li><span>Text transform</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            <option value={\"Helvetica New\"}>Helvetica New</option>\r\n                            <option value={\"Georgia\"}>Georgia</option>\r\n                            <option value={\"Roboto\"}>Roboto</option>\r\n                            <option value={\"Open Sans\"}>Open Sans</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            <option value={\"left\"}>Left</option>\r\n                            <option value={\"center\"}>Center</option>\r\n                            <option value={\"right\"}>Right</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={\"12\"}>12</option>\r\n                            <option value={\"14\"}>14</option>\r\n                            <option value={\"16\"}>16</option>\r\n                        </NativeSelect>\r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={fontColor}\r\n                            onChange={changeFontColor}\r\n                         />\r\n                         <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                            \r\n                    </li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Bold\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Italic\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Underlined\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Stroke\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <RadioGroup \r\n                            aria-label=\"verticalAlign\" \r\n                            name=\"verticalAlign\" \r\n                            value={verticalAlign} \r\n                            onChange={changeVerticalAlign} \r\n                            row\r\n                        >\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"No\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"subscript\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Subscript\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"superscript\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Superscript\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                        </RadioGroup>\r\n                    </li>\r\n                    <li>\r\n                        <RadioGroup \r\n                            aria-label=\"textTransform\" \r\n                            name=\"textTransform\" \r\n                            value={textTransform} \r\n                            onChange={changeTextTransform} \r\n                            row\r\n                        >\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"No\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"lowercase\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Lowercase\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"uppercase\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Uppercase\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                        </RadioGroup>\r\n                    </li>\r\n\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TypographySection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst DistancesSection = (props) => {\r\n    const {\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        changeFirstRowIndent,\r\n        changeOtherRowsIndent,\r\n        changeLineSpacing,\r\n    } = props;\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Margin top</span></li>\r\n                    <li><span>Margin bottom</span></li>\r\n                    <li><span>1st row indent</span></li>\r\n                    <li><span>Other rows indent</span></li>\r\n                    <li><span>Line spacing</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li>\r\n                    <NativeSelect input={ <CustomInputShort /> }>\r\n                        <option value={\"6\"}>6</option>\r\n                        <option value={\"8\"}>8</option>\r\n                        <option value={\"10\"}>10</option>\r\n                    </NativeSelect>\r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <NativeSelect input={ <CustomInputShort /> }>\r\n                        <option value={\"6\"}>6</option>\r\n                        <option value={\"8\"}>8</option>\r\n                        <option value={\"10\"}>10</option>\r\n                    </NativeSelect>\r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\"\r\n                        value={firstRowIndent}\r\n                        onChange={changeFirstRowIndent} \r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\" \r\n                        value={otherRowsIndent}\r\n                        onChange={changeOtherRowsIndent}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\"\r\n                        value={lineSpacing}\r\n                        onChange={changeLineSpacing} \r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default DistancesSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default FrameTypeInput;","import FramesSection from \"./FramesSection.js\";\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport { getCorrectColor, selectAllOnClick } from 'utils.js';\r\nimport FrameTypeInput from 'components/NewDecDialog/sections/FramesSection/FrameTypeInput';\r\n\r\nimport \"./style.css\";\r\n\r\nconst FramesSection = (props) => {\r\n    const { \r\n        leftBorder, \r\n        rightBorder, \r\n        topBorder, \r\n        bottomBorder, \r\n        changeLeftBorder,\r\n        changeRightBorder,\r\n        changeTopBorder,\r\n        changeBottomBorder,\r\n        borderColor,\r\n        changeBorderColor,\r\n        borderThickness,\r\n        changeBorderThickness,\r\n        borderType,\r\n        changeBorderType,\r\n        borderColorName,\r\n        changeBorderColorName,\r\n     } = props;\r\n\r\n     const correctColor = getCorrectColor(borderColor);\r\n     const colorSampleStyle = {\r\n         backgroundColor: `#${correctColor}`,\r\n     };\r\n     const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n     const previewStyle = {\r\n         borderLeft: leftBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginLeft: leftBorder ? \"0\" : previewBorderWidth, \r\n         borderRight: rightBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginRight: rightBorder ? \"0\" : previewBorderWidth, \r\n         borderTop: topBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginTop: topBorder ? \"0\" : previewBorderWidth, \r\n         borderBottom: bottomBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginBottom: bottomBorder ? \"0\" : previewBorderWidth, \r\n     };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"directionControlsContainer\">\r\n                <div className=\"directionsControls\" style={previewStyle}>\r\n                    <span className=\"directionLabel\">Left</span>\r\n                    <div className=\"centralColumn\">\r\n                        <span className=\"directionLabel\">Top</span>\r\n                        <div className=\"checkboxesKit crossGrid\">\r\n                            <div id=\"r1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={topBorder}  \r\n                                    onChange={changeTopBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={leftBorder}  \r\n                                    onChange={changeLeftBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c2\" className=\"gridCell\">\r\n                            </div>\r\n                            <div id=\"r2c3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={rightBorder}  \r\n                                    onChange={changeRightBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={bottomBorder}  \r\n                                    onChange={changeBottomBorder}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"directionLabel\">Bottom</span>\r\n                    </div>\r\n                    <span className=\"directionLabel\">Right</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Frame color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    value={borderColorName}\r\n                    onChange={changeBorderColorName}\r\n                    onClick={selectAllOnClick(\"Red\")}\r\n                />\r\n\r\n                <span>Frame color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\" \r\n                        InputProps={{\r\n                           startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={borderColor}\r\n                        onChange={changeBorderColor}\r\n                        onClick={selectAllOnClick(\"f00\")}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n                \r\n\r\n                <span>Frame thickness</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={borderThickness}\r\n                        onChange={changeBorderThickness}\r\n                        onClick={selectAllOnClick(\"2\")}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>                        \r\n\r\n                <span>Type of frame</span>\r\n                <div >\r\n              <Select\r\n                input={<FrameTypeInput />}\r\n                value={borderType}\r\n                onChange={changeBorderType}\r\n              >\r\n                        <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                        <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                        <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                        <MenuItem value=\"double\">══════</MenuItem>              \r\n                </Select>\r\n                </div>\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox color=\"primary\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst FillingSection = ({ fillingColor, changeFillingColor }) => {\r\n\r\n    const correctColor = getCorrectColor(fillingColor);\r\n    const colorSampleStyle = {\r\n        backgroundColor: `#${correctColor}`,\r\n    };\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Background color name</span></li>\r\n                    <li><span>Background color HEX</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={fillingColor}\r\n                            onChange={changeFillingColor}\r\n                         />     \r\n                        <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                                                                   \r\n                    </li>                \r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FillingSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nconst TocSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li><span>ToC indentation</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>                    \r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={null}>...</option>\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TocSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst ShortCutSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Windows</span></li>\r\n                    <li><span>Mac</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ShortCutSection;","import * as React from 'react';\r\nimport deepEqual from 'fast-deep-equal';\r\nimport * as PropTypes from 'prop-types';\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n              t[p[i]] = s[p[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, ' ');\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === 'function' ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== 'function' ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || 'div', Object.assign({}, props, { ref: typeof innerRef === 'function' ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport ContentEditable from \"components/common/ContentEditable\";\r\n\r\nconst Preview = ({previewText, changePreviewText, previewStyle}) => {\r\n    console.log(previewStyle);\r\n    return (\r\n        <div className=\"preview\">\r\n            <span className=\"preview-title\">\r\n                Preview\r\n            </span>\r\n            <div className=\"preview-content\">\r\n                <div className=\"demonstrationElement\">\r\n                    <ContentEditable\r\n                        className=\"demonstrationElement-text\"\r\n                        onChange={(e) => {\r\n                            console.log(e.target.value);\r\n                            changePreviewText(e);\r\n                        }} \r\n                        html={previewText}\r\n                        style={{ ...previewStyle, outline: 'none' }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preview;","import Preview from \"./Preview.js\";\r\nexport default Preview;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\n\r\nimport { getCorrectColor, selectAllOnClick } from 'utils.js';\r\nimport Preview from \"components/common/Preview\";\r\nimport { fontFamily } from '@material-ui/system';\r\n\r\nconst TestSection = (props) => {\r\n    const { previewProps, fontSize, changeFontSize, fontColor, changeFontColor, fontColorName,\r\n        changeFontColorName,\r\n        font, \r\n        changeFont,\r\n        alignment, changeAlignment,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,\r\n        stroke, changeStroke, } = props;\r\n\r\n        const correctColor = getCorrectColor(fontColor);\r\n\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeFont}\r\n                >\r\n                    <option value={\"Roboto, slab-serif\"}>Roboto</option>\r\n                    <option value={\"'Source Serif Pro', serif\"}>Source Serif</option>\r\n                </NativeSelect>\r\n\r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(\"12\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                    value={fontColorName}\r\n                    onChange={changeFontColorName}\r\n                    onClick={selectAllOnClick(\"Black\")}\r\n                />\r\n\r\n                <span>Font color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\" \r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={fontColor}\r\n                        onChange={changeFontColor}\r\n                        onClick={selectAllOnClick(\"000\")}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_withIndent\">\r\n            <span>Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Sub/Superscript</span>\r\n\r\n            <span>Text transform</span>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TestSection;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\n\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: 'initial',\r\n      backgroundColor: 'white',\r\n      transition: '0.2s',\r\n\r\n      '&:before': {\r\n        transition: '0.2s',\r\n      },\r\n\r\n      '&:hover': {\r\n        color: '#000',\r\n      },\r\n      '&$selected': {\r\n        backgroundColor: '#2196f3',\r\n        color: 'white',\r\n        opacity: 1,\r\n      },\r\n      '&:hover:active': {\r\n        backgroundColor: 'white',\r\n        transition: '0.2s',\r\n      },\r\n      '&$selected:hover:active': {\r\n        backgroundColor: '#2ca4ff',\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import Tabs from '@material-ui/core/Tabs';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTabs = withStyles(theme => ({\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n      }\r\n  }))(Tabs);\r\n\r\n  export default CustomTabs;","import { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1150px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        '&:after': {\r\n            height: '100%',\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: '1280px',\r\n        maxHeight: '850px',\r\n        minHeight: '550px',\r\n        width: 'calc(100% - 96px)',\r\n        height: 'calc(100% - 96px)',\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        border: 'none',\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: 'middle',\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","import React from 'react';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport NamesSection from './sections/NamesSection';\r\nimport WordExportSection from './sections/WordExportSection';\r\nimport PositioningSection from './sections/PositioningSection';\r\nimport ListSection from './sections/ListSection';\r\nimport ReferencingSection from './sections/ReferencingSection';\r\nimport TypographySection from './sections/TypographySection';\r\nimport DistancesSection from './sections/DistancesSection';\r\nimport FramesSection from './sections/FramesSection';\r\nimport FillingSection from './sections/FillingSection';\r\nimport TocSection from './sections/TocSection';\r\nimport ShortCutsSection from './sections/ShortCutsSection';\r\nimport TestSection from './sections/TestSection';\r\n\r\nimport theme from '../../theme';\r\nimport CustomTab from '../common/CustomTab';\r\nimport CustomTabs from '../common/CustomTabs';\r\nimport CustomDialog from '../common/CustomDialog';\r\nimport { getCorrectColor } from 'utils.js';\r\nimport { alignmentsMap } from 'constants.js';\r\n\r\nimport \"./style.css\";\r\n\r\nclass NewDecDialog extends React.Component {\r\n    state = { \r\n        openedTab: 11,\r\n        isList: true,\r\n        listType: \"unordered\",\r\n        bulletField: \"\",\r\n        verticalAlign: \"\",\r\n        textTransform: \"\",\r\n        leftBorder: false,\r\n        rightBorder: false,\r\n        topBorder: false,\r\n        bottomBorder: false,\r\n        borderType: \"solid\",\r\n        borderColor: \"f00\",\r\n        borderColorName: \"Red\",\r\n        borderThickness: \"2\",\r\n        fontSize: \"12\",\r\n        fontColor: \"000\",\r\n        fontColorName: \"Black\",\r\n        alignment: \"left\",\r\n        font: \"Roboto\",\r\n        fillingColor: \"\",\r\n        firstRowIndent: \"\",\r\n        otherRowsIndent: \"\",\r\n        lineSpacing: \"\",\r\n        previewText: \"Sample Text. You can change it\",\r\n        bold: true,\r\n        italic: false,\r\n        underlined: false,\r\n        stroke: false,\r\n    };\r\n\r\n    toggleStateProperty = (propName) => (e) => {\r\n        this.setState({\r\n            [propName]: e.target.checked\r\n        });\r\n    }\r\n\r\n    setStateProperty = (propName) => (e, newValue) => {\r\n        this.setState({\r\n            [propName]: e.target.value ? e.target.value : typeof newValue === \"number\" ? newValue : \"\",\r\n        });\r\n    }\r\n\r\n    setBulletField = (e) => {\r\n        this.setState({\r\n            bulletField: e.target.value.length > 1 ? e.target.value[e.target.value.length - 1] : e.target.value \r\n        });\r\n    } \r\n\r\n    setColor = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n        \r\n        const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                              : \"\" ;\r\n        \r\n        if (filteredInput === this.state[propName]) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [propName]: filteredInput,\r\n        });\r\n    }\r\n\r\n    setNumber = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n\r\n        const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                              ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                              : \"\" ;\r\n\r\n        if (filteredInput === this.state[propName]) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [propName]: filteredInput,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isOpen, onClose } = this.props;\r\n        const { openedTab, \r\n                isList, \r\n                listType, \r\n                bulletField, \r\n                verticalAlign, \r\n                textTransform,\r\n                leftBorder, \r\n                rightBorder,\r\n                topBorder,\r\n                bottomBorder, \r\n                borderType,\r\n                borderColor,\r\n                borderColorName,\r\n                fontColor,\r\n                fillingColor,\r\n                borderThickness,\r\n                firstRowIndent,\r\n                otherRowsIndent,\r\n                lineSpacing,\r\n                previewText,\r\n                fontSize,\r\n                fontColorName,\r\n                font,\r\n                alignment,\r\n                bold,\r\n                italic,\r\n                underlined,\r\n                stroke,\r\n            } = this.state;\r\n\r\n        const { setBulletField } = this;\r\n        const changeOpenedTab = this.setStateProperty(\"openedTab\");\r\n        const changeIsList = this.toggleStateProperty(\"isList\");\r\n        const changeListType = this.setStateProperty(\"listType\");\r\n        const changeVerticalAlign = this.setStateProperty(\"verticalAlign\");\r\n        const changeTextTransform = this.setStateProperty(\"textTransform\");\r\n        const changeLeftBorder = this.toggleStateProperty(\"leftBorder\");\r\n        const changeRightBorder = this.toggleStateProperty(\"rightBorder\");\r\n        const changeTopBorder = this.toggleStateProperty(\"topBorder\");\r\n        const changeBottomBorder = this.toggleStateProperty(\"bottomBorder\");\r\n        const changeBorderColor = this.setColor(\"borderColor\");\r\n        const changeFontColor = this.setColor(\"fontColor\");\r\n        const changeFillingColor = this.setColor(\"fillingColor\");\r\n        const changeBorderThickness = this.setNumber(\"borderThickness\");\r\n        const changeFirstRowIndent = this.setNumber(\"firstRowIndent\");\r\n        const changeOtherRowsIndent = this.setNumber(\"otherRowsIndent\");\r\n        const changeLineSpacing = this.setNumber(\"lineSpacing\");\r\n        const changeBorderColorName = this.setStateProperty(\"borderColorName\");\r\n        const changePreviewText = this.setStateProperty(\"previewText\");\r\n        const changeFontSize = this.setNumber(\"fontSize\");\r\n        const changeFontColorName = this.setStateProperty(\"fontColorName\");\r\n        const changeFont = this.setStateProperty(\"font\");\r\n        const changeAlignment = this.setStateProperty(\"alignment\");\r\n        const changeBold = this.toggleStateProperty(\"bold\");\r\n        const changeItalic = this.toggleStateProperty(\"italic\");\r\n        const changeUnderlined = this.toggleStateProperty(\"underlined\");\r\n        const changeStroke = this.toggleStateProperty(\"stroke\");\r\n        const changeBorderType = (e) => {\r\n            this.setStateProperty(\"borderType\")(e);\r\n            if (e.target.value === \"double\" && borderThickness === \"2\") {\r\n                changeBorderThickness({ target: { value: \"3\"}});\r\n            }\r\n            if (e.target.value !== \"double\" && borderThickness === \"3\") {\r\n                changeBorderThickness({ target: { value: \"2\"}});\r\n            }\r\n         };\r\n\r\n        const previewStyle = {\r\n            fontSize: fontSize ? fontSize + \"pt\" : \"0\",\r\n            color: `#${getCorrectColor(fontColor, \"f5f5f5\")}`,\r\n            fontFamily: font,\r\n            alignItems: alignmentsMap[alignment],\r\n        };\r\n\r\n        const previewProps = { previewText, changePreviewText, previewStyle };\r\n\r\n        const listSectionProps = { \r\n            isList, \r\n            listType, \r\n            changeIsList, \r\n            changeListType, \r\n            bulletField, \r\n            setBulletField,\r\n        };\r\n\r\n        const typographySectionProps = { \r\n            verticalAlign, \r\n            textTransform, \r\n            changeVerticalAlign, \r\n            changeTextTransform,\r\n            fontColor,\r\n            changeFontColor,\r\n            previewProps,\r\n            fontSize,\r\n            changeFontSize,\r\n            fontColorName,\r\n            changeFontColorName,\r\n            font, \r\n            changeFont,\r\n            alignment, changeAlignment,\r\n            bold, changeBold,\r\n            italic, changeItalic,\r\n            underlined, changeUnderlined,\r\n            stroke, changeStroke,\r\n        };\r\n\r\n        const distancesSectionProps = {\r\n            firstRowIndent,\r\n            otherRowsIndent,\r\n            lineSpacing,\r\n            changeFirstRowIndent,\r\n            changeOtherRowsIndent,\r\n            changeLineSpacing,\r\n        };\r\n\r\n        const framesSectionProps = { \r\n            leftBorder, \r\n            rightBorder, \r\n            topBorder, \r\n            bottomBorder, \r\n            changeLeftBorder, \r\n            changeRightBorder, \r\n            changeTopBorder, \r\n            changeBottomBorder, \r\n            borderColor,\r\n            changeBorderColor,\r\n            borderThickness,\r\n            changeBorderThickness,\r\n            borderType,\r\n            changeBorderType,\r\n            borderColorName,\r\n            changeBorderColorName,\r\n        };\r\n\r\n        const fillingSectionProps = { fillingColor, changeFillingColor };\r\n        \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n            <CustomDialog\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"body\"\r\n                className=\"paragraphDecorators-dialog\"\r\n                fullWidth={true}\r\n                maxWidth={false}\r\n            >\r\n                <div className=\"header\">\r\n                    <DialogTitle className=\"header-title\">\r\n                        <p>Create new paragraph decorator</p>\r\n                    </DialogTitle>\r\n                    <div className=\"header-buttons\">\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick={onClose}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {}}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                    \r\n                <DialogContent className=\"content\">\r\n                    <div className=\"content-leftSide\">\r\n                        <CustomTabs \r\n                            className=\"dialogTabs\"\r\n                            value={openedTab} \r\n                            onChange={changeOpenedTab} \r\n                            orientation=\"vertical\"\r\n                            color=\"primary\"\r\n                            indicatorColor=\"primary\"\r\n                        >\r\n                            <CustomTab className=\"dialogTab\" label=\"Names\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"WORD export\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"List\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Test\" />\r\n                        </CustomTabs>\r\n                    </div>\r\n                    <div className=\"content-rightSide\">\r\n                        { openedTab === 0 && <NamesSection /> }\r\n                        { openedTab === 1 && <WordExportSection /> }\r\n                        { openedTab === 2 && <PositioningSection /> }\r\n                        { openedTab === 3 && <ListSection {...listSectionProps} />}\r\n                        { openedTab === 4 && <ReferencingSection /> }\r\n                        { openedTab === 5 && <TypographySection {...typographySectionProps} /> }\r\n                        { openedTab === 6 && <DistancesSection {...distancesSectionProps} /> }\r\n                        { openedTab === 7 && <FramesSection {...framesSectionProps} /> }\r\n                        { openedTab === 8 && <FillingSection {...fillingSectionProps} /> }\r\n                        { openedTab === 9 && <TocSection /> }\r\n                        { openedTab === 10 && <ShortCutsSection /> }\r\n                        { openedTab === 11 && <TestSection {...typographySectionProps} /> }\r\n                    </div>\r\n                </DialogContent>\r\n            </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewDecDialog;","import React from 'react';\nimport './App.css';\n\nimport NewDecDialog from './components/NewDecDialog';\n\nclass App extends React.Component {\n  state = {\n    isOpen: true,\n  }\n\n  handleClick = () => {\n    this.setState(({ isOpen }) => {\n      return {\n        isOpen: !isOpen\n      };\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleClick}>Open</button>\n        <NewDecDialog \n          isOpen={this.state.isOpen}\n          onClose={() => {\n            this.setState({ isOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}