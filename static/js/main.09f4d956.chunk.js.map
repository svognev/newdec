{"version":3,"sources":["components/common/CustomInput.js","components/common/NewGroupDialog.js","components/common/withNewGroupControl.js","components/NewDecDialog/sections/NamesSection.js","components/NewDecDialog/sections/WordExportSection.js","components/common/CustomInputShort.js","constants.js","components/NewDecDialog/sections/PositioningSection/index.js","components/NewDecDialog/sections/PositioningSection/PositioningSection.js","components/NewDecDialog/sections/ListSection.js","components/NewDecDialog/sections/ReferencingSection.js","utils.js","components/common/ContentEditable.js","components/common/Preview/Preview.js","components/common/Preview/index.js","components/NewDecDialog/sections/TypographySection/index.js","components/NewDecDialog/sections/TypographySection/TypographySection.js","components/NewDecDialog/sections/DistancesSection.js","components/NewDecDialog/sections/FramesSection/FrameTypeInput.js","components/NewDecDialog/sections/FramesSection/index.js","components/NewDecDialog/sections/FramesSection/FramesSection.js","components/NewDecDialog/sections/FillingSection.js","components/NewDecDialog/sections/TocSection.js","components/NewDecDialog/sections/ShortCutsSection.js","components/common/Preview/ListPreview.js","components/NewDecDialog/sections/TestSection.js","theme.js","components/common/CustomTab.js","components/common/CustomTabs.js","components/common/CustomDialog.js","components/NewDecDialog/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","NewGroupDialog","state","props","groupType","nameEN","nameDE","nameRU","nameFR","groupKey","onInputChange","inputName","e","setState","target","value","onClose","currentGroup","hideDialog","onSave","changeGroupSelect","trim","length","groupToSave","this","isOpen","isEditMode","titleText","buttonText","Dialog","className","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","variant","margin","onChange","DialogActions","Button","onClick","color","React","Component","withNewGroupControl","View","groupSelect","newGroup","handleClick","newValue","newGroupName","NativeSelect","Checkbox","WordExportSection","CustomInputShort","listStyleType","name","backSpaceActions","key","returnOnEmptySectionActions","decoratorsList","alignmentsMap","center","left","right","justify","numberingSets","decimal","bulletNamesMap","bulletpoint","dash","star","PositioningSection","id","map","action","dec","ListSection","isList","listType","changeIsList","changeListType","bulletField","changeBulletField","Fragment","checked","InputAdornment","charCodeAt","toString","style","getCorrectColor","hex","correctColor","selectAllOnClick","defaultValue","focus","select","getOffset","alignType","parseFloat","slice","scrollToBottom","setTimeout","document","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","getListChars","isOrderedList","numberingStyle","listItem","unicodeChar","newBullet","Array","fill","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","q","propertyIsEnumerable","normalizeHtml","str","replace","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","children","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","current","getEl","emitChange","originalEvt","innerHTML","evt","assign","_a","tagName","ref","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","previewText","changePreviewText","previewStyle","verticalAlign","editableContentStyle","outline","marginBottom","selectAllChildren","TypographySection","previewProps","changeFontSize","fontColor","changeFontColor","fontColorName","changeFontColorName","font","changeFont","alignment","changeAlignment","bold","changeBold","italic","changeItalic","underlined","changeUnderlined","stroke","changeStroke","changeVerticalAlign","textTransform","changeTextTransform","colorSampleStyle","InputProps","startAdornment","FormControlLabel","control","label","labelPlacement","RadioGroup","row","Radio","DistancesSection","firstRowIndent","otherRowsIndent","lineSpacing","changeFirstRowIndent","changeOtherRowsIndent","changeLineSpacing","changeMarginTop","changeMarginBottom","wordSpacing","changeWordSpacing","customLineSpacing","changeCustomLineSpacing","FrameTypeInput","width","FramesSection","leftBorder","rightBorder","topBorder","bottomBorder","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColor","borderThickness","changeBorderThickness","borderType","changeBorderType","borderColorName","changeBorderColorName","previewBorderWidth","isNaN","borderLeft","marginLeft","borderRight","marginRight","borderTop","borderBottom","Select","MenuItem","FillingSection","fillingColor","changeFillingColor","fillingColorName","changeFillingColorName","connectToPrevious","changeConnectToPrevious","TocSection","ShortCutSection","ListPreview","listPreviewStyle","listChars","prefix","suffix","suffixDistance","sideNumberStyle","console","log","listItemsBeginnings","listChar","listItemBeginingStyle","TestSection","listPreviewProps","listName","changeListName","changePrefix","changeSuffix","orderLevel","changeOrderLevel","changeSuffixDistance","magicTabs","changeMagicTabs","changeListItem","unicodeNumber","changeUnicodeNumber","changeUnicodeChar","changeNumberingStyle","continueNumbering","changeContinueNumbering","allowRestartNumbering","changeAllowRestartNumbering","includePreviousFrom","changencludePreviousFrom","sideNumber","changeSideNumber","sideNumberFont","changeSideNumberFont","sideNumberAlignment","changeSideNumberAlignment","sideNumberFontSize","changeSideNumberFontSize","sideNumberFontColor","changeSideNumberFontColor","sideNumberFillingColor","changeSideNumberFillingColor","sideNumberPadding","changeSideNumberPadding","sideNumberRadius","changeSideNumberRadius","fontColorSampleStyle","fillingColorSampleStyle","entries","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomTabs","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","container","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","NewDecDialog","openedTab","toggleStateProperty","propName","setStateProperty","secondArg","undefined","setBullet","setColor","filteredInput","match","setNumber","changeOpenedTab","previewFontColor","previewFillingColor","previewAdditionalFillingColor","indentsDifference","previewMarginLeft","previewTextIndent","alignItems","textAlign","fontWeight","fontStyle","textDecoration","fontVariant","backgroundImage","textIndent","lineHeight","styledText","unstyledText","getUnstyledText","previewSideNumberFontColor","previewSideNumberFillingColor","listSectionProps","newUnicodeNumber","newUnicodeChar","String","fromCharCode","parseInt","unicodeNumberToChar","unicodeCharToNumber","typographySectionProps","distancesSectionProps","framesSectionProps","fillingSectionProps","ThemeProvider","aria-labelledby","scroll","orientation","indicatorColor","ShortCutsSection","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09f4d956.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: '183px',\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass NewGroupDialog extends React.Component {\r\n\r\n    state = this.props.groupType !== \"xref\" \r\n          ? { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\" }\r\n          : { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\", groupKey: \"\" };\r\n    \r\n    onInputChange = inputName => e => {\r\n        this.setState({ \r\n            [inputName]: e.target.value \r\n        });\r\n    };\r\n\r\n    onClose = () => {\r\n        const {currentGroup, hideDialog } = this.props;\r\n        this.setState({ ...currentGroup });\r\n        hideDialog()\r\n    };\r\n\r\n    onSave = () => {\r\n        const { onSave, changeGroupSelect, hideDialog, groupType } = this.props;\r\n        if (this.state.nameEN.trim().length && (groupType !== \"xref\" || this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                nameEN: this.state.nameEN.trim(),\r\n                nameDE: this.state.nameDE.trim(),\r\n                nameRU: this.state.nameRU.trim(),\r\n                nameFR: this.state.nameFR.trim(),\r\n            };\r\n            if (groupType === \"xref\") {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            onSave(groupToSave);\r\n            changeGroupSelect(this.state.nameEN.trim());\r\n            hideDialog();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode } = this.props;\r\n        const { onInputChange, onSave, onClose } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${this.props.groupType === \"xref\" ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"paragraphDecorators-dialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        {\r\n                            this.props.groupType === \"xref\" \r\n                            &&\r\n                            <>\r\n                                <span>Group Key</span>\r\n                                <TextField \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    value={this.state.groupKey}\r\n                                />\r\n                            </>\r\n                        }\r\n                        <span>Name EN</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameEN\")}\r\n                            value={this.state.nameEN}\r\n                        />\r\n                        <span>Name DE</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameDE\")} \r\n                            value={this.state.nameDE}\r\n                        />                        \r\n                        <span>Name RU</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameRU\")} \r\n                            value={this.state.nameRU}\r\n                        />                        \r\n                        <span>Name FR</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameFR\")} \r\n                            value={this.state.nameFR}\r\n                        />                    \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (View) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isOpen: false,\r\n            groupSelect: \"\",\r\n            newGroup: {},\r\n        }\r\n        \r\n        handleClick = () => {\r\n            this.setState(({ isOpen }) => {\r\n                return {\r\n                    isOpen: !isOpen\r\n                };\r\n            })\r\n        }\r\n    \r\n        onSave = newGroup => {\r\n            this.setState({ newGroup });\r\n        }\r\n    \r\n        changeGroupSelect = (newValue) => {\r\n            this.setState({\r\n                groupSelect: newValue,\r\n            });\r\n        }\r\n\r\n        hideDialog = () => {\r\n            this.setState({ isOpen: false });\r\n        }\r\n        \r\n        render() {\r\n            const { handleClick, onSave, changeGroupSelect, hideDialog } = this; \r\n            return <View \r\n                {...this.props} \r\n                {...this.state}\r\n                {...{ handleClick, onSave, changeGroupSelect, hideDialog }}\r\n                />\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport CustomInput from '../../common/CustomInput';\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from '../../common/withNewGroupControl';\r\n\r\nconst NamesSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Key</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    <option value=\"\">...</option>\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"0\">Text</option>\r\n                    <option value=\"1\">Heading</option>\r\n                    <option value=\"2\">Heading Heading Heading Heading</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n\r\n            <span>Active</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n            <span>Style name (English)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (German)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (Russian)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (French)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"decorators\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(NamesSection);","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst WordExportSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Style name in WORD</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n            \r\n            <span>Soft return</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","export const listStyleType = [\r\n  {\r\n    name: '1, 2, 3',\r\n    value: 'decimal',\r\n  },\r\n  {\r\n    name: 'A, B, C',\r\n    value: 'upper-alpha',\r\n  },\r\n  {\r\n    name: 'a, b, c',\r\n    value: 'lower-alpha',\r\n  },\r\n  {\r\n    name: 'I, II, III',\r\n    value: 'upper-roman',\r\n  },\r\n  {\r\n    name: 'i, ii, iii',\r\n    value: 'lower-roman',\r\n  },\r\n];\r\n\r\nexport const backSpaceActions = [\r\n  { key: 'merge', value: 'Merge' },\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'remove_pd', value: 'Remove PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const returnOnEmptySectionActions = [\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'create_new_section', value: 'Create new section' },\r\n  { key: 'apply_default_pd', value: 'Apply default PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const decoratorsList = [\r\n    { name: \"...\", value: null },\r\n    { name: \"Text 0\", value: \"quick_text_0\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n];\r\n\r\nexport const alignmentsMap = {\r\n  center: \"center\",\r\n  left: \"flex-start\",\r\n  right: \"flex-end\",\r\n  justify: \"flex-start\",\r\n};\r\n\r\nexport const numberingSets = {\r\n  decimal: [\"1\", \"2\", \"3\", \"4\"],\r\n  [\"upper-alpha\"]: [\"A\", \"B\", \"C\", \"D\"],\r\n  [\"lower-alpha\"]: [\"a\", \"b\", \"c\", \"d\"],\r\n  [\"upper-roman\"]: [\"I\", \"II\", \"III\", \"IV\"],\r\n  [\"lower-roman\"]: [\"i\", \"ii\", \"iii\", \"iv\"],\r\n};\r\n\r\nexport const bulletNamesMap = {\r\n  bulletpoint: \"•\",\r\n  dash: \"—\",\r\n  star: \"★\",\r\n};","import PositioningSection from \"./PositioningSection.js\";\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport CustomInput from 'components/common/CustomInput';\r\nimport CustomInputShort from 'components/common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from 'constants.js'\r\n\r\nimport './style.css';\r\n\r\nconst PositioningSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <NativeSelect id=\"r1c2\" input={ <CustomInputShort /> }>\r\n                <option value={null}>...</option>\r\n                <option value=\"0\">0</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </NativeSelect>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <NativeSelect id=\"r3c2\" input={ <CustomInput /> }>\r\n                {backSpaceActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n            <span id=\"r4c1\">At the beginning of a section WITHOUT content</span>\r\n            <NativeSelect id=\"r4c2\" input={ <CustomInput /> }>\r\n                {returnOnEmptySectionActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n\r\n            <div id=\"r5\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n            <span id=\"r6c1\">Style of next section</span>\r\n            <NativeSelect id=\"r6c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r7c1\">In empty section change current style to</span>\r\n            <NativeSelect  id=\"r7c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n\r\n            <div id=\"r8\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n            <span id=\"r9c1\">TAB – change current style to</span>\r\n            <NativeSelect  id=\"r9c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r10c1\">SHIFT+TAB – change current style to</span>\r\n            <NativeSelect  id=\"r10c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { listStyleType } from '../../../constants'\r\n\r\nconst ListSection = ({ isList, listType, changeIsList, changeListType, bulletField, changeBulletField }) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><div className=\"listSection-firstSpan\"><span>Is it a list?</span></div></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><span>List name</span></li>\r\n                            <li><span>Order level</span></li>\r\n                            <li><span>Prefix</span></li>\r\n                            <li><span>Suffix</span></li>\r\n                            <li><span>Suffix distance</span></li>\r\n                            <li><span>Magic Tabs</span></li>\r\n                            <li><span>Type of list</span></li>\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><Checkbox color=\"primary\" checked={isList} onChange={changeIsList} /></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value={null}>...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value=\"0.5\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </li>\r\n                            <li><Checkbox color=\"primary\" /></li>\r\n                            <li>\r\n                                <NativeSelect value={listType} onChange={changeListType} input={ <CustomInput /> }>\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Bullet character</span></li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Numbering style</span></li>\r\n                                    <li><span>Continue numbering after interruption</span></li>\r\n                                    <li><span>Allow restart numbering</span></li>\r\n                                    <li><span>Include previous levels from</span></li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                <li></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <TextField \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"paragraphDecorators-dialog__bullet-input\" \r\n                                            onChange={changeBulletField}\r\n                                            value={bulletField}\r\n                                         />                                            \r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            { bulletField ? `Unicode: ${bulletField.charCodeAt(0).toString(16)}` : \"\"}\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            {listStyleType.map(style => (\r\n                                              <option value={style.value} key={style.value}>{style.name}</option>\r\n                                            ))}                                    \r\n                                        </NativeSelect>\r\n                                    </li>\r\n                                    <li><Checkbox color=\"primary\" /></li>\r\n                                    <li><Checkbox color=\"primary\" checked={true} /></li>\r\n                                    <li>\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            <option value={null}>...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            Preview: А.1.1\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ListSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from \"../../common/withNewGroupControl\";\r\n\r\nconst ReferencingSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Reference group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"\">none</option>\r\n                    <option value=\"0\">Reference group 1</option>\r\n                    <option value=\"1\">Reference group 2</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"xref\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(ReferencingSection);","import { numberingSets, bulletNamesMap } from \"constants.js\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n}\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n}\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = ({ isOrderedList, numberingStyle, listItem, unicodeChar }) => {\r\n    if (isOrderedList) {\r\n        return numberingSets[numberingStyle];\r\n    }\r\n    const newBullet = bulletNamesMap[listItem] || unicodeChar;\r\n    return Array(4).fill(newBullet);\r\n}","import * as React from 'react';\r\nimport deepEqual from 'fast-deep-equal';\r\nimport * as PropTypes from 'prop-types';\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, ' ');\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === 'function' ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== 'function' ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || 'div', Object.assign({}, props, { ref: typeof innerRef === 'function' ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport ContentEditable from \"components/common/ContentEditable\";\r\nimport { getOffset, selectAllEditableContent } from \"utils.js\"\r\n\r\nconst Preview = ({previewText, changePreviewText, previewStyle}) => {\r\n    const { verticalAlign, fontSize } = previewStyle;\r\n\r\n    const editableContentStyle = {\r\n        ...previewStyle, \r\n        outline: \"none\",\r\n        marginTop: `${parseFloat(previewStyle.marginTop) + getOffset(verticalAlign, fontSize)}pt`,\r\n        marginBottom: `${parseFloat(previewStyle.marginBottom) - getOffset(verticalAlign, fontSize)}pt`,\r\n    };\r\n\r\n    const demonstrationElementClassName = \"demonstrationElement\";\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div \r\n                className=\"preview-content preview-content_withPointer\" \r\n                onClick={selectAllEditableContent(demonstrationElementClassName)}\r\n            >\r\n                <div className={demonstrationElementClassName}>\r\n                    <ContentEditable\r\n                        className={`${demonstrationElementClassName}-text`}\r\n                        onChange={changePreviewText} \r\n                        html={previewText}\r\n                        style={editableContentStyle}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preview;","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"utils.js\";\r\nimport Preview from \"components/common/Preview\";\r\nimport CustomInput from \"components/common/CustomInput\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = (props) => {\r\n    const { previewProps, fontSize, changeFontSize, fontColor, changeFontColor, fontColorName,\r\n        changeFontColorName,\r\n        font, \r\n        changeFont,\r\n        alignment, changeAlignment,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,\r\n        stroke, changeStroke, \r\n        verticalAlign, changeVerticalAlign,\r\n        textTransform, changeTextTransform} = props;\r\n\r\n        const correctColor = getCorrectColor(fontColor);\r\n\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeFont}\r\n                >\r\n                    <option value={\"Roboto, slab-serif\"}>Roboto</option>\r\n                    <option value={\"'Source Serif Pro', serif\"}>Source Serif</option>\r\n                </NativeSelect>\r\n\r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(\"12\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                    value={fontColorName}\r\n                    onChange={changeFontColorName}\r\n                    onClick={selectAllOnClick(\"Black\")}\r\n                />\r\n\r\n                <span>Font color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\" \r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={fontColor}\r\n                        onChange={changeFontColor}\r\n                        onClick={selectAllOnClick(\"000\")}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_indented\">\r\n            <span>Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox labeledCheckbox_topIndented\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Sub/Superscript</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={verticalAlign} \r\n                    onChange={changeVerticalAlign} \r\n                >\r\n                    <option value=\"baseline\">None</option>\r\n                    <option value=\"sub\">Subscript</option>\r\n                    <option value=\"super\">Superscript</option>\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TypographySection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { selectAllOnClick } from \"utils.js\";\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport Preview from \"components/common/Preview\";\r\n\r\nconst DistancesSection = (props) => {\r\n    const {\r\n        previewProps,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        changeFirstRowIndent,\r\n        changeOtherRowsIndent,\r\n        changeLineSpacing,\r\n        marginTop, changeMarginTop,\r\n        marginBottom, changeMarginBottom,\r\n        wordSpacing, changeWordSpacing,\r\n        customLineSpacing, changeCustomLineSpacing,\r\n    } = props;\r\n    \r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Margin top</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginTop}\r\n                        onChange={changeMarginTop}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>Margin bottom</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginBottom}\r\n                        onChange={changeMarginBottom}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>1st row indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={firstRowIndent}\r\n                        onChange={changeFirstRowIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Other rows indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={otherRowsIndent}\r\n                        onChange={changeOtherRowsIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Line spacing</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInputShort /> } \r\n                        value={lineSpacing} \r\n                        onChange={changeLineSpacing} \r\n                    >\r\n                        <option value=\"1.0\">1.0</option>\r\n                        <option className=\"highlightedOption\" value=\"1.15\">1.15</option>\r\n                        <option value=\"1.5\">1.5</option>\r\n                        <option value=\"2.0\">2.0</option>\r\n                        <option value=\"2.5\">2.5</option>\r\n                        <option value=\"3.0\">3.0</option>\r\n                        <option value=\"custom\">Custom</option>\r\n                    </NativeSelect> \r\n                    {\r\n                    lineSpacing === \"custom\" && \r\n                    (\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                        />                                            \r\n                    )\r\n                }\r\n                </div>\r\n                   \r\n                    \r\n                <span>Word spacing</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={wordSpacing}\r\n                        onChange={changeWordSpacing}\r\n                        onClick={selectAllOnClick(\"0\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DistancesSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default FrameTypeInput;","import FramesSection from \"./FramesSection.js\";\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport { getCorrectColor, selectAllOnClick } from 'utils.js';\r\nimport FrameTypeInput from 'components/NewDecDialog/sections/FramesSection/FrameTypeInput';\r\n\r\nimport \"./style.css\";\r\n\r\nconst FramesSection = (props) => {\r\n    const { \r\n        leftBorder, \r\n        rightBorder, \r\n        topBorder, \r\n        bottomBorder, \r\n        changeLeftBorder,\r\n        changeRightBorder,\r\n        changeTopBorder,\r\n        changeBottomBorder,\r\n        borderColor,\r\n        changeBorderColor,\r\n        borderThickness,\r\n        changeBorderThickness,\r\n        borderType,\r\n        changeBorderType,\r\n        borderColorName,\r\n        changeBorderColorName,\r\n     } = props;\r\n\r\n     const correctColor = getCorrectColor(borderColor);\r\n     const colorSampleStyle = {\r\n         backgroundColor: `#${correctColor}`,\r\n     };\r\n     const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n     const previewStyle = {\r\n         borderLeft: leftBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginLeft: leftBorder ? \"0\" : previewBorderWidth, \r\n         borderRight: rightBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginRight: rightBorder ? \"0\" : previewBorderWidth, \r\n         borderTop: topBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginTop: topBorder ? \"0\" : previewBorderWidth, \r\n         borderBottom: bottomBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginBottom: bottomBorder ? \"0\" : previewBorderWidth, \r\n     };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"directionControlsContainer\">\r\n                <div className=\"directionsControls\" style={previewStyle}>\r\n                    <span className=\"directionLabel\">Left</span>\r\n                    <div className=\"centralColumn\">\r\n                        <span className=\"directionLabel\">Top</span>\r\n                        <div className=\"checkboxesKit crossGrid\">\r\n                            <div id=\"r1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={topBorder}  \r\n                                    onChange={changeTopBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={leftBorder}  \r\n                                    onChange={changeLeftBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c2\" className=\"gridCell\">\r\n                            </div>\r\n                            <div id=\"r2c3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={rightBorder}  \r\n                                    onChange={changeRightBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={bottomBorder}  \r\n                                    onChange={changeBottomBorder}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"directionLabel\">Bottom</span>\r\n                    </div>\r\n                    <span className=\"directionLabel\">Right</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Frame color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    value={borderColorName}\r\n                    onChange={changeBorderColorName}\r\n                    onClick={selectAllOnClick(\"Red\")}\r\n                />\r\n\r\n                <span>Frame color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\" \r\n                        InputProps={{\r\n                           startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={borderColor}\r\n                        onChange={changeBorderColor}\r\n                        onClick={selectAllOnClick(\"f00\")}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n                \r\n\r\n                <span>Frame thickness</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={borderThickness}\r\n                        onChange={changeBorderThickness}\r\n                        onClick={selectAllOnClick(\"2\")}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>                        \r\n\r\n                <span>Type of frame</span>\r\n                <div >\r\n                    <Select\r\n                      input={<FrameTypeInput />}\r\n                      value={borderType}\r\n                      onChange={changeBorderType}\r\n                    >\r\n                        <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                        <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                        <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                        <MenuItem value=\"double\">══════</MenuItem>              \r\n                    </Select>\r\n                </div>\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox color=\"primary\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { getCorrectColor, selectAllOnClick } from 'utils.js';\r\nimport Preview from \"components/common/Preview\";\r\n\r\nconst  FillingSection = (props) => {\r\n    const { \r\n        previewProps, \r\n        fillingColor, changeFillingColor, \r\n        fillingColorName, changeFillingColorName,\r\n        connectToPrevious, changeConnectToPrevious,\r\n     } = props;\r\n        const correctColor = getCorrectColor(fillingColor);\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color name</span>\r\n                <div>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        className=\"middleSizeTextInput\" \r\n                        value={fillingColorName}\r\n                        onChange={changeFillingColorName}\r\n                    />\r\n                </div>\r\n\r\n                <span>Filling color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\" \r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={fillingColor}\r\n                        onChange={changeFillingColor}\r\n                        onClick={selectAllOnClick()}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox \r\n                        color=\"primary\" \r\n                        checked={connectToPrevious} \r\n                        onChange={changeConnectToPrevious} \r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FillingSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nconst TocSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li><span>ToC indentation</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>                    \r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={null}>...</option>\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TocSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst ShortCutSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Windows</span></li>\r\n                    <li><span>Mac</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ShortCutSection;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { getOffset } from \"utils.js\";\r\n\r\nconst ListPreview = (props) => {\r\n    const { \r\n        listPreviewStyle, \r\n        listChars, \r\n        prefix, \r\n        suffix, \r\n        suffixDistance, \r\n        sideNumberStyle,\r\n    } = props;\r\n    console.log(1);\r\n\r\n    const demonstrationElementClassName = \"demonstrationElement\";\r\n    const listItemsBeginnings = listChars.map(listChar => {\r\n        return (`${prefix}${listChar}${suffix}`);\r\n    });\r\n    const listItemBeginingStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className={demonstrationElementClassName}>\r\n                    <div\r\n                        className={`${demonstrationElementClassName}-text`}\r\n                        style={listPreviewStyle}\r\n                    >\r\n                        <p>\r\n                            <span><span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[0]}`}</span> The first list item</span>\r\n                            <br /><br />\r\n                            <span><span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[1]}`}</span> The second list item</span>\r\n                            <br /><br />\r\n                            <span><span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[2]}`}</span> The third list item</span>\r\n                            <br /><br />\r\n                            <span><span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[3]}`}</span> The fourth list item</span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListPreview;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport ListPreview from 'components/common/Preview/ListPreview';\r\nimport CustomInput from 'components/common/CustomInput';\r\nimport CustomInputShort from 'components/common/CustomInputShort';\r\nimport { listStyleType, bulletNamesMap } from 'constants.js'\r\nimport { getCorrectColor, selectAllOnClick, scrollToBottom } from 'utils.js';\r\n\r\nconst TestSection = (props) => {\r\n    const {\r\n        listPreviewProps,\r\n        isList, changeIsList, \r\n        listType, changeListType, \r\n        listName, changeListName,\r\n        prefix, changePrefix,\r\n        suffix, changeSuffix,\r\n        orderLevel, changeOrderLevel,\r\n        suffixDistance, changeSuffixDistance,\r\n        magicTabs, changeMagicTabs,\r\n        listItem, changeListItem,\r\n        unicodeNumber, changeUnicodeNumber,\r\n        unicodeChar, changeUnicodeChar,\r\n        numberingStyle, changeNumberingStyle,\r\n        continueNumbering, changeContinueNumbering,\r\n        allowRestartNumbering, changeAllowRestartNumbering,\r\n        includePreviousFrom, changencludePreviousFrom,\r\n        sideNumber, changeSideNumber,\r\n        sideNumberFont, changeSideNumberFont,\r\n        sideNumberAlignment, changeSideNumberAlignment,\r\n        sideNumberFontSize, changeSideNumberFontSize,\r\n        sideNumberFontColor, changeSideNumberFontColor,\r\n        sideNumberFillingColor, changeSideNumberFillingColor,\r\n        sideNumberPadding, changeSideNumberPadding,\r\n        sideNumberRadius, changeSideNumberRadius,\r\n    } = props;\r\n\r\n    const onListTypeChange = (...args) => {\r\n        changeListType(...args);\r\n        scrollToBottom(\"content-rightSide\");\r\n    };\r\n\r\n    const onSideNumberChange = (...args) => {\r\n        changeSideNumber(...args);\r\n        scrollToBottom(\"content-rightSide\");\r\n    };\r\n\r\n    const fontColorSampleStyle = {\r\n        backgroundColor: `#${getCorrectColor(sideNumberFontColor)}`,\r\n    };\r\n\r\n    const fillingColorSampleStyle = {\r\n        backgroundColor: `#${getCorrectColor(sideNumberFillingColor)}`,\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                    <div className=\"listSection-firstSpan\">\r\n                        <span>Is it a list?</span>\r\n                    </div>\r\n                    <div>\r\n                        <Checkbox \r\n                            color=\"primary\" \r\n                            checked={isList} \r\n                            onChange={changeIsList} \r\n                        />\r\n                    </div>\r\n                    { isList && (\r\n                        <>\r\n                            <span>List name</span>\r\n                            <TextField\r\n                                value={listName}\r\n                                onChange={changeListName} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                            />\r\n\r\n                            <span>Order level</span>\r\n                            <div>\r\n                                <NativeSelect\r\n                                    value={orderLevel}\r\n                                    onChange={changeOrderLevel}\r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    <option value=\"\">...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n\r\n                            <span>Prefix</span>\r\n                            <TextField\r\n                                value={prefix}\r\n                                onChange={changePrefix} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                            />\r\n\r\n                            <span>Suffix</span>\r\n                            <TextField\r\n                                value={suffix}\r\n                                onChange={changeSuffix} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                onClick={selectAllOnClick(\".\")}\r\n                            />\r\n\r\n                            <span>Suffix distance</span>\r\n                            <div className=\"inputWithAdornment\">\r\n                                <NativeSelect\r\n                                    value={suffixDistance}\r\n                                    onChange={changeSuffixDistance} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                     <option value=\"0\">0</option>\r\n                                     <option value=\"0.1\">0.1</option>\r\n                                    <option value=\"0.25\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </div>\r\n\r\n                            <span>Magic Tabs</span>\r\n                            <div>\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={magicTabs} \r\n                                    onChange={changeMagicTabs} \r\n                                />\r\n                            </div>\r\n\r\n                            <span>Type of list</span>\r\n                            <div>\r\n                                <NativeSelect \r\n                                    value={listType} \r\n                                    onChange={onListTypeChange} \r\n                                    input={ <CustomInput /> }\r\n                                >\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </>\r\n                    ) }\r\n                </div>\r\n                <ListPreview {...listPreviewProps} />\r\n            </div>\r\n\r\n            <div className=\"listSection-typeSettings\">\r\n                { isList && listType === \"unordered\" && (\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listSection-firstSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={changeListItem} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Object.entries(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"individual\"}>Custom</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        {   listItem === \"individual\" && (\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Unicode number</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeNumber}\r\n                                            onChange={changeUnicodeNumber}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"unicodeInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Char</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeChar}\r\n                                            onChange={changeUnicodeChar}\r\n                                            onClick={selectAllOnClick()}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"bulletInput\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                        ) }\r\n                    </div> \r\n                ) }\r\n\r\n                { isList && (listType === \"ordered\" || listType === \"sideNumber\") && (\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <span>Numbering style</span>\r\n                        <div>\r\n                            <NativeSelect\r\n                                value={numberingStyle}\r\n                                onChange={changeNumberingStyle}\r\n                                input={ <CustomInputShort /> }\r\n                            >\r\n                                {listStyleType.map(style => (\r\n                                  <option value={style.value} key={style.value}>{style.name}</option>\r\n                                ))}                                    \r\n                            </NativeSelect>\r\n                        </div>\r\n                                \r\n                        <span>Continue numbering after interruption</span>\r\n                        <div>\r\n                            <Checkbox\r\n                                checked={continueNumbering}\r\n                                onChange={changeContinueNumbering}\r\n                                color=\"primary\" \r\n                            />\r\n                        </div>\r\n                                \r\n                        <span>Allow restart numbering</span>\r\n                        <div>\r\n                            <Checkbox\r\n                                checked={allowRestartNumbering} \r\n                                onChange={changeAllowRestartNumbering}\r\n                                color=\"primary\" \r\n                            />\r\n                        </div>\r\n\r\n                        <span>Include previous levels from</span>\r\n                        <div>\r\n                            <NativeSelect\r\n                                value={includePreviousFrom} \r\n                                onChange={changencludePreviousFrom}\r\n                                input={ <CustomInputShort /> }\r\n                            >\r\n                                <option value=\"\">...</option>\r\n                                <option value=\"0\">0</option>\r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"2\">2</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                            </NativeSelect>\r\n                        </div>\r\n\r\n                        <span>Side number</span>\r\n                        <div>\r\n                            <Checkbox\r\n                                checked={sideNumber}\r\n                                onChange={onSideNumberChange}\r\n                                color=\"primary\" \r\n                            />\r\n                        </div>\r\n                    </div> \r\n                ) }\r\n\r\n                { isList && listType === \"sideNumber\" && (\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <span>Side number</span>\r\n                    </div> \r\n                ) }\r\n\r\n                { isList && listType === \"ordered\" && sideNumber && (\r\n                    <div className=\"dialogGrid dialogGrid_2minCols listSection-typeSettings\">\r\n                        <span>Font</span>\r\n                        <NativeSelect \r\n                            value={sideNumberFont}\r\n                            onChange={changeSideNumberFont}\r\n                            input={ <CustomInput /> }\r\n                        >\r\n                            <option value={\"Roboto, slab-serif\"}>Roboto</option>\r\n                            <option value={\"'Source Serif Pro', serif\"}>Source Serif</option>\r\n                        </NativeSelect>\r\n\r\n                        <span>Alignment</span>\r\n                        <NativeSelect \r\n                            value={sideNumberAlignment}\r\n                            onChange={changeSideNumberAlignment}\r\n                            input={ <CustomInput /> }\r\n                        >\r\n                            <option value={\"left\"}>Left</option>\r\n                            <option value={\"center\"}>Center</option>\r\n                            <option value={\"right\"}>Right</option>\r\n                        </NativeSelect>\r\n\r\n                        <span>Font size</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                value={sideNumberFontSize}\r\n                                onChange={changeSideNumberFontSize}\r\n                                onClick={selectAllOnClick(\"12\")}\r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>      \r\n\r\n                        <span>Font color</span>\r\n                        <div className=\"colorField\">\r\n                            <TextField \r\n                                value={sideNumberFontColor}\r\n                                onChange={changeSideNumberFontColor}\r\n                                onClick={selectAllOnClick(\"FFF\")}\r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\" \r\n                                InputProps={{\r\n                                    startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                                }}\r\n                            />\r\n                            <div className=\"colorSample\" style={fontColorSampleStyle}></div>\r\n                        </div>\r\n\r\n                        <span>Filling color</span>\r\n                        <div className=\"colorField\">\r\n                            <TextField \r\n                                value={sideNumberFillingColor}\r\n                                onChange={changeSideNumberFillingColor}\r\n                                onClick={selectAllOnClick(\"1E88E5\")}\r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\" \r\n                                InputProps={{\r\n                                    startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                                }}\r\n                            />\r\n                            <div className=\"colorSample\" style={fillingColorSampleStyle}></div>\r\n                        </div>\r\n\r\n                        <span>Padding</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                value={sideNumberPadding}\r\n                                onChange={changeSideNumberPadding}\r\n                                onClick={selectAllOnClick(\"12\")}\r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>    \r\n\r\n                        <span>Radius</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                value={sideNumberRadius}\r\n                                onChange={changeSideNumberRadius}\r\n                                onClick={selectAllOnClick(\"5\")}\r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>    \r\n                    </div> \r\n                ) }\r\n            </div>\r\n             \r\n        </>\r\n    );\r\n};\r\n\r\nexport default TestSection;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\n\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: 'initial',\r\n      backgroundColor: 'white',\r\n      transition: '0.2s',\r\n\r\n      '&:before': {\r\n        transition: '0.2s',\r\n      },\r\n\r\n      '&:hover': {\r\n        color: '#000',\r\n      },\r\n      '&$selected': {\r\n        backgroundColor: '#2196f3',\r\n        color: 'white',\r\n        opacity: 1,\r\n      },\r\n      '&:hover:active': {\r\n        backgroundColor: 'white',\r\n        transition: '0.2s',\r\n      },\r\n      '&$selected:hover:active': {\r\n        backgroundColor: '#2ca4ff',\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import Tabs from '@material-ui/core/Tabs';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTabs = withStyles(theme => ({\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n      }\r\n  }))(Tabs);\r\n\r\n  export default CustomTabs;","import { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1150px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        '&:after': {\r\n            height: '100%',\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: '1280px',\r\n        maxHeight: '850px',\r\n        minHeight: '550px',\r\n        width: 'calc(100% - 96px)',\r\n        height: 'calc(100% - 96px)',\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        border: 'none',\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: 'middle',\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","import React from 'react';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport NamesSection from './sections/NamesSection';\r\nimport WordExportSection from './sections/WordExportSection';\r\nimport PositioningSection from './sections/PositioningSection';\r\nimport ListSection from './sections/ListSection';\r\nimport ReferencingSection from './sections/ReferencingSection';\r\nimport TypographySection from './sections/TypographySection';\r\nimport DistancesSection from './sections/DistancesSection';\r\nimport FramesSection from './sections/FramesSection';\r\nimport FillingSection from './sections/FillingSection';\r\nimport TocSection from './sections/TocSection';\r\nimport ShortCutsSection from './sections/ShortCutsSection';\r\nimport TestSection from './sections/TestSection';\r\n\r\nimport theme from '../../theme';\r\nimport CustomTab from '../common/CustomTab';\r\nimport CustomTabs from '../common/CustomTabs';\r\nimport CustomDialog from '../common/CustomDialog';\r\nimport { \r\n    getCorrectColor, \r\n    getUnstyledText, \r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n    getListChars } from 'utils.js';\r\nimport { alignmentsMap } from 'constants.js';\r\n\r\nimport \"./style.css\";\r\n\r\nclass NewDecDialog extends React.Component {\r\n    state = { \r\n        openedTab: 11,\r\n        isList: true,\r\n        listType: \"unordered\",\r\n        bulletField: \"\",\r\n        verticalAlign: \"baseline\",\r\n        textTransform: \"none\",\r\n        leftBorder: false,\r\n        rightBorder: false,\r\n        topBorder: false,\r\n        bottomBorder: false,\r\n        borderType: \"solid\",\r\n        borderColor: \"f00\",\r\n        borderColorName: \"Red\",\r\n        borderThickness: \"2\",\r\n        fontSize: \"12\",\r\n        fontColor: \"000\",\r\n        fontColorName: \"Black\",\r\n        alignment: \"left\",\r\n        font: \"Roboto\",\r\n        fillingColor: \"\",\r\n        fillingColorName: \"\",\r\n        firstRowIndent: \"0\",\r\n        otherRowsIndent: \"0\",\r\n        lineSpacing: \"1.15\",\r\n        customLineSpacing: \"\",\r\n        previewText: `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`,\r\n        bold: false,\r\n        italic: false,\r\n        underlined: false,\r\n        stroke: false,\r\n        connectToPrevious: false,\r\n        marginTop: \"6\",\r\n        marginBottom: \"6\",\r\n        wordSpacing: \"0\",   \r\n        listName: \"\",\r\n        prefix: \"\",\r\n        suffix: \"\",\r\n        orderLevel: \"\",\r\n        suffixDistance: \"0\",\r\n        magicTabs: false,\r\n        listItem: \"bulletpoint\",\r\n        unicodeNumber: \"\",\r\n        unicodeChar: \"\",\r\n        numberingStyle: \"decimal\",\r\n        continueNumbering: true,\r\n        allowRestartNumbering: true,\r\n        includePreviousFrom: \"\",\r\n        sideNumber: false,\r\n        sideNumberFont: \"Roboto\",\r\n        sideNumberAlignment: \"left\",\r\n        sideNumberFontSize: \"12\",\r\n        sideNumberFontColor: \"FFF\",\r\n        sideNumberFillingColor: \"1E88E5\",\r\n        sideNumberPadding: \"5\",\r\n        sideNumberRadius: \"10\",\r\n    };\r\n\r\n    toggleStateProperty = (propName) => (e) => {\r\n        this.setState({\r\n            [propName]: e.target.checked\r\n        });\r\n    };\r\n\r\n    setStateProperty = (propName) => (e, secondArg = \"\") => {\r\n        const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n        this.setState({\r\n            [propName]: newValue,\r\n        });\r\n    };\r\n\r\n    setBullet = (propName) => (e) => {\r\n        const newBullet = e.target.value.length > 1 ? e.target.value[e.target.value.length - 1] : e.target.value;\r\n        this.setState({\r\n            [propName]: newBullet,\r\n        });\r\n        return newBullet;\r\n    };\r\n\r\n    setColor = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n        \r\n        const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                              : \"\" ;\r\n        \r\n        if (filteredInput !== this.state[propName]) {\r\n            this.setState({\r\n                [propName]: filteredInput,\r\n            });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    setNumber = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n\r\n        const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                              ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                              : \"\" ;\r\n\r\n        if (filteredInput !== this.state[propName]) {\r\n          this.setState({\r\n              [propName]: filteredInput,\r\n          });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, onClose } = this.props;\r\n        const { setStateProperty, toggleStateProperty, setNumber, setColor, setBullet } = this;\r\n        const { openedTab, \r\n                isList, \r\n                listType, \r\n                verticalAlign, \r\n                textTransform,\r\n                leftBorder, \r\n                rightBorder,\r\n                topBorder,\r\n                bottomBorder, \r\n                borderType,\r\n                borderColor,\r\n                borderColorName,\r\n                fontColor,\r\n                fillingColor,\r\n                borderThickness,\r\n                firstRowIndent,\r\n                otherRowsIndent,\r\n                lineSpacing,\r\n                customLineSpacing,\r\n                previewText,\r\n                fontSize,\r\n                fontColorName,\r\n                font,\r\n                alignment,\r\n                bold,\r\n                italic,\r\n                underlined,\r\n                stroke,\r\n                fillingColorName,\r\n                connectToPrevious,\r\n                marginTop,\r\n                marginBottom,\r\n                wordSpacing,\r\n                listName,\r\n                prefix,\r\n                suffix,\r\n                orderLevel,\r\n                suffixDistance,\r\n                magicTabs,\r\n                listItem,\r\n                unicodeNumber,\r\n                unicodeChar,\r\n                numberingStyle,\r\n                continueNumbering,\r\n                allowRestartNumbering,\r\n                includePreviousFrom,\r\n                sideNumber,\r\n                sideNumberFont,\r\n                sideNumberAlignment,\r\n                sideNumberFontSize,\r\n                sideNumberFontColor,\r\n                sideNumberFillingColor,\r\n                sideNumberPadding,\r\n                sideNumberRadius,\r\n            } = this.state;\r\n\r\n        const changeOpenedTab = setStateProperty(\"openedTab\");\r\n        const changeIsList = toggleStateProperty(\"isList\");\r\n        const changeVerticalAlign = setStateProperty(\"verticalAlign\");\r\n        const changeTextTransform = setStateProperty(\"textTransform\");\r\n        const changeLeftBorder = toggleStateProperty(\"leftBorder\");\r\n        const changeRightBorder = toggleStateProperty(\"rightBorder\");\r\n        const changeTopBorder = toggleStateProperty(\"topBorder\");\r\n        const changeBottomBorder = toggleStateProperty(\"bottomBorder\");\r\n        const changeBorderColor = setColor(\"borderColor\");\r\n        const changeFontColor = setColor(\"fontColor\");\r\n        const changeFillingColor = setColor(\"fillingColor\");\r\n        const changeBorderThickness = setNumber(\"borderThickness\");\r\n        const changeFirstRowIndent = setNumber(\"firstRowIndent\");\r\n        const changeOtherRowsIndent = setNumber(\"otherRowsIndent\");\r\n        const changeLineSpacing = setStateProperty(\"lineSpacing\");\r\n        const changeCustomLineSpacing = setNumber(\"customLineSpacing\");\r\n        const changeBorderColorName = setStateProperty(\"borderColorName\");\r\n        const changeFontSize = setNumber(\"fontSize\");\r\n        const changeFontColorName = setStateProperty(\"fontColorName\");\r\n        const changeFont = setStateProperty(\"font\");\r\n        const changeAlignment = setStateProperty(\"alignment\");\r\n        const changeBold = toggleStateProperty(\"bold\");\r\n        const changeItalic = toggleStateProperty(\"italic\");\r\n        const changeUnderlined = toggleStateProperty(\"underlined\");\r\n        const changeStroke = toggleStateProperty(\"stroke\");\r\n        const changeFillingColorName = setStateProperty(\"fillingColorName\");\r\n        const changeConnectToPrevious = toggleStateProperty(\"connectToPrevious\");\r\n        const changeMarginTop = setNumber(\"marginTop\");\r\n        const changeMarginBottom = setNumber(\"marginBottom\");\r\n        const changeWordSpacing = setNumber(\"wordSpacing\");\r\n        const changeListName = setStateProperty(\"listName\");\r\n        const changePrefix = setStateProperty(\"prefix\");\r\n        const changeSuffix = setStateProperty(\"suffix\");\r\n        const changeOrderLevel = setStateProperty(\"orderLevel\");\r\n        const changeSuffixDistance = setStateProperty(\"suffixDistance\");\r\n        const changeMagicTabs = toggleStateProperty(\"magicTabs\");\r\n        const changeListItem = setStateProperty(\"listItem\");\r\n        const changeNumberingStyle = setStateProperty(\"numberingStyle\");\r\n        const changeContinueNumbering = toggleStateProperty(\"continueNumbering\");\r\n        const changeAllowRestartNumbering = toggleStateProperty(\"allowRestartNumbering\");\r\n        const changencludePreviousFrom = setStateProperty(\"includePreviousFrom\");\r\n        const changeSideNumberFont = setStateProperty(\"sideNumberFont\");\r\n        const changeSideNumberAlignment = setStateProperty(\"sideNumberAlignment\");\r\n        const changeSideNumberFontSize = setNumber(\"sideNumberFontSize\");\r\n        const changeSideNumberFontColor = setColor(\"sideNumberFontColor\");\r\n        const changeSideNumberFillingColor = setColor(\"sideNumberFillingColor\");\r\n        const changeSideNumberPadding = setNumber(\"sideNumberPadding\");\r\n        const changeSideNumberRadius = setNumber(\"sideNumberRadius\");\r\n\r\n        const changeListType = e => {\r\n            const { value } = e.target;\r\n            setStateProperty(\"listType\")(null, value);\r\n            if (value === \"ordered\" && suffix === \"\") {\r\n                setStateProperty(\"suffix\")(null, \".\");\r\n            } else if (value === \"unordered\" && suffix === \".\") {\r\n                setStateProperty(\"suffix\")(null, \"\");\r\n            }\r\n        };\r\n\r\n        const changeSideNumber = e => {\r\n            toggleStateProperty(\"sideNumber\")(e);\r\n            if (e.target.value && suffix === \".\");\r\n            setStateProperty(\"suffix\")(null, \"\");\r\n        } \r\n        \r\n        const changeUnicodeChar = e => {\r\n            const newUnicodeChar = setBullet(\"unicodeChar\")(e);\r\n            const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n            setStateProperty(\"unicodeNumber\")(null, newUnicodeNumber);\r\n        };\r\n\r\n        const changeUnicodeNumber = e => {\r\n            const newUnicodeNumber = setColor(\"unicodeNumber\")(e);\r\n            const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n            setStateProperty(\"unicodeChar\")(null, newUnicodeChar);\r\n        };\r\n\r\n        const changePreviewText = e => {\r\n            const { value } = e.target;\r\n            if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n                setStateProperty(\"previewText\")(null, getUnstyledText(value));\r\n            } else {\r\n                setStateProperty(\"previewText\")(null, `<div><br></div>`);\r\n            }\r\n        };\r\n\r\n        const changeBorderType = e => {\r\n            setStateProperty(\"borderType\")(e);\r\n            if (e.target.value === \"double\" && borderThickness === \"2\") {\r\n                setStateProperty(\"borderThickness\")(null, \"3\");\r\n            }\r\n            if (e.target.value !== \"double\" && borderThickness === \"3\") {\r\n                setStateProperty(\"borderThickness\")(null, \"2\");\r\n            }\r\n         };\r\n\r\n        const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n        const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n        const previewAdditionalFillingColor = connectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n        const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n        const previewMarginLeft = otherRowsIndent ? `${otherRowsIndent >= 12 ? 12 : otherRowsIndent}cm` : 0;\r\n        const previewTextIndent = indentsDifference ? `${indentsDifference >= 12 ? 12 : indentsDifference}cm` : 0;\r\n\r\n        const previewStyle = {\r\n            fontSize: !fontSize ? \"0\" : `${fontSize <= 120 ? fontSize : 120}pt`,\r\n            color: `#${previewFontColor}`,\r\n            fontFamily: font,\r\n            alignItems: alignmentsMap[alignment],\r\n            textAlign: alignment,\r\n            fontWeight: bold ? \"bold\" : \"normal\",\r\n            fontStyle: italic ? \"italic\" : \"normal\",\r\n            textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n            verticalAlign,\r\n            textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n            fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n            backgroundColor: `#${previewFillingColor}`,\r\n            backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n            marginLeft: previewMarginLeft,\r\n            textIndent: previewTextIndent,\r\n            wordSpacing: `${wordSpacing || 0}pt`,\r\n            lineHeight: (lineSpacing !== \"custom\" ? lineSpacing : (!customLineSpacing ? \"1.15\" : `${customLineSpacing || 0}`)),\r\n            marginBottom: `${marginBottom || 0}pt`,\r\n            marginTop: `${marginTop || 0}pt`,\r\n        };\r\n\r\n        const previewProps = { previewText, changePreviewText, previewStyle };\r\n\r\n        const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"f5f5f5\");\r\n        const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n        const sideNumberStyle = !sideNumber ? {} : {\r\n                fontFamily: sideNumberFont,\r\n                textAlign: sideNumberAlignment,\r\n                fontSize: !sideNumberFontSize ? \"0\" : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n                color: `#${previewSideNumberFontColor}`,\r\n                backgroundColor: `#${previewSideNumberFillingColor}`,\r\n                padding: `${sideNumberPadding/4}pt ${sideNumberPadding}pt`,\r\n                borderRadius: `${sideNumberRadius}pt`,\r\n        };\r\n\r\n        const listPreviewProps = { \r\n            listChars: getListChars({\r\n                    isOrderedList: listType === \"ordered\", \r\n                    numberingStyle, \r\n                    listItem,\r\n                    unicodeChar,\r\n                }),\r\n            listPreviewStyle: previewStyle,\r\n            prefix, \r\n            suffix, \r\n            suffixDistance,\r\n            sideNumberStyle,\r\n         };\r\n\r\n        const listSectionProps = { \r\n            listPreviewProps,\r\n            isList, changeIsList, \r\n            listType, changeListType, \r\n            listName, changeListName,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            orderLevel, changeOrderLevel,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listItem, changeListItem,\r\n            unicodeNumber, changeUnicodeNumber,\r\n            unicodeChar, changeUnicodeChar,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changencludePreviousFrom,\r\n            sideNumber, changeSideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberPadding, changeSideNumberPadding,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n        };\r\n\r\n        const typographySectionProps = { \r\n            verticalAlign, \r\n            textTransform, \r\n            changeVerticalAlign, \r\n            changeTextTransform,\r\n            fontColor,\r\n            changeFontColor,\r\n            previewProps,\r\n            fontSize,\r\n            changeFontSize,\r\n            fontColorName,\r\n            changeFontColorName,\r\n            font, \r\n            changeFont,\r\n            alignment, changeAlignment,\r\n            bold, changeBold,\r\n            italic, changeItalic,\r\n            underlined, changeUnderlined,\r\n            stroke, changeStroke,\r\n        };\r\n\r\n        const distancesSectionProps = {\r\n            previewProps,\r\n            firstRowIndent,\r\n            otherRowsIndent,\r\n            lineSpacing,\r\n            changeFirstRowIndent,\r\n            changeOtherRowsIndent,\r\n            changeLineSpacing,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            wordSpacing, changeWordSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n        };\r\n\r\n        const framesSectionProps = { \r\n            leftBorder, \r\n            rightBorder, \r\n            topBorder, \r\n            bottomBorder, \r\n            changeLeftBorder, \r\n            changeRightBorder, \r\n            changeTopBorder, \r\n            changeBottomBorder, \r\n            borderColor,\r\n            changeBorderColor,\r\n            borderThickness,\r\n            changeBorderThickness,\r\n            borderType,\r\n            changeBorderType,\r\n            borderColorName,\r\n            changeBorderColorName,\r\n        };\r\n\r\n        const fillingSectionProps = { \r\n            fillingColor, \r\n            changeFillingColor,\r\n            fillingColorName,\r\n            changeFillingColorName,\r\n            previewProps,\r\n            connectToPrevious,\r\n            changeConnectToPrevious,\r\n        };\r\n        \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n            <CustomDialog\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"body\"\r\n                className=\"paragraphDecorators-dialog\"\r\n                fullWidth={true}\r\n                maxWidth={false}\r\n                id=\"dialog\"\r\n            >\r\n                <div className=\"header\">\r\n                    <DialogTitle className=\"header-title\">\r\n                        <p>Create new paragraph decorator</p>\r\n                    </DialogTitle>\r\n                    <div className=\"header-buttons\">\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick={onClose}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {}}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                    \r\n                <DialogContent className=\"content\">\r\n                    <div className=\"content-leftSide\">\r\n                        <CustomTabs \r\n                            className=\"dialogTabs\"\r\n                            value={openedTab} \r\n                            onChange={changeOpenedTab} \r\n                            orientation=\"vertical\"\r\n                            color=\"primary\"\r\n                            indicatorColor=\"primary\"\r\n                        >\r\n                            <CustomTab className=\"dialogTab\" label=\"Names\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"WORD export\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"List\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Test\" />\r\n                        </CustomTabs>\r\n                    </div>\r\n                    <div className=\"content-rightSide\">\r\n                        { openedTab === 0 && <NamesSection /> }\r\n                        { openedTab === 1 && <WordExportSection /> }\r\n                        { openedTab === 2 && <PositioningSection /> }\r\n                        { openedTab === 3 && <ListSection {...listSectionProps} />}\r\n                        { openedTab === 4 && <ReferencingSection /> }\r\n                        { openedTab === 5 && <TypographySection {...typographySectionProps} /> }\r\n                        { openedTab === 6 && <DistancesSection {...distancesSectionProps} /> }\r\n                        { openedTab === 7 && <FramesSection {...framesSectionProps} /> }\r\n                        { openedTab === 8 && <FillingSection {...fillingSectionProps} /> }\r\n                        { openedTab === 9 && <TocSection /> }\r\n                        { openedTab === 10 && <ShortCutsSection /> }\r\n                        { openedTab === 11 && <TestSection {...listSectionProps} /> }\r\n                    </div>\r\n                </DialogContent>\r\n            </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewDecDialog;","import React from 'react';\nimport './App.css';\n\nimport NewDecDialog from './components/NewDecDialog';\n\nclass App extends React.Component {\n  state = {\n    isOpen: true,\n  }\n\n  handleClick = () => {\n    this.setState(({ isOpen }) => {\n      return {\n        isOpen: !isOpen\n      };\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleClick}>Open</button>\n        <NewDecDialog \n          isOpen={this.state.isOpen}\n          onClose={() => {\n            this.setState({ isOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}