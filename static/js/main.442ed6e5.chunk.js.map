{"version":3,"sources":["components/common/CustomInput.js","components/NewDecDialog/sections/NamesSection.js","components/NewDecDialog/sections/WordExportSection.js","components/common/CustomInputShort.js","constants.js","components/NewDecDialog/sections/PositioningSection.js","components/NewDecDialog/sections/ListSection.js","components/NewDecDialog/sections/ReferencingSection.js","utils.js","components/NewDecDialog/sections/TypographySection.js","components/NewDecDialog/sections/DistancesSection.js","components/NewDecDialog/sections/FramesSection.js","components/NewDecDialog/sections/FillingSection.js","components/NewDecDialog/sections/TocSection.js","components/NewDecDialog/sections/ShortCutsSection.js","components/NewDecDialog/sections/TestSection.js","theme.js","components/common/CustomTab.js","components/common/CustomTabs.js","components/common/CustomDialog.js","components/NewDecDialog/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","NamesSection","props","className","TextField","variant","margin","NativeSelect","value","Button","color","Checkbox","WordExportSection","listStyleType","name","backSpaceActions","key","returnOnEmptySectionActions","decoratorsList","CustomInputShort","map","action","dec","ListSection","isList","listType","changeIsList","changeListType","bulletField","setBulletField","Fragment","checked","onChange","InputAdornment","charCodeAt","toString","style","ReferencingSection","getCorrectColor","hex","length","TypographySection","verticalAlign","textTransform","changeVerticalAlign","changeTextTransform","fontColor","changeFontColor","correctColor","colorSampleStyle","InputProps","startAdornment","FormControlLabel","control","label","labelPlacement","RadioGroup","aria-label","row","Radio","DistancesSection","firstRowIndent","otherRowsIndent","lineSpacing","changeFirstRowIndent","changeOtherRowsIndent","changeLineSpacing","FramesSection","leftBorder","rightBorder","topBorder","bottomBorder","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColor","borderThickness","changeBorderThickness","previewBorderColor","previewBorderWidth","isNaN","parseFloat","previewStyle","borderLeft","borderRight","borderTop","borderBottom","FillingSection","fillingColor","changeFillingColor","TocSection","ShortCutSection","TestSection","id","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomTabs","indicator","width","zIndex","display","Tabs","CustomDialog","minHeight","height","container","scrollBody","paperFullWidth","maxWidth","maxHeight","flexDirection","paperScrollBody","Dialog","NewDecDialog","state","openedTab","toggleStateProperty","propName","e","setState","target","setStateProperty","newValue","undefined","setColor","filteredInput","replace","trim","match","slice","setNumber","this","isOpen","onClose","changeOpenedTab","listSectionProps","typographySectionProps","distancesSectionProps","framesSectionProps","fillingSectionProps","ThemeProvider","open","aria-labelledby","scroll","fullWidth","DialogTitle","onClick","DialogContent","orientation","indicatorColor","PositioningSection","ShortCutsSection","React","Component","App","handleClick","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.442ed6e5.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: '183px',\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst NamesSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Key</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Group</span>\r\n            <div>\r\n                <NativeSelect input={ <CustomInput /> }>\r\n                    <option value={null}>...</option>\r\n                    <option value=\"0\">Text</option>\r\n                    <option value=\"1\">Heading</option>\r\n                    <option value=\"2\">Heading Heading Heading Heading</option>\r\n                </NativeSelect>\r\n                <Button color=\"primary\" className=\"textButton\">+New</Button>\r\n            </div>\r\n\r\n            <span>Active</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n            <span>Style name (English)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (German)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (Russian)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (French)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NamesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst WordExportSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Style name in WORD</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n            \r\n            <span>Soft return</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","export const listStyleType = [\r\n    {\r\n      name: 'Decimal',\r\n      value: 'decimal',\r\n    },\r\n    {\r\n      name: 'Decimal leading zero',\r\n      value: 'decimal-leading-zero',\r\n    },\r\n    {\r\n      name: 'Lower alpha',\r\n      value: 'lower-alpha',\r\n    },\r\n    {\r\n      name: 'Lower greek',\r\n      value: 'lower-greek',\r\n    },\r\n    {\r\n      name: 'Lower latin',\r\n      value: 'lower-latin',\r\n    },\r\n    {\r\n      name: 'Lower roman',\r\n      value: 'lower-roman',\r\n    },\r\n    {\r\n      name: 'Upper alpha',\r\n      value: 'upper-alpha',\r\n    },\r\n    {\r\n      name: 'Upper greek',\r\n      value: 'upper-greek',\r\n    },\r\n    {\r\n      name: 'Upper latin',\r\n      value: 'upper-latin',\r\n    },\r\n    {\r\n      name: 'Upper roman',\r\n      value: 'upper-roman',\r\n    },\r\n  ];\r\n\r\nexport const backSpaceActions = [\r\n    { key: 'merge', value: 'Merge' },\r\n    { key: 'apply_other_pd', value: 'Apply other PD' },\r\n    { key: 'remove_pd', value: 'Remove PD' },\r\n    { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const returnOnEmptySectionActions = [\r\n    { key: 'apply_other_pd', value: 'Apply other PD' },\r\n    { key: 'create_new_section', value: 'Create new section' },\r\n    { key: 'apply_default_pd', value: 'Apply default PD' },\r\n    { key: 'nothing', value: 'Nothing' }\r\n  ];\r\n\r\nexport const decoratorsList = [\r\n    { name: \"...\", value: null },\r\n    { name: \"Text 0\", value: \"quick_text_0\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n]","import React from 'react';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from '../../../constants'\r\n\r\nconst WordExportSection = (props) => {\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Identational level</span></li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\"><h4>BACKSPACE</h4></li>\r\n                    <li><span>At the beginning of a section with content</span></li>\r\n                    <li><span>At the beginning of a section WITHOUT content</span></li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\"><h4>RETURN</h4></li>\r\n                    <li><span>Create new section below</span></li>\r\n                    <li><span>Style of next section</span></li>\r\n                    <li><span>In empty section change current style to</span></li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\"><h4>TAB / SHIFT+TAB</h4></li>\r\n                    <li><span>TAB – change current style to</span></li>\r\n                    <li><span>SHIFT+TAB – change current style to</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>                    \r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={null}>...</option>\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\"></li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            {backSpaceActions.map(action => (\r\n                                <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                            ))}\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            {returnOnEmptySectionActions.map(action => (\r\n                                <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                            ))}\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\"></li>\r\n                    <li><Checkbox color=\"primary\" /></li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                        </NativeSelect>\r\n                    </li>                    \r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\"></li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                        </NativeSelect>\r\n                    </li>\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { listStyleType } from '../../../constants'\r\n\r\nconst ListSection = ({ isList, listType, changeIsList, changeListType, bulletField, setBulletField }) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Is it a list?</span></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><span>List name</span></li>\r\n                            <li><span>Order level</span></li>\r\n                            <li><span>Prefix</span></li>\r\n                            <li><span>Suffix</span></li>\r\n                            <li><span>Suffix distance</span></li>\r\n                            <li><span>Magic Tabs</span></li>\r\n                            <li><span>Type of list</span></li>\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><Checkbox color=\"primary\" checked={isList} onChange={changeIsList} /></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value={null}>...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value=\"0.5\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </li>\r\n                            <li><Checkbox color=\"primary\" /></li>\r\n                            <li>\r\n                                <NativeSelect value={listType} onChange={changeListType} input={ <CustomInput /> }>\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Bullet character</span></li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Numbering style</span></li>\r\n                                    <li><span>Continue numbering after interruption</span></li>\r\n                                    <li><span>Allow restart numbering</span></li>\r\n                                    <li><span>Include previous levels from</span></li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                <li></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <TextField \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"paragraphDecorators-dialog__bullet-input\" \r\n                                            onChange={setBulletField}\r\n                                            value={bulletField}\r\n                                         />                                            \r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            { bulletField ? `Unicode: ${bulletField.charCodeAt(0).toString(16)}` : \"\"}\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            {listStyleType.map(style => (\r\n                                              <option value={style.value} key={style.value}>{style.name}</option>\r\n                                            ))}                                    \r\n                                        </NativeSelect>\r\n                                    </li>\r\n                                    <li><Checkbox color=\"primary\" /></li>\r\n                                    <li><Checkbox color=\"primary\" checked={true} /></li>\r\n                                    <li>\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            <option value={null}>...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            Preview: А.1.1\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ListSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst ReferencingSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Reference group</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            <option value={null}>none</option>\r\n                            <option value=\"0\">Reference group 1</option>\r\n                            <option value=\"1\">Reference group 2</option>\r\n                        </NativeSelect>\r\n                        <Button color=\"primary\" className=\"paragraphDecorators-dialog__text-button\">+New</Button>\r\n                    </li>\r\n                    <li></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ReferencingSection;","export const getCorrectColor = (hex) => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : \"FFF\";\r\n    return correctColor;\r\n}","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst TypographySection = (props) => {\r\n    const { \r\n        verticalAlign, \r\n        textTransform, \r\n        changeVerticalAlign, \r\n        changeTextTransform,\r\n        fontColor,\r\n        changeFontColor,\r\n    } = props;\r\n\r\n    const correctColor = getCorrectColor(fontColor);\r\n\r\n    const colorSampleStyle = {\r\n        backgroundColor: `#${correctColor}`,\r\n    };\r\n    \r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Font</span></li>\r\n                    <li><span>Alignment</span></li>\r\n                    <li><span>Font size</span></li>\r\n                    <li><span>Font color name</span></li>\r\n                    <li><span>Font color HEX</span></li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                        <span>Stylings</span>\r\n                    </li>\r\n                    <li><span>Sub/Superscript</span></li>\r\n                    <li><span>Text transform</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            <option value={\"Helvetica New\"}>Helvetica New</option>\r\n                            <option value={\"Georgia\"}>Georgia</option>\r\n                            <option value={\"Roboto\"}>Roboto</option>\r\n                            <option value={\"Open Sans\"}>Open Sans</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            <option value={\"left\"}>Left</option>\r\n                            <option value={\"center\"}>Center</option>\r\n                            <option value={\"right\"}>Right</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={\"12\"}>12</option>\r\n                            <option value={\"14\"}>14</option>\r\n                            <option value={\"16\"}>16</option>\r\n                        </NativeSelect>\r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={fontColor}\r\n                            onChange={changeFontColor}\r\n                         />\r\n                         <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                            \r\n                    </li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Bold\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Italic\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Underlined\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Stroke\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <RadioGroup \r\n                            aria-label=\"verticalAlign\" \r\n                            name=\"verticalAlign\" \r\n                            value={verticalAlign} \r\n                            onChange={changeVerticalAlign} \r\n                            row\r\n                        >\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"No\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"subscript\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Subscript\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"superscript\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Superscript\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                        </RadioGroup>\r\n                    </li>\r\n                    <li>\r\n                        <RadioGroup \r\n                            aria-label=\"textTransform\" \r\n                            name=\"textTransform\" \r\n                            value={textTransform} \r\n                            onChange={changeTextTransform} \r\n                            row\r\n                        >\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"No\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"lowercase\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Lowercase\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"uppercase\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Uppercase\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                        </RadioGroup>\r\n                    </li>\r\n\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TypographySection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst DistancesSection = (props) => {\r\n    const {\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        changeFirstRowIndent,\r\n        changeOtherRowsIndent,\r\n        changeLineSpacing,\r\n    } = props;\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Margin top</span></li>\r\n                    <li><span>Margin bottom</span></li>\r\n                    <li><span>1st row indent</span></li>\r\n                    <li><span>Other rows indent</span></li>\r\n                    <li><span>Line spacing</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li>\r\n                    <NativeSelect input={ <CustomInputShort /> }>\r\n                        <option value={\"6\"}>6</option>\r\n                        <option value={\"8\"}>8</option>\r\n                        <option value={\"10\"}>10</option>\r\n                    </NativeSelect>\r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <NativeSelect input={ <CustomInputShort /> }>\r\n                        <option value={\"6\"}>6</option>\r\n                        <option value={\"8\"}>8</option>\r\n                        <option value={\"10\"}>10</option>\r\n                    </NativeSelect>\r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\"\r\n                        value={firstRowIndent}\r\n                        onChange={changeFirstRowIndent} \r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\" \r\n                        value={otherRowsIndent}\r\n                        onChange={changeOtherRowsIndent}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\"\r\n                        value={lineSpacing}\r\n                        onChange={changeLineSpacing} \r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default DistancesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst FramesSection = (props) => {\r\n    const { \r\n        leftBorder, \r\n        rightBorder, \r\n        topBorder, \r\n        bottomBorder, \r\n        changeLeftBorder,\r\n        changeRightBorder,\r\n        changeTopBorder,\r\n        changeBottomBorder,\r\n        borderColor,\r\n        changeBorderColor,\r\n        borderThickness,\r\n        changeBorderThickness,\r\n     } = props;\r\n\r\n     const correctColor = getCorrectColor(borderColor);\r\n     const colorSampleStyle = {\r\n         backgroundColor: `#${correctColor}`,\r\n     };\r\n     const previewBorderColor = correctColor !== \"FFF\" ? `#${correctColor}` : \"#dc004e\";\r\n     const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness)) && parseFloat(borderThickness) <= 15\r\n                                ? `${borderThickness}pt`\r\n                                : \"1.3px\";\r\n\r\n     const previewStyle = {\r\n         borderLeft: `${previewBorderWidth} solid ${leftBorder ? previewBorderColor : \"white\"}`,\r\n         borderRight: `${previewBorderWidth} solid ${rightBorder ? previewBorderColor : \"white\"}`,\r\n         borderTop: `${previewBorderWidth} solid ${topBorder ? previewBorderColor : \"white\"}`,\r\n         borderBottom: `${previewBorderWidth} solid ${bottomBorder ? previewBorderColor : \"white\"}`,\r\n     }\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <div className=\"paragraphDecorators-dialog__border-directions\">\r\n                        <div className=\"top-row\">\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__top-direction-span\">Top</span>\r\n                        </div>\r\n                        <div className=\"center-row\">\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__left-direction-span\">Left</span>\r\n                            <div className=\"center-square\">\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-top\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-top\" \r\n                                            checked={topBorder}  \r\n                                            onChange={changeTopBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-left\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-left\" \r\n                                            checked={leftBorder}  \r\n                                            onChange={changeLeftBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                    <div className=\"preview\" style={previewStyle}>\r\n                                        <span>Text</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-right\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-right\" \r\n                                            checked={rightBorder}  \r\n                                            onChange={changeRightBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-bottom\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-bottom\" \r\n                                            checked={bottomBorder}  \r\n                                            onChange={changeBottomBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                            </div>\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__right-direction-span\">Right</span>\r\n                        </div>\r\n                        <div className=\"bottom-row\">\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__bottom-direction-span\">Bottom</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Frame color name</span></li>\r\n                    <li><span>Frame color HEX</span></li>\r\n                    <li><span>Frame thickness</span></li>\r\n                    <li><span>Connect to previous</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={borderColor}\r\n                            onChange={changeBorderColor}\r\n                         />\r\n                        <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                            \r\n                    </li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\"\r\n                            value={borderThickness}\r\n                            onChange={changeBorderThickness}\r\n                         />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </li>\r\n                    <li><Checkbox color=\"primary\" /></li>\r\n                </div>\r\n            </ul>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst FillingSection = ({ fillingColor, changeFillingColor }) => {\r\n\r\n    const correctColor = getCorrectColor(fillingColor);\r\n    const colorSampleStyle = {\r\n        backgroundColor: `#${correctColor}`,\r\n    };\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Background color name</span></li>\r\n                    <li><span>Background color HEX</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={fillingColor}\r\n                            onChange={changeFillingColor}\r\n                         />     \r\n                        <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                                                                   \r\n                    </li>                \r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FillingSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nconst TocSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li><span>ToC indentation</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>                    \r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={null}>...</option>\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TocSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst ShortCutSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Windows</span></li>\r\n                    <li><span>Mac</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ShortCutSection;","import React from 'react';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from '../../../constants'\r\n\r\nconst TestSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"span1\">Identational level</span>\r\n            <NativeSelect input={ <CustomInputShort /> } id=\"select1\">\r\n                <option value={null}>...</option>\r\n                <option value=\"0\">0</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </NativeSelect>\r\n            \r\n            <div id=\"title1\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n            <span id=\"span2\">At the beginning of a section with content</span>\r\n            <NativeSelect input={ <CustomInput /> } id=\"select2\">\r\n                {backSpaceActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n            <span id=\"span3\">At the beginning of a section WITHOUT content</span>\r\n            <NativeSelect input={ <CustomInput /> } id=\"select3\">\r\n                {returnOnEmptySectionActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n\r\n            <div className=\"sectionTitle\" id=\"title2\">\r\n                <span>RETURN</span>\r\n            </div>\r\n            <span id=\"span4\">Style of next section</span>\r\n            <NativeSelect input={ <CustomInput /> } id=\"select4\">\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"span5\">In empty section change current style to</span>\r\n            <NativeSelect input={ <CustomInput /> } id=\"select5\">\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TestSection;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\n\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: 'initial',\r\n      backgroundColor: 'white',\r\n      transition: '0.2s',\r\n\r\n      '&:before': {\r\n        transition: '0.2s',\r\n      },\r\n\r\n      '&:hover': {\r\n        color: '#000',\r\n      },\r\n      '&$selected': {\r\n        backgroundColor: '#2196f3',\r\n        color: 'white',\r\n        opacity: 1,\r\n      },\r\n      '&:hover:active': {\r\n        backgroundColor: 'white',\r\n        transition: '0.2s',\r\n      },\r\n      '&$selected:hover:active': {\r\n        backgroundColor: '#2ca4ff',\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import Tabs from '@material-ui/core/Tabs';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTabs = withStyles(theme => ({\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n      }\r\n  }))(Tabs);\r\n\r\n  export default CustomTabs;","import { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { flexbox } from '@material-ui/system';\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1150px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n        border: \"1px solid red\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        '&:after': {\r\n            height: '100%',\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: '1280px',\r\n        maxHeight: '850px',\r\n        minHeight: '550px',\r\n        width: 'calc(100% - 96px)',\r\n        height: 'calc(100% - 96px)',\r\n        border: '2px dotted gold',\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        border: 'none',\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: 'middle',\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","import React from 'react';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport NamesSection from './sections/NamesSection';\r\nimport WordExportSection from './sections/WordExportSection';\r\nimport PositioningSection from './sections/PositioningSection';\r\nimport ListSection from './sections/ListSection';\r\nimport ReferencingSection from './sections/ReferencingSection';\r\nimport TypographySection from './sections/TypographySection';\r\nimport DistancesSection from './sections/DistancesSection';\r\nimport FramesSection from './sections/FramesSection';\r\nimport FillingSection from './sections/FillingSection';\r\nimport TocSection from './sections/TocSection';\r\nimport ShortCutsSection from './sections/ShortCutsSection';\r\nimport TestSection from './sections/TestSection';\r\n\r\nimport theme from '../../theme';\r\nimport CustomTab from '../common/CustomTab';\r\nimport CustomTabs from '../common/CustomTabs';\r\nimport CustomDialog from '../common/CustomDialog';\r\n\r\nimport \"./style.css\";\r\n\r\nclass NewDecDialog extends React.Component {\r\n    state = { \r\n        openedTab: 11,\r\n        isList: true,\r\n        listType: \"unordered\",\r\n        bulletField: \"\",\r\n        verticalAlign: \"\",\r\n        textTransform: \"\",\r\n        leftBorder: true,\r\n        rightBorder: true,\r\n        topBorder: true,\r\n        bottomBorder: true,\r\n        borderColor: \"\",\r\n        fontColor: \"\",\r\n        fillingColor: \"\",\r\n        borderThickness: \"\",\r\n        firstRowIndent: \"\",\r\n        otherRowsIndent: \"\",\r\n        lineSpacing: \"\",\r\n    };\r\n\r\n    toggleStateProperty = (propName) => (e) => {\r\n        this.setState({ [propName]: e.target.checked });\r\n    }\r\n\r\n    setStateProperty = (propName) => (e, newValue) => {\r\n        this.setState({\r\n            [propName]: newValue === undefined ? e.target.value : newValue,\r\n        });\r\n    }\r\n\r\n    setBulletField = (e) => {\r\n        this.setState({ bulletField: e.target.value.length > 1 ? e.target.value[e.target.value.length - 1] : e.target.value });\r\n    } \r\n\r\n    setColor = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n        \r\n        const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                              : \"\" ;\r\n        \r\n        if (filteredInput === this.state[propName]) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [propName]: filteredInput,\r\n        });\r\n    }\r\n\r\n    setNumber = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n\r\n        const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                              : \"\" ;\r\n\r\n        if (filteredInput === this.state[propName]) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [propName]: filteredInput,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isOpen, onClose } = this.props;\r\n        const { openedTab, \r\n                isList, \r\n                listType, \r\n                bulletField, \r\n                verticalAlign, \r\n                textTransform,\r\n                leftBorder, \r\n                rightBorder,\r\n                topBorder,\r\n                bottomBorder, \r\n                borderColor,\r\n                fontColor,\r\n                fillingColor,\r\n                borderThickness,\r\n                firstRowIndent,\r\n                otherRowsIndent,\r\n                lineSpacing,\r\n            } = this.state;\r\n\r\n        const { setBulletField } = this;\r\n        const changeOpenedTab = this.setStateProperty(\"openedTab\");\r\n        const changeIsList = this.toggleStateProperty(\"isList\");\r\n        const changeListType = this.setStateProperty(\"listType\");\r\n        const changeVerticalAlign = this.setStateProperty(\"verticalAlign\");\r\n        const changeTextTransform = this.setStateProperty(\"textTransform\");\r\n        const changeLeftBorder = this.toggleStateProperty(\"leftBorder\");\r\n        const changeRightBorder = this.toggleStateProperty(\"rightBorder\");\r\n        const changeTopBorder = this.toggleStateProperty(\"topBorder\");\r\n        const changeBottomBorder = this.toggleStateProperty(\"bottomBorder\");\r\n        const changeBorderColor = this.setColor(\"borderColor\");\r\n        const changeFontColor = this.setColor(\"fontColor\");\r\n        const changeFillingColor = this.setColor(\"fillingColor\");\r\n        const changeBorderThickness = this.setNumber(\"borderThickness\");\r\n        const changeFirstRowIndent = this.setNumber(\"firstRowIndent\");\r\n        const changeOtherRowsIndent = this.setNumber(\"otherRowsIndent\");\r\n        const changeLineSpacing = this.setNumber(\"lineSpacing\");\r\n\r\n        const listSectionProps = { \r\n            isList, \r\n            listType, \r\n            changeIsList, \r\n            changeListType, \r\n            bulletField, \r\n            setBulletField,\r\n        };\r\n\r\n        const typographySectionProps = { \r\n            verticalAlign, \r\n            textTransform, \r\n            changeVerticalAlign, \r\n            changeTextTransform,\r\n            fontColor,\r\n            changeFontColor,\r\n        };\r\n\r\n        const distancesSectionProps = {\r\n            firstRowIndent,\r\n            otherRowsIndent,\r\n            lineSpacing,\r\n            changeFirstRowIndent,\r\n            changeOtherRowsIndent,\r\n            changeLineSpacing,\r\n        };\r\n\r\n        const framesSectionProps = { \r\n            leftBorder, \r\n            rightBorder, \r\n            topBorder, \r\n            bottomBorder, \r\n            changeLeftBorder, \r\n            changeRightBorder, \r\n            changeTopBorder, \r\n            changeBottomBorder, \r\n            borderColor,\r\n            changeBorderColor,\r\n            borderThickness,\r\n            changeBorderThickness,\r\n        };\r\n\r\n        const fillingSectionProps = { fillingColor, changeFillingColor };\r\n        \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n            <CustomDialog\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"body\"\r\n                className=\"paragraphDecorators-dialog\"\r\n                fullWidth={true}\r\n                maxWidth={false}\r\n            >\r\n                <div className=\"header\">\r\n                    <DialogTitle className=\"header-title\">\r\n                        <p>Create new paragraph decorator</p>\r\n                    </DialogTitle>\r\n                    <div className=\"header-buttons\">\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick={onClose}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {}}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                    \r\n                <DialogContent className=\"content\">\r\n                    <div className=\"content-leftSide\">\r\n                        <CustomTabs \r\n                            className=\"dialogTabs\"\r\n                            value={openedTab} \r\n                            onChange={changeOpenedTab} \r\n                            orientation=\"vertical\"\r\n                            color=\"primary\"\r\n                            indicatorColor=\"primary\"\r\n                        >\r\n                            <CustomTab className=\"dialogTab\" label=\"Names\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"WORD export\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"List\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Test\" />\r\n                        </CustomTabs>\r\n                    </div>\r\n                    <div className=\"content-rightSide\">\r\n                        { openedTab === 0 && <NamesSection /> }\r\n                        { openedTab === 1 && <WordExportSection /> }\r\n                        { openedTab === 2 && <PositioningSection /> }\r\n                        { openedTab === 3 && <ListSection {...listSectionProps} />}\r\n                        { openedTab === 4 && <ReferencingSection /> }\r\n                        { openedTab === 5 && <TypographySection {...typographySectionProps} /> }\r\n                        { openedTab === 6 && <DistancesSection {...distancesSectionProps} /> }\r\n                        { openedTab === 7 && <FramesSection {...framesSectionProps} /> }\r\n                        { openedTab === 8 && <FillingSection {...fillingSectionProps} /> }\r\n                        { openedTab === 9 && <TocSection /> }\r\n                        { openedTab === 10 && <ShortCutsSection /> }\r\n                        { openedTab === 11 && <TestSection /> }\r\n                    </div>\r\n                </DialogContent>\r\n            </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewDecDialog;","import React from 'react';\nimport './App.css';\n\nimport NewDecDialog from './components/NewDecDialog';\n\nclass App extends React.Component {\n  state = {\n    isOpen: true,\n  }\n\n  handleClick = () => {\n    this.setState(({ isOpen }) => {\n      return {\n        isOpen: !isOpen\n      };\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleClick}>Open</button>\n        <NewDecDialog \n          isOpen={this.state.isOpen}\n          onClose={() => {\n            this.setState({ isOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}