{"version":3,"sources":["components/DecoratorDialog/common/CustomInput.js","components/DecoratorDialog/common/LabelWithAsterisk.js","components/DecoratorDialog/constants/decoratorsList.js","components/DecoratorDialog/constants/localeConstants.js","components/DecoratorDialog/constants/constants.js","components/DecoratorDialog/constants/initialFormState.js","components/DecoratorDialog/helpers/isFontAvailable.js","components/DecoratorDialog/constants/fontsSet.js","components/DecoratorDialog/constants/validationData.js","components/DecoratorDialog/helpers/DecDataConverter/converterUtils.js","components/DecoratorDialog/helpers/DecDataConverter/decToSendDefaultProps.js","components/DecoratorDialog/helpers/DecDataConverter/DecDataConverter.js","components/DecoratorDialog/helpers/DecDataConverter/index.js","components/DecoratorDialog/helpers/getShortCutUtils.js","components/DecoratorDialog/helpers/validationFunctions.js","components/DecoratorDialog/helpers/helpers.js","components/DecoratorDialog/common/NewGroupDialog.js","components/DecoratorDialog/hoc/withNewGroupControl.js","components/DecoratorDialog/actions/index.js","components/DecoratorDialog/sections/NamesSection.js","components/DecoratorDialog/common/CustomInputShort.js","components/DecoratorDialog/common/SectionTitle/index.js","components/DecoratorDialog/common/SectionTitle/SectionTitle.js","components/DecoratorDialog/sections/PositioningSection/BackSpaceActionInput.js","components/DecoratorDialog/sections/PositioningSection/index.js","components/DecoratorDialog/sections/PositioningSection/PositioningSection.js","components/DecoratorDialog/common/Preview/generators.js","components/DecoratorDialog/common/Preview/ListPreview.js","components/DecoratorDialog/common/ColorField/index.js","components/DecoratorDialog/common/ColorField/ColorField.js","components/DecoratorDialog/common/FontSelectFields.js","components/DecoratorDialog/sections/ListSection/ListSection.js","components/DecoratorDialog/sections/ListSection/index.js","components/DecoratorDialog/sections/ReferencingSection.js","components/DecoratorDialog/common/ContentEditable.js","components/DecoratorDialog/common/Preview/Preview.js","components/DecoratorDialog/common/Preview/index.js","components/DecoratorDialog/sections/TypographySection/index.js","components/DecoratorDialog/sections/TypographySection/TypographySection.js","components/DecoratorDialog/common/ConnectToPreviousField.js","components/DecoratorDialog/sections/DistancesSection.js","components/DecoratorDialog/sections/FramesSection/FrameTypeInput.js","components/DecoratorDialog/sections/FramesSection/generateBorderPreviewStyle.js","components/DecoratorDialog/sections/FramesSection/FramesSection.js","components/DecoratorDialog/sections/FramesSection/index.js","components/DecoratorDialog/sections/FillingSection.js","components/DecoratorDialog/sections/TocSection.js","components/DecoratorDialog/sections/ShortCutsSection.js","components/DecoratorDialog/theme.js","components/DecoratorDialog/common/CustomTab.js","components/DecoratorDialog/common/CustomErrorTab.js","components/DecoratorDialog/common/CustomTabs.js","components/DecoratorDialog/common/CustomDialog.js","actions.js","components/DecoratorDialog/DecoratorDialog.js","components/DecoratorDialog/index.js","App.js","reducers/decoratorDialogReducer/isOpenReducer.js","reducers/decoratorDialogReducer/decoratorFormReducer.js","reducers/decoratorDialogReducer/validationErrorReducer.js","reducers/decoratorDialogReducer/isEditModeReducer.js","reducers/decoratorDialogReducer/openedTabReducer.js","reducers/decoratorDialogReducer/index.js","reducers/savedFormReducer.js","reducers/rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","LabelWithAsterisk","children","className","decoratorsList","name","value","LANGS","langKey","langName","langFullName","regionName","regionFullName","ADDITIONAL_LANGS","slice","MAIN_LANG_KEY","alignmentList","center","left","right","justify","numberingSets","decimal","lineSpacings","orderedListStylesMap","Map","bulletNamesMap","sectionTypesMap","backSpaceActionsMap","width","autoFillingRequiredFields","sideNumberFont","sideNumberFontSize","font","fontColor","marginBottom","firstRowIndent","otherRowsIndent","wordSpacing","lineSpacing","borderThickness","initialFormState","decKey","sectionTypes","Array","from","reduce","acc","i","key","group","groupToCreate","active","indentationalLevel","fixedIndentation","softReturn","backspaceActionWithContent","backspaceActionWithContentStyle","returnActionNextSection","returnActionEmptySection","tabAction","shiftTabAction","isList","listName","orderLevel","suffixDistance","magicTabs","listType","listItem","unicodeNumber","unicodeChar","listItemString","numberingStyle","continueNumbering","allowRestartNumbering","includePreviousFrom","patternMode","listPattern","prefix","suffix","sideNumber","customSideNumberFont","sideNumberAlignment","sideNumberFontColor","sideNumberFillingColor","sideNumberWidth","sideNumberLineHeight","sideNumberRadius","sideNumberBold","sideNumberItalic","sideNumberUnderlined","referenceGroup","referenceGroupToCreate","customFont","alignment","bold","italic","underlined","stroke","textTransform","readOnly","connectToPrevious","verticalAlign","customLineSpacing","borderLeft","borderRight","borderTop","borderBottom","borderType","fillingColor","tocIndentation","shortCutWin","shortCutWinView","shortCutMac","shortCutMacView","body","document","container","createElement","innerHTML","style","cssText","getWidth","appendChild","clientWidth","removeChild","monoWidth","serifWidth","sansWidth","isFontAvailable","fontsSet","filter","tabsErrorInitialState","namesSection","listSection","sectionsTabNumbers","tabName","tabNumber","replaceDecNameIfDefault","decName","getNumber","val","getNumberString","decToSendDefaultProps","item_type","style_properties","keyboard_shortcut","xref_target_type_group_key","is_possible_xref_target","show_in_editor_toc","editor_toc_indentation","editor_toc_filter_level","list_key","item_order","extra_hanging_indentation","extra_hanging_indentation_at_grid","numerated_list_format","numerated_list_start","numerated_list_pattern","numerated_list_style","is_auto_restart_numbering","allow_restart_numbering","bullet_list_format","movable","content_required","on_return_style_key","on_return_indentation","item_order_allow_tab","DecDataConverter","rawDec","dec","order","res","section_types","Object","entries","map","hidden","initial_indentation","is_fixed_indentation","content_in_second_line","backspace_action","backspace_action_value","create_new_section_on_return_if_empty","pd_for_new_section_on_return_if_empty","change_pd_on_return_if_empty","pd_for_current_section_on_return_if_empty","on_tab_key","on_shift_tab_key","read_only","editor_style","initialState","propName","styles","color","textDecoration","trim","indentsDifference","borderStyle","getStyleString","sideNumberUnderline","getSideNumberStyleString","console","log","cur","includes","suffixDistanceMatch","match","test","prefixAndSuffixMatch","has","bullet","unicodeNumberToChar","hasOwnProperty","getShortCutUtils","convertShortcutToString","stylesProps","stylesString","sideNumberStylesString","keyValueStringsArray","split","length","stylesArray","keyValueStr","margin","indent","sideNumberCustomFont","getStylesObject","mapDecFields","systemName","e","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","indexOf","isCmdPressed","stringValue","keys","CMD_KEYS","forEach","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","isEqual","childItems","child_items","itemKey","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","getTabsErrorState","form","tabsErrorState","getTabNumberToSwitch","getCorrectColor","hex","correctColor","selectAllOnClick","defaultValue","target","focus","select","getUnstyledText","styledText","unstyledText","replace","String","fromCharCode","parseInt","unicodeCharToNumber","charCodeAt","toString","scrollToBottom","setTimeout","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","changeAndScroll","changeFunction","timeOut","focusInput","inputRef","timeout","current","focusOnEmptyField","refs","getPreviewFont","fillMissedFields","currentFormState","formStateWithoutMissedFields","fieldName","option","customOption","NewGroupDialog","isXref","props","groupType","emptyGroup","groupKey","getInitialState","savedGroup","state","requiredFieldRef","React","createRef","onInputChange","inputName","setState","onClose","hideGroupDialogValidationError","closeGroupDialog","onGroupSave","groupToSave","saveGroup","showGroupDialogValidationError","this","isOpen","isEditMode","hasGroupDialogValidationError","titleText","buttonText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","onChange","error","variant","Fragment","DialogActions","Button","onClick","PureComponent","withNewGroupControl","ViewComponent","isGroupDialogOpen","openGroupDialog","Component","updateDecoratorForm","payload","type","clearDecoratorForm","updateValidationError","openDialog","dispatch","closeDialog","setValue","secondArg","newValue","undefined","toggleValue","checked","setBullet","newBullet","setColor","filteredInput","setNumber","setShortCut","valuePropName","viewPropName","search","convertEventToShortCut","NamesSection","decKeyInputRef","decNameEnInputRef","inputRefs","onGroupChange","groupName","changeGroupToCreate","changeGroup","onNameChange","changeName","onSectionTypesChange","typeName","changeSectionTypes","validationErrorInSection","prevprops","every","ref","changeDecKey","changeActive","newGroupName","FormControlLabel","control","Checkbox","label","labelPlacement","NativeSelect","connect","decoratorDialog","validationError","formState","CustomInputShort","SectionTitle","text","BackSpaceActionInput","PositioningSection","changeIndentationalLevel","changeBackspaceActionWithContent","changeBackspaceActionWithContentStyle","changeBackspaceActionWithoutContent","changeBackspaceActionWithoutContentStyle","changeReturnActionNextSection","changeReturnActionEmptySection","changeTabAction","changeShiftTabAction","changeisFixedIndentation","changeSoftReturn","backSpaceActionStyleSettingsState","generatePreviewStyle","fillingConnectToPrevious","previewFontColor","previewFillingColor","previewAdditionalFillingColor","previewMarginLeft","previewTextIndent","previewLineSpacing","offset","alignType","parseFloat","getOffset","previewMarginTop","previewMarginBottom","previewBorderLeft","previewBorderRight","previewBorderTop","previewBorderBottom","correctFontSize","alignItems","textAlign","fontWeight","fontStyle","fontVariant","backgroundImage","borderImage","marginLeft","textIndent","lineHeight","outline","paddingLeft","paddingRight","paddingTop","paddingBottom","previewText","isOrderedList","listChars","fill","getListChars","get","listItemBeginnings","li","previewStyle","isSideNumber","sideNumberStyle","previewSideNumberFontColor","previewSideNumberFillingColor","marginRight","generateSideNumberStyle","listItemBeginningStyle","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","defaultColorCode","required","bottomAligned","colorError","inputError","pickerColor","colorSampleStyle","colorPickerClassName","InputProps","startAdornment","InputAdornment","onChangeComplete","disableAlpha","FontSelectFields","customFontInputRef","onFontChange","changeFont","changeCustomFont","optionalFieldState","fontName","placeholder","ListSection","listNameInputRef","unicodeCharInputRef","onIsListChange","changeIsList","onListTypeChange","changeOrderLevel","changeListType","changeSuffix","onListItemChange","changeListItem","onUnicodeNumberChange","newUnicodeNumber","changeUnicodeNumber","newUnicodeChar","changeUnicodeChar","onUnicodeCharChange","onSideNumberChange","changeSideNumber","listPreviewProps","changeListName","changePatternMode","changeListPattern","changePrefix","changeSuffixDistance","changeMagicTabs","changeListItemString","changeNumberingStyle","changeContinueNumbering","changeAllowRestartNumbering","changeIncludePreviousFrom","changeSideNumberFont","changeCustomSideNumberFont","changeSideNumberAlignment","changeSideNumberFontSize","changeSideNumberFontColor","changeSideNumberFillingColor","changeSideNumberWidth","changeSideNumberRadius","changeSideNumberBold","changeSideNumberItalic","changeSideNumberUnderlined","changeSideNumberLineHeight","mainListSettingsState","unorderedListSettingsState","customListItemSettingsState","customListItemSettingsState2","orderedListSettingsState","sideNumberSettingsState","RadioGroup","row","Radio","Switch","ReferencingSection","onXrefChange","xrefName","xref","changeReferenceGroupToCreate","changeReferenceGroup","__rest","s","t","p","prototype","call","getOwnPropertySymbols","q","propertyIsEnumerable","normalizeHtml","str","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","getEl","emitChange","originalEvt","evt","assign","_a","tagName","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","onPreviewTextChange","changePreviewText","selectAllChildren","TypographySection","changeAlignment","changeFontSize","changeFontColor","changeBold","changeItalic","changeUnderlined","changeStroke","changeTextTransform","changeVerticalAlign","changeMarginTop","changeReadOnly","previewProps","changeConnectToPrevious","DistancesSection","customLineSpacingInputRef","onLineSpacingChange","changeLineSpacing","changeMarginBottom","changeFirstRowIndent","changeOtherRowsIndent","changeCustomLineSpacing","changeWordSpacing","customLineSpacingFieldState","marginFieldsState","FrameTypeInput","generateBorderPreviewStyle","previewBorderWidth","isNaN","FramesSection","onBorderTypeChange","changeBorderType","changeBorderThickness","changeBorderLeft","changeBorderRight","changeBorderTop","changeBorderBottom","changeBorderColor","id","Select","MenuItem","changeFillingColor","changeTocIndentation","changeShortCutWin","changeShortCutMac","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomErrorTab","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","saveDecoratorForm","DecoratorDialog","clearForm","onSaveButtonClick","switchTab","sendForm","convertToSend","onTabSwitch","openedTab","ThemeProvider","aria-labelledby","scroll","CustomTabs","orientation","indicatorColor","ShortCutsSection","switchDecDialogTab","saveForm","savedForm","clearSavedForm","convertToEdit","isOpenReducer","action","decoratorFormReducer","validationErrorReducer","isEditModeReducer","openedTabReducer","decoratorDialogReducer","combineReducers","savedFormReducer","rootReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79297860.chunk.js","sourcesContent":["import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: \"183px\",\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from \"react\";\r\n\r\nconst LabelWithAsterisk = ({ children }) => {\r\n    return (\r\n        <div className=\"labelWithAsterisk\">\r\n            <div className=\"labelWithAsterisk-labelBox\">\r\n                <span>{children}</span>\r\n            </div>\r\n            <div className=\"labelWithAsterisk-asteriskBox\">\r\n                <span className=\"labelWithAsterisk-asteriskMark\">*</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabelWithAsterisk;","const decoratorsList = [\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n    { name: \"Heading 1\", value: \"quick_heading_1\" },\r\n    { name: \"Heading 2\", value: \"quick_heading_2\" },\r\n    { name: \"Heading 3\", value: \"quick_heading_3\" },\r\n    { name: \"Heading 4\", value: \"quick_heading_4\" },\r\n    { name: \"Heading 5\", value: \"quick_heading_5\" },\r\n];\r\n\r\nexport default decoratorsList;","export const LANGS = [\n  { \n    langKey: \"en_EN\", \n    langName: \"EN\", \n    langFullName: \"English\", \n  },\n  { \n    langKey: \"de_DE\", \n    langName: \"DE\", \n    langFullName: \"German\", \n  },\n  { \n    langKey: \"ru_RU\", \n    langName: \"RU\", \n    langFullName: \"Russian\", \n  },\n  { \n    langKey: \"fr_FR\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"FR\",\n    regionFullName: \"France\"\n  },\n  { \n    langKey: \"fr_CA\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"CA\",\n    regionFullName: \"Canada\",\n  },\n  { \n    langKey: \"es_ES\", \n    langName: \"ES\", \n    langFullName: \"Spanish\", \n  },\n  { \n    langKey: \"fr_BE\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"BE\",\n    regionFullName: \"Belgium\",\n  },\n  { \n    langKey: \"nl_BE\", \n    langName: \"NL\", \n    langFullName: \"Dutch\",\n    regionName: \"BE\",\n    regionFullName: \"Belgium\"\n  },\n];\n\nexport const ADDITIONAL_LANGS = LANGS.slice(1);\n\nexport const MAIN_LANG_KEY = LANGS[0].langKey;","export const alignmentList = {\r\n    center: \"center\",\r\n    left: \"flex-start\",\r\n    right: \"flex-end\",\r\n    justify: \"flex-start\",\r\n};\r\n\r\nexport const numberingSets = {\r\n    decimal: [\"1\", \"2\", \"3\", \"88\", \"888\"],\r\n    \"upper-alpha\": [\"A\", \"B\", \"C\", \"XX\", \"XXX\"],\r\n    \"lower-alpha\": [\"a\", \"b\", \"c\", \"xx\", \"xxx\"],\r\n    \"upper-roman\": [\"I\", \"II\", \"III\", \"XX\", \"XXX\"],\r\n    \"lower-roman\": [\"i\", \"ii\", \"iii\", \"xx\", \"xxx\"],\r\n};\r\n\r\nexport const lineSpacings = [\"1.0\", \"1.15\", \"1.5\", \"2.0\", \"2.5\", \"3.0\"];\r\n\r\nexport const orderedListStylesMap = new Map([\r\n    [\"decimal\", \"1, 2, 3\"],\r\n    [\"upper-alpha\", \"A, B, C\"],\r\n    [\"lower-alpha\", \"a, b, c\"],\r\n    [\"upper-roman\", \"I, II, III\"],\r\n    [\"lower-roman\", \"i, ii, iii\"],\r\n]);\r\n\r\nexport const bulletNamesMap = new Map([\r\n    [\"2022\", \"•\"],\r\n    [\"2014\", \"—\"],\r\n    [\"2605\", \"★\"],\r\n]);\r\n\r\nexport const sectionTypesMap = new Map([\r\n    [\"text\", \"Text\"],\r\n    [\"table\", \"Table\"],\r\n    [\"image\", \"Image\"],\r\n]);\r\n\r\nexport const backSpaceActionsMap = new Map([\r\n    [\"merge\", \"Merge\"],\r\n    [\"apply_other_pd\", \"Apply other PD\"],\r\n    [\"remove_pd\", \"Remove PD\"],\r\n    [\"nothing\", \"Nothing\"],\r\n]);\r\n\r\nexport const sampleText = `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`;\r\n","import { LANGS } from \"./localeConstants\";\r\nimport { sectionTypesMap } from \"./constants\";\r\n\r\nexport const GLOBAL_FALLBACK_MARK = \"GLOBAL FALLBACK\";\r\nexport const DEFAULT_FONT = \"Helvetica\";\r\nexport const DEFAULT_FONT_SIZE = \"11\";\r\nexport const DEFAULT_SIDE_NUMBER_FONT_COLOR = \"FFF\";\r\nexport const DEFAULT_SIDE_NUMBER_FILLING_COLOR = \"1E88E5\";\r\nexport const DEFAULT_SIDE_NUMBER_WIDTH = \"20\";\r\nexport const DEFAULT_SIDE_NUMBER_RADIUS = \"10\";\r\nexport const DEFAULT_FONT_COLOR = \"000\";\r\nexport const DEFAULT_ROW_INDENT = \"0\";\r\nexport const DEFAULT_MARGIN = \"6\";\r\nexport const DEFAULT_WORD_SPACING = \"0\";\r\nexport const DEFAULT_LINE_SPACING = \"1.5\";\r\nexport const DEFAULT_BORDER_COLOR = \"F00\";\r\nexport const DEFAULT_BORDER_THICKNESS = \"2\";\r\n\r\nexport const autoFillingRequiredFields = {\r\n    sideNumberFont: DEFAULT_FONT,\r\n    sideNumberFontSize: DEFAULT_FONT_SIZE,\r\n    font: DEFAULT_FONT,\r\n    fontSize: DEFAULT_FONT_SIZE,\r\n    fontColor: DEFAULT_FONT_COLOR,\r\n    marginTop: DEFAULT_MARGIN,\r\n    marginBottom: DEFAULT_MARGIN,\r\n    firstRowIndent: DEFAULT_ROW_INDENT,\r\n    otherRowsIndent: DEFAULT_ROW_INDENT,\r\n    wordSpacing: DEFAULT_WORD_SPACING,   \r\n    lineSpacing: DEFAULT_LINE_SPACING,\r\n    borderColor: DEFAULT_BORDER_COLOR,\r\n    borderThickness: DEFAULT_BORDER_THICKNESS,\r\n};\r\n\r\nexport const initialFormState = {\r\n    ...autoFillingRequiredFields,\r\n    decKey: \"\",\r\n    sectionTypes: { ...Array.from(sectionTypesMap).reduce((acc, [ key ], i) => ({ ...acc, [key]: !i }), {})},\r\n    group: \"\",\r\n    groupToCreate: \"\",\r\n    active: true,\r\n    name: { ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}) },\r\n    indentationalLevel: \"\",\r\n    fixedIndentation: true,\r\n    softReturn: false,\r\n    backspaceActionWithContent: \"merge\",\r\n    backspaceActionWithContentStyle: \"\",\r\n    returnActionNextSection: GLOBAL_FALLBACK_MARK,\r\n    returnActionEmptySection: GLOBAL_FALLBACK_MARK,\r\n    tabAction: \"\",\r\n    shiftTabAction: \"\",\r\n    isList: false,\r\n    listName: \"\",\r\n    orderLevel: \"\",\r\n    suffixDistance: \"0.5\",\r\n    magicTabs: false,\r\n    listType: \"unordered\",\r\n    listItem: \"2022\",\r\n    unicodeNumber: \"\",\r\n    unicodeChar: \"\",\r\n    listItemString: \"\",\r\n    numberingStyle: \"decimal\",\r\n    continueNumbering: false,\r\n    allowRestartNumbering: false,\r\n    includePreviousFrom: \"\",\r\n    patternMode: false,\r\n    listPattern: \"\",\r\n    prefix: \"\",\r\n    suffix: \"\",\r\n    sideNumber: false,\r\n    customSideNumberFont: \"\",\r\n    sideNumberAlignment: \"center\",\r\n    sideNumberFontColor: DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    sideNumberFillingColor: DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    sideNumberWidth: DEFAULT_SIDE_NUMBER_WIDTH,\r\n    sideNumberLineHeight: \"\",\r\n    sideNumberRadius: DEFAULT_SIDE_NUMBER_RADIUS,\r\n    sideNumberBold: false,\r\n    sideNumberItalic: false,\r\n    sideNumberUnderlined: false,\r\n    referenceGroup: \"\",\r\n    referenceGroupToCreate: \"\",\r\n    customFont: \"\",\r\n    alignment: \"left\",\r\n    bold: false,\r\n    italic: false,\r\n    underlined: false,\r\n    stroke: false,\r\n    textTransform: \"none\",\r\n    readOnly: false,\r\n    connectToPrevious: false,\r\n    verticalAlign: \"baseline\",\r\n    customLineSpacing: \"\",\r\n    borderLeft: false,\r\n    borderRight: false,\r\n    borderTop: false,\r\n    borderBottom: false,\r\n    borderType: \"solid\",\r\n    fillingColor: \"\",\r\n    tocIndentation: \"\",\r\n    shortCutWin: \"\",\r\n    shortCutWinView: \"\",\r\n    shortCutMac: \"\",\r\n    shortCutMacView: \"\",\r\n};","const { body } = document;\r\nlet width;\r\n\r\nconst container = document.createElement('span');\r\ncontainer.innerHTML = Array(100).join('wi');\r\ncontainer.style.cssText = [\r\n    'position:absolute',\r\n    'width:auto',\r\n    'font-size:128px',\r\n    'left:-99999px'\r\n].join(' !important;');\r\n\r\nconst getWidth = fontFamily => {\r\n    container.style.fontFamily = fontFamily;\r\n\r\n    body.appendChild(container);\r\n    width = container.clientWidth;\r\n    body.removeChild(container);\r\n\r\n    return width;\r\n};\r\n\r\nconst monoWidth  = getWidth('monospace');\r\nconst serifWidth = getWidth('serif');\r\nconst sansWidth  = getWidth('sans-serif');\r\n\r\nconst isFontAvailable = font => {\r\n    return monoWidth !== getWidth(font + ',monospace') ||\r\n    sansWidth !== getWidth(font + ',sans-serif') ||\r\n    serifWidth !== getWidth(font + ',serif');\r\n};\r\n\r\nexport default isFontAvailable;","import { DEFAULT_FONT } from \"./initialFormState\";\r\nimport isFontAvailable from \"../helpers/isFontAvailable\";\r\n\r\nconst standartFonts = [\r\n    DEFAULT_FONT,\r\n    \"Source Sans Pro\",\r\n    \"Dejavu Sans\",\r\n    \"Dejavu Serif\",\r\n    \"Open Sans\",\r\n    \"Montserrat\",\r\n    \"Arial\",\r\n    \"Georgia\",\r\n    \"Verdana\",\r\n    \"Times New Roman\",\r\n];\r\n\r\nconst fontsSet = standartFonts.filter(font => (font === DEFAULT_FONT || isFontAvailable(font)));\r\n\r\nexport default fontsSet;","export const tabsErrorInitialState = {\r\n    namesSection: false,\r\n    listSection: false,\r\n};\r\n\r\nexport const sectionsTabNumbers = [\r\n    { tabName: \"namesSection\", tabNumber: 0 },\r\n    { tabName: \"listSection\", tabNumber: 2 },\r\n];","import { GLOBAL_FALLBACK_MARK, fontsSet, lineSpacings } from \"../../constants\";\r\n\r\nconst DEFAULT_DECORATOR = \"Text 2000\";\r\n\r\nexport const replaceDecNameIfDefault = decName => {\r\n    if (decName === DEFAULT_DECORATOR) {\r\n        return GLOBAL_FALLBACK_MARK;\r\n    }\r\n    if (decName === GLOBAL_FALLBACK_MARK) {\r\n        return DEFAULT_DECORATOR;\r\n    }\r\n    return decName;\r\n};\r\n\r\nexport const getNumber = val => val ? +val : null;\r\n\r\nexport const getNumberString = val => typeof val === \"number\" ? `${val}` : \"\";\r\n\r\nexport const getNumeratedListPattern = (order, prefix, suffix) => {\r\n    return `${prefix || \"\"}{${order || 0}}${suffix || \"\"}`;\r\n};\r\n\r\nexport const getStyleString = (rawDec, initialState) => {\r\n    const dec = {};\r\n    for (let propName in rawDec) {\r\n        if (rawDec[propName] !== initialState[propName]) {\r\n            dec[propName] = rawDec[propName];\r\n        }\r\n    }\r\n    const styles = {};\r\n    \r\n    dec.font && (styles[\"font-family\"] = dec.customFont || dec.font);\r\n    dec.fontSize && (styles[\"font-size\"] = `${dec.fontSize}pt`);\r\n    dec.fontColor && dec.fontColor !== \"000000\" && (styles.color = `#${dec.fontColor}`);\r\n    dec.verticalAlign && (styles[\"vertical-align\"] = dec.verticalAlign);\r\n    dec.bold && (styles[\"font-weight\"] = \"bold\");\r\n    dec.italic && (styles[\"font-style\"] = \"italic\");\r\n\r\n    const textDecoration = `${dec.underlined ? \"underline\" : \"\"} ${dec.stroke ? \"line-through\" : \"\"}`.trim()\r\n    textDecoration && (styles[\"text-decoration\"] = textDecoration);\r\n\r\n    if (dec.textTransform) {\r\n        if (dec.textTransform === \"small-caps\") {\r\n            styles[\"font-variant\"] = \"small-caps\";\r\n        } else {\r\n            styles[\"text-transform\"] = dec.textTransform;\r\n        }\r\n    }\r\n\r\n    if (dec.connectToPrevious) {\r\n        styles[\"margin-top\"] = \"-1px\";\r\n        styles[\"margin-bottom\"] = \"-1px\";\r\n        styles[\"padding-top\"] = \"1px\";\r\n        styles[\"padding-bottom\"] = \"1px\";\r\n    } else {\r\n        dec.marginTop && (styles[\"margin-top\"] = `${dec.marginTop}pt`);\r\n        dec.marginBottom && (styles[\"margin-bottom\"] = `${dec.marginBottom}pt`);\r\n    }\r\n\r\n    if (dec.firstRowIndent || dec.otherRowsIndent) {\r\n        const indentsDifference = +(dec.firstRowIndent || 0) - +(dec.otherRowsIndent || 0);\r\n        if (!indentsDifference) {\r\n            styles[\"margin-left\"] = `${dec.otherRowsIndent}cm`;\r\n        } else {\r\n            styles[\"text-indent\"] = `${indentsDifference}cm`;\r\n            dec.otherRowsIndent && (styles[\"margin-left\"] = `${dec.otherRowsIndent}cm`);\r\n        }\r\n    }\r\n\r\n    if (dec.customLineSpacing !== \"1.4em\") {\r\n        styles[\"line-height\"] = dec.customLineSpacing || rawDec.lineSpacing;\r\n    }\r\n\r\n    if (dec.borderLeft || dec.borderRight || dec.borderTop || dec.borderBottom) {\r\n        const borderThickness = dec.borderThickness || initialState.borderThickness;\r\n        const borderType = dec.borderType || initialState.borderType;\r\n        const borderColor = dec.borderColor || initialState.borderColor;\r\n        const borderStyle = ` ${borderThickness}pt ${borderType} #${borderColor}`;\r\n\r\n        dec.borderLeft && (styles[\"border-left\"] = borderStyle);\r\n        dec.borderRight && (styles[\"border-right\"] = borderStyle);\r\n        dec.borderTop && (styles[\"border-top\"] = borderStyle);\r\n        dec.borderBottom && (styles[\"border-bottom\"] = borderStyle);\r\n    }\r\n    \r\n    dec.wordSpacing && (styles[\"word-spacing\"] = `${dec.wordSpacing}pt`);\r\n\r\n    dec.fillingColor && (styles[\"background-color\"] = `#${dec.fillingColor}`);\r\n\r\n    return Object.entries(styles).reduce((acc, [key, value]) => (`${acc} ${key}:${value};`), \"\").trim();\r\n};\r\n\r\nexport const getSideNumberStyleString = dec => {\r\n    const styles = {};\r\n\r\n    if (dec.font !== dec.sideNumberFont || dec.customFont !== dec.customSideNumberFont) {\r\n        styles.font = dec.customSideNumberFont || dec.customFont;\r\n    }\r\n\r\n    styles[\"text-align\"] = dec.sideNumberAlignment;\r\n    dec.fontSize !== dec.sideNumberFontSize && (styles[\"font-size\"] = `${dec.sideNumberFontSize}pt`);\r\n    dec.sideNumberFontColor && (styles.color = `#${dec.sideNumberFontColor}`);\r\n    dec.sideNumberFillingColor && (styles[\"background-color\"] = `#${dec.sideNumberFillingColor}`);\r\n    dec.sideNumberWidth && (styles[\"min-width\"] = `${dec.sideNumberWidth}pt`);\r\n    dec.sideNumberLineHeight && (styles[\"line-height\"] = `${dec.sideNumberLineHeight}pt`);\r\n    dec.sideNumberRadius && (styles[\"border-radius\"] = `${dec.sideNumberRadius}pt`);\r\n    dec.sideNumberBold && (styles[\"font-weight\"] = \"bold\");\r\n    dec.sideNumberItalic && (styles[\"font-style\"] = \"italic\");\r\n    dec.sideNumberUnderline && (styles[\"text-decoration\"] = \"underline\");\r\n\r\n    return Object.entries(styles).reduce((acc, [key, value]) => (`${acc} ${key}:${value};`), \"\").trim();\r\n};\r\n\r\nexport const getStylesObject = (stylesString = \"\", sideNumberStylesString = \"\") => {\r\n    const res = {};\r\n    if (stylesString) {\r\n        const keyValueStringsArray = stylesString.split(\";\");\r\n        if (keyValueStringsArray.length) {\r\n            const stylesArray = keyValueStringsArray.map(keyValueStr => keyValueStr.split(\":\"))\r\n                .map(([key, value]) => [(key || \"\").trim(), (value || \"\").trim()])\r\n                .filter(([key, value]) => key && value);\r\n            \r\n            if (stylesArray.length) {\r\n                const styles = stylesArray.reduce((acc, [key, value]) => ({...acc, [key]: value }), {});\r\n                \r\n                if (styles[\"font-family\"]) {\r\n                    if (fontsSet.includes(styles[\"font-family\"])) {\r\n                        res.font = styles[\"font-family\"];\r\n                    } else {\r\n                        res.font = \"custom\";\r\n                        res.customFont = styles[\"font-family\"];\r\n                    }\r\n                }\r\n\r\n                styles[\"font-size\"] && (res.fontSize = styles[\"font-size\"].slice(0, -2));\r\n                styles.color && (res.fontColor = styles.color.slice(1));\r\n                styles[\"vertical-align\"] && (res.verticalAlign = styles[\"vertical-align\"]);\r\n                \r\n                if (styles[\"font-weight\"] === \"bold\" || +styles[\"font-weight\"] >= 700) {\r\n                    res.bold = true;\r\n                }\r\n\r\n                styles[\"font-style\"] === \"italic\" && (res.italic = true);\r\n\r\n                if (styles[\"text-decoration\"]) {\r\n                    styles[\"text-decoration\"].includes(\"underline\") && (res.underlined = true);\r\n                    styles[\"text-decoration\"].includes(\"line-through\") && (res.stroke = true);\r\n                }\r\n\r\n                if (styles[\"text-transform\"] === \"lowercase\" || styles[\"text-transform\"] ===  \"uppercase\") {\r\n                    res.textTransform = styles[\"text-transform\"];\r\n                }\r\n                \r\n                styles[\"font-variant\"] === \"small-caps\" && (res.textTransform = styles[\"font-variant\"]);\r\n                \r\n                if (\r\n                    styles[\"margin-top\"] === \"-1px\" && \r\n                    styles[\"margin-bottom\"] === \"-1px\" && \r\n                    styles[\"padding-top\"] === \"1px\" && \r\n                    styles[\"padding-bottom\"] === \"1px\"\r\n                ) {\r\n                    res.connectToPrevious = true;\r\n                } else {\r\n                    styles[\"margin-top\"] && (res.marginTop = styles[\"margin-top\"].slice(0, -2));\r\n                    styles[\"margin-bottom\"] && (res.marginBottom = styles[\"margin-bottom\"].slice(0, -2));\r\n                }\r\n\r\n                if (styles[\"margin-left\"] && !styles[\"text-indent\"]) {\r\n                    res.firstRowIndent = styles[\"margin-left\"].slice(0, -2);\r\n                    res.otherRowsIndent = res.firstRowIndent;\r\n                } else if (styles[\"text-indent\"] && !styles[\"margin-left\"]) {\r\n                    res.firstRowIndent = styles[\"text-indent\"].slice(0, -2); \r\n                } else if (styles[\"margin-left\"] && styles[\"text-indent\"]) {\r\n                    const margin = +(styles[\"margin-left\"].slice(0, -2));\r\n                    const indent = +(styles[\"text-indent\"].slice(0, -2));\r\n                    res.otherRowsIndent = `${margin}`;\r\n                    res.firstRowIndent = `${margin + indent}`;\r\n                }\r\n\r\n                if (styles[\"line-height\"]) {\r\n                    if (lineSpacings.includes(styles[\"line-height\"])) {\r\n                        res.lineSpacing = styles[\"line-height\"];\r\n                    } else {\r\n                        res.lineSpacing = \"custom\";\r\n                        res.customLineSpacing = styles[\"line-height\"];\r\n                    }\r\n                }\r\n\r\n                styles[\"word-spacing\"] && (res.wordSpacing = styles[\"word-spacing\"].slice(0, -2));\r\n                styles[\"background-color\"] && (res.fillingColor = styles[\"background-color\"].slice(1));\r\n                console.log(\"style props from editor_style\", styles);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (sideNumberStylesString) {\r\n        const keyValueStringsArray = sideNumberStylesString.split(\";\");\r\n        if (keyValueStringsArray.length) {\r\n            const stylesArray = keyValueStringsArray.map(keyValueStr => keyValueStr.split(\":\"))\r\n                .map(([key, value]) => [(key || \"\").trim(), (value || \"\").trim()])\r\n                .filter(([key, value]) => key && value);\r\n            \r\n            if (stylesArray.length) {\r\n                res.sideNumber = true;\r\n\r\n                const styles = stylesArray.reduce((acc, [key, value]) => ({...acc, [key]: value }), {});\r\n                if (styles[\"font-family\"]) {\r\n                    if (fontsSet.includes(styles[\"font-family\"])) {\r\n                        res.sideNumberFont = styles[\"font-family\"];\r\n                    } else {\r\n                        res.sideNumberFont = \"custom\";\r\n                        res.sideNumberCustomFont = styles[\"font-family\"];\r\n                    }\r\n                }\r\n\r\n                styles[\"text-align\"] && (res.sideNumberAlignment = styles[\"text-align\"]);\r\n                styles[\"font-size\"] && (res.sideNumberFontSize = styles[\"font-size\"].slice(0, -2));\r\n                styles.color && (res.sideNumberFontColor = styles.color.slice(1));\r\n                styles[\"background-color\"] && (res.sideNumberFillingColor = styles[\"background-color\"].slice(1));\r\n                styles[\"min-width\"] && (res.sideNumberWidth = styles[\"min-width\"].slice(0, -2));\r\n                styles[\"line-height\"] && (res.sideNumberLineHeight = styles[\"line-height\"].slice(0, -2));\r\n                styles[\"border-radius\"] && (res.sideNumberRadius = styles[\"border-radius\"].slice(0, -2));\r\n\r\n                if (styles[\"font-weight\"] === \"bold\" || +styles[\"font-weight\"] >= 700) {\r\n                    res.sideNumberBold = true;\r\n                }\r\n\r\n                styles[\"font-style\"] === \"italic\" && (res.sideNumberItalic = true);\r\n                styles[\"text-decoration\"] && styles[\"text-decoration\"].includes(\"underline\") && (res.sideNumberUnderline = true);\r\n                console.log(\"style props from numerated_list_style\", styles);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!res.lineSpacing && !res.customLineSpacing) {\r\n        res.lineSpacing = \"custom\";\r\n        res.customLineSpacing = \"1.4em\";\r\n    }\r\n\r\n    return res;\r\n};","const decToSendDefaultProps = {\r\n    item_type: \"style\",\r\n    style_properties: {},\r\n    keyboard_shortcut: {},\r\n    xref_target_type_group_key: null,\r\n    is_possible_xref_target: false,\r\n    show_in_editor_toc: false,\r\n    editor_toc_indentation: null,\r\n    editor_toc_filter_level: null,\r\n    list_key: null,\r\n    item_order: null,\r\n    extra_hanging_indentation: null,\r\n    extra_hanging_indentation_at_grid: false,\r\n    numerated_list_format: null,\r\n    numerated_list_start: null,\r\n    numerated_list_pattern: null,\r\n    numerated_list_style: \"\",\r\n    is_auto_restart_numbering: false,\r\n    allow_restart_numbering: false,\r\n    bullet_list_format: null,\r\n    movable: true,\r\n    content_required: false,\r\n    on_return_style_key: null,\r\n    on_return_indentation: null,\r\n    item_order_allow_tab: false,\r\n};\r\n\r\nexport default decToSendDefaultProps;","import { \r\n    sectionTypesMap, \r\n    bulletNamesMap, \r\n    orderedListStylesMap,\r\n    initialFormState,\r\n} from \"../../constants\";\r\nimport {\r\n    replaceDecNameIfDefault,\r\n    getNumber,\r\n    getNumberString,\r\n    getNumeratedListPattern,\r\n    getStyleString,\r\n    getSideNumberStyleString,\r\n    getStylesObject,\r\n} from \"./converterUtils\";\r\nimport decToSendDefaultProps from \"./decToSendDefaultProps\";\r\nimport { unicodeNumberToChar, getShortCutUtils } from \"../index\";\r\n\r\nclass DecDataConverter {\r\n    static convertToSend(rawDec) {\r\n        const dec = {};\r\n        // eslint-disable-next-line\r\n        for (let key in rawDec) {\r\n            dec[key] = rawDec[key] !== \"\" ? rawDec[key] : null;\r\n        }\r\n\r\n        const res = {};\r\n        res.key = dec.decKey;\r\n        res.section_types = Object.entries(dec.sectionTypes).filter(([, value]) => value).map(([key]) => key);\r\n        res.hidden = !dec.active;\r\n        res.name = dec.name;\r\n\r\n        res.initial_indentation = getNumber(dec.indentationalLevel);\r\n        res.is_fixed_indentation = dec.fixedIndentation;\r\n        res.content_in_second_line = dec.softReturn;\r\n        res.backspace_action = dec.backspaceActionWithContent;\r\n        res.backspace_action_value = replaceDecNameIfDefault(dec.backspaceActionWithContentStyle);\r\n        res.create_new_section_on_return_if_empty = !!dec.returnActionNextSection;\r\n        res.pd_for_new_section_on_return_if_empty = replaceDecNameIfDefault(dec.returnActionNextSection);\r\n        res.change_pd_on_return_if_empty = !!dec.returnActionEmptySection;\r\n        res.pd_for_current_section_on_return_if_empty = replaceDecNameIfDefault(dec.returnActionEmptySection);\r\n        res.on_tab_key = dec.tabAction;\r\n        res.on_shift_tab_key = dec.shiftTabAction;\r\n\r\n        if (dec.isList) {\r\n            res.list_key = dec.listName;\r\n            res.item_order = dec.orderLevel ? getNumber(dec.orderLevel) : null;\r\n            res.extra_hanging_indentation = dec.suffixDistance === \"0.5\" ? null : `${dec.suffixDistance}cm`;\r\n            res.extra_hanging_indentation_at_grid = dec.magicTabs;\r\n            if (dec.listType === \"ordered\") {\r\n                // for ordered list\r\n                res.numerated_list_format = dec.numberingStyle;\r\n                if (dec.patternMode) {\r\n                    // for composite numbering\r\n                    res.numerated_list_pattern = dec.listPattern;\r\n                } else {\r\n                    // for simple numbering\r\n                    res.numerated_list_pattern = getNumeratedListPattern(dec.orderLevel, dec.prefix, dec.suffix);\r\n                }\r\n                res.is_auto_restart_numbering = !dec.continueNumbering;\r\n                res.allow_restart_numbering = dec.allowRestartNumbering;\r\n                res.numerated_list_start = dec.includePreviousFrom;\r\n                res.numerated_list_style = \"styles settings\";\r\n            } else {\r\n                // for unordered list\r\n                if ((dec.listItem === \"custom\" && !dec.unicodeNumber)) {\r\n                    res.bullet_list_format = null;\r\n                } else if (dec.listItem === \"string\") {\r\n                    res.bullet_list_format = dec.listItemString;\r\n                } else {\r\n                    res.bullet_list_format = `\\\\${dec.unicodeNumber || dec.listItem}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (dec.referenceGroup) {\r\n            res.xref_target_type_group_key = dec.referenceGroup;\r\n            res.is_possible_xref_target = true;\r\n        }\r\n\r\n        if (dec.alignment && dec.alignment !== \"left\") {\r\n            res.style_properties = { alignment: dec.alignment };\r\n        }\r\n        res.read_only = dec.readOnly;\r\n\r\n        if (dec.tocIndentation) {\r\n            res.show_in_editor_toc = true;\r\n            res.editor_toc_indentation = +dec.tocIndentation;\r\n            res.editor_toc_filter_level = +dec.tocIndentation;\r\n        }\r\n\r\n        if (dec.shortCutMac) {\r\n            res.keyboard_shortcut = dec.shortCutMac;\r\n        }\r\n\r\n        res.editor_style = getStyleString(rawDec, initialFormState);\r\n        res.numerated_list_style = dec.sideNumber ? getSideNumberStyleString(rawDec) : \"\";\r\n                \r\n        console.log(\"send\", {...decToSendDefaultProps, ...res});\r\n\r\n        return { ...decToSendDefaultProps, ...res };\r\n    }\r\n\r\n    static convertToEdit(rawDec) {\r\n        const dec = {};\r\n        // eslint-disable-next-line\r\n        for (let key in rawDec) {\r\n            dec[key] = rawDec[key] !== null ? rawDec[key] : \"\";\r\n        }\r\n\r\n        const res = {};\r\n        res.decKey = dec.key;\r\n        res.sectionTypes = Array.from(sectionTypesMap).map(([ key ]) => key).reduce((acc, cur) => ({\r\n            ...acc,\r\n            [cur]: dec.section_types.includes(cur),\r\n        }), {});\r\n        res.active = !dec.hidden;\r\n        res.name = dec.name;\r\n\r\n        res.indentationalLevel = getNumberString(dec.initial_indentation);\r\n        res.fixedIndentation = dec.is_fixed_indentation;\r\n        res.softReturn = dec.content_in_second_line;\r\n        res.backspaceActionWithContent = dec.backspace_action;\r\n        res.backspaceActionWithContentStyle = replaceDecNameIfDefault(dec.backspace_action_value);\r\n        res.returnActionNextSection = replaceDecNameIfDefault(dec.pd_for_new_section_on_return_if_empty);\r\n        res.returnActionEmptySection = replaceDecNameIfDefault(dec.pd_for_current_section_on_return_if_empty);\r\n        res.tabAction = dec.on_tab_key;\r\n        res.shiftTabAction = dec.on_shift_tab_key;\r\n\r\n        // res.numerated_list_format, dec.prefix, dec.suffix, dec.OrderLevel\r\n        if (dec.list_key || dec.bullet_list_format) {\r\n            res.isList = true;\r\n            res.listName = dec.list_key;\r\n            res.orderLevel = dec.item_order ? getNumber(dec.orderLevel) : \"0\";\r\n            const suffixDistanceMatch = `${(dec.extra_hanging_indentation||\"0.5cm\")}`.match(/[\\d.]*/);\r\n            res.suffixDistance = suffixDistanceMatch ? suffixDistanceMatch[0] : \"0.5\";\r\n            res.magicTabs = dec.extra_hanging_indentation_at_grid;\r\n            if (dec.numerated_list_pattern) {\r\n                // for ordered list\r\n                res.listType = \"ordered\";\r\n                if (/{.*?{/.test(dec.numerated_list_pattern)) {\r\n                    // for composite numbering\r\n                    res.patternMode = true;\r\n                    res.listPattern = dec.numerated_list_pattern;\r\n                } else {\r\n                    // for simple numbering\r\n                    const prefixAndSuffixMatch = dec.numerated_list_pattern.match(/(.*?){.*}(.*)/);\r\n                    if (prefixAndSuffixMatch) {\r\n                        res.prefix = prefixAndSuffixMatch[1] || \"\";\r\n                        res.suffix = prefixAndSuffixMatch[2] || \"\";\r\n                    }\r\n                }\r\n                res.numberingStyle = orderedListStylesMap.has(dec.numerated_list_format) ? dec.numerated_list_format : \"decimal\";\r\n                res.continueNumbering = !dec.is_auto_restart_numbering;\r\n                res.allowRestartNumbering = dec.allow_restart_numbering;\r\n                res.includePreviousFrom = dec.numerated_list_start;\r\n            } else {\r\n                // for unordered list\r\n                res.listType = \"unordered\";\r\n                if ((dec.bullet_list_format || \"\").match(/^\\\\[\\da-f]+/i)) {\r\n                    const bullet = dec.bullet_list_format.slice(1);\r\n                    if (bulletNamesMap.has(bullet)) {\r\n                        res.listItem = bullet;\r\n                    } else {\r\n                        res.listItem = \"custom\";\r\n                        res.unicodeNumber = bullet;\r\n                        res.unicodeChar = unicodeNumberToChar(bullet);\r\n                    }\r\n                } else {\r\n                    // strings or empty bullets\r\n                    res.listItem = dec.bullet_list_format ? \"string\" : \"custom\";\r\n                    res.listItemString = dec.bullet_list_format;\r\n                }\r\n            }\r\n        }\r\n\r\n        res.referenceGroup = dec.xref_target_type_group_key || \"\";\r\n\r\n        if (dec.style_properties.alignment) {\r\n            res.alignment = dec.style_properties.alignment;\r\n        }\r\n        res.readOnly = !!dec.read_only;\r\n        res.tocIndentation = getNumberString(dec.editor_toc_indentation);\r\n\r\n        if ((dec.keyboard_shortcut||{}).hasOwnProperty(\"keyCode\")) {\r\n            res.shortCutMac = dec.keyboard_shortcut;\r\n            res.shortCutMacView = getShortCutUtils(\"MacOS\").convertShortcutToString(dec.keyboard_shortcut);\r\n        }\r\n\r\n        const stylesProps = getStylesObject(dec.editor_style, dec.numerated_list_style);\r\n\r\n        console.log(\"recieve\", { ...initialFormState, ...res, ...stylesProps });\r\n\r\n        return { ...initialFormState, ...res, ...stylesProps };\r\n    }\r\n\r\n    static mapDecFields = {};\r\n}\r\n\r\nexport default DecDataConverter;","import DecDataConverter from \"./DecDataConverter\";\r\nexport default DecDataConverter;","import keycode from \"keycode\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === \"MacOS\" ? \"Option\" : \"Alt\",\r\n      ctrlKey: systemName === \"MacOS\" ? \"Control\" : \"Ctrl\",\r\n      shiftKey: \"Shift\",\r\n      metaKey: \"Command\",\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = \"\";\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === \"style\") {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","import { tabsErrorInitialState, sectionsTabNumbers, MAIN_LANG_KEY } from \"../constants\";\r\n\r\nexport const hasErrorInSection = refs => !refs.every(ref => ref.current.value);\r\n\r\nexport const getTabsErrorState = form => {\r\n    const tabsErrorState = { ...tabsErrorInitialState };\r\n    const { name, decKey, listName, isList, listType } = form;\r\n\r\n    if (!name[MAIN_LANG_KEY] || !decKey) {\r\n        tabsErrorState.namesSection = true;\r\n    }\r\n    if (isList && listType === \"ordered\" && !listName) {\r\n        tabsErrorState.listSection = true;\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let tabName in tabsErrorState) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabsErrorState;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const getTabNumberToSwitch = tabsErrorState => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const { tabName, tabNumber } of sectionsTabNumbers) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabNumber;\r\n        }\r\n    }\r\n};","import { \r\n    numberingSets, \r\n    autoFillingRequiredFields, \r\n    DEFAULT_FONT, \r\n} from \"../constants\";\r\nimport isFontAvailable from \"./isFontAvailable\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const changeAndScroll = (changeFunction, timeOut) => (...args) => {\r\n    changeFunction(...args);\r\n    if (!timeOut) {\r\n        scrollToBottom(\"content-rightSide\");\r\n    } else {\r\n        setTimeout(() => {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }, timeOut);\r\n    }\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = (isOrderedList, numberingStyle, bullet) => (\r\n    isOrderedList ? numberingSets[numberingStyle] : Array(4).fill(bullet)\r\n);\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};\r\n\r\nexport const focusInput = (inputRef, timeout = 300) => {\r\n    setTimeout(() => {\r\n        inputRef.current.focus();\r\n    }, timeout);\r\n};\r\n\r\nexport const focusOnEmptyField = refs => {\r\n    for (let i = 0; i < refs.length; i++) {\r\n        if (!refs[i].current.value) {\r\n            console.log(refs[i].current.value, i)\r\n            focusInput(refs[i]);\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\nexport const getPreviewFont = (font, customFont) => {\r\n    if (font !== \"custom\" && isFontAvailable(font)) {\r\n        return font;\r\n    } else if (font === \"custom\" && customFont && isFontAvailable(customFont)) {\r\n        return customFont;\r\n    }\r\n    return `'${DEFAULT_FONT}', 'Roboto', sans-serif`;\r\n}\r\n\r\nexport const fillMissedFields = currentFormState => {\r\n    const { \r\n        font, customFont,\r\n        sideNumberFont, customSideNumberFont,\r\n        lineSpacing, customLineSpacing,\r\n    } = currentFormState;\r\n\r\n    const formStateWithoutMissedFields = { ...currentFormState };\r\n    \r\n    [\r\n        [font, customFont],\r\n        [sideNumberFont, customSideNumberFont], \r\n        [lineSpacing, customLineSpacing],\r\n    ].forEach(([option, customOption]) => {\r\n        if (option === \"custom\" && !customOption) {\r\n            formStateWithoutMissedFields[option] = null;\r\n        }\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    for (let fieldName in autoFillingRequiredFields) {\r\n        if (!currentFormState[fieldName] && autoFillingRequiredFields[fieldName]) {\r\n            formStateWithoutMissedFields[fieldName] = autoFillingRequiredFields[fieldName];\r\n        }\r\n    }\r\n    return formStateWithoutMissedFields;\r\n};","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport LabelWithAsterisk from \"./LabelWithAsterisk\";\r\nimport { focusInput } from \"../helpers\";\r\nimport { LANGS, MAIN_LANG_KEY, ADDITIONAL_LANGS } from \"../constants\";\r\n\r\nclass NewGroupDialog extends React.PureComponent {\r\n    isXref = this.props.groupType === \"xref\";\r\n\r\n    emptyGroup = {\r\n        ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}),\r\n        ...this.isXref && { groupKey: \"\" },\r\n    };\r\n\r\n    getInitialState = () => ({ ...this.emptyGroup, ...this.props.savedGroup });\r\n\r\n    state = this.getInitialState();\r\n\r\n    requiredFieldRef = React.createRef();\r\n\r\n    onInputChange = inputName => e => {\r\n        this.setState({ [inputName]: e.target.value });\r\n    };\r\n\r\n    onClose = () => {\r\n        this.setState(this.getInitialState());\r\n        this.props.hideGroupDialogValidationError();\r\n        this.props.closeGroupDialog();\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        if ((!this.isXref && this.state[MAIN_LANG_KEY].trim().length) || (this.isXref && this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: this.state[langKey].trim() }), {}),\r\n            };\r\n            if (this.isXref) {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            this.props.hideGroupDialogValidationError();\r\n            this.props.saveGroup(null, (groupToSave[MAIN_LANG_KEY] || groupToSave.groupKey), groupToSave);\r\n            this.props.closeGroupDialog();\r\n        } else {\r\n            this.props.showGroupDialogValidationError();\r\n            focusInput(this.requiredFieldRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode, hasGroupDialogValidationError } = this.props;\r\n        const { onInputChange, onGroupSave, onClose, isXref } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${isXref ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"decoratorDialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        { isXref && (\r\n                            <>\r\n                                <LabelWithAsterisk>Group Key</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state.groupKey}\r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state.groupKey}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { isXref ? (\r\n                            <>\r\n                                <span>Name EN</span>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state[MAIN_LANG_KEY]}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                            <React.Fragment key={langKey}>\r\n                                <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                                <TextField\r\n                                    value={this.state[langKey]}\r\n                                    onChange={onInputChange(langKey)} \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </React.Fragment>\r\n                        )) }                 \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isGroupDialogOpen: false,\r\n            hasGroupDialogValidationError: false,\r\n        };\r\n        \r\n        openGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: true });\r\n        };\r\n\r\n        closeGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: false });\r\n        };\r\n\r\n        showGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: true });\r\n        };\r\n\r\n        hideGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: false });\r\n        };\r\n\r\n        render() {\r\n            const { \r\n                openGroupDialog, \r\n                closeGroupDialog, \r\n                showGroupDialogValidationError, \r\n                hideGroupDialogValidationError \r\n            } = this; \r\n\r\n            return ( \r\n                <ViewComponent \r\n                    {...this.props} \r\n                    {...this.state} \r\n                    {...{ openGroupDialog, closeGroupDialog, showGroupDialogValidationError, hideGroupDialogValidationError }} \r\n                /> \r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import { getShortCutUtils } from \"../helpers\";\r\n\r\nexport const UPDATE_DEC_FORM = \"UPDATE_DEC_FORM\";\r\nexport const CLEAR_DEC_FORM = \"CLEAR_DEC_FORM\";\r\nexport const SHOW_DEC_DIALOG = \"SHOW_DEC_DIALOG\";\r\nexport const HIDE_DEC_DIALOG = \"HIDE_DEC_DIALOG\";\r\nexport const SWITCH_DEC_DIALOG_TAB = \"SWITCH_DEC_DIALOG_TAB\";\r\nexport const RESET_DEC_DIALOG_TAB = \"RESET_DEC_DIALOG_TAB\";\r\nexport const SWITCH_ON_DEC_DIALOG_EDIT_MODE = \"SWITCH_ON_DEC_DIALOG_EDIT_MOD\";\r\nexport const SWITCH_OFF_DEC_DIALOG_EDIT_MODE = \"SWITCH_OFF_DEC_DIALOG_EDIT_MODE\";\r\nexport const UPDATE_VALIDATION_ERROR = \"UPDATE_VALIDATION_ERROR\";\r\nexport const REMOVE_VALIDATION_ERROR = \"REMOVE_VALIDATION_ERROR\";\r\n\r\nexport const updateDecoratorForm = payload => {\r\n    return {\r\n        type: UPDATE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearDecoratorForm = payload => {\r\n    return {\r\n        type: CLEAR_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const showDecoratorDialog = () => {\r\n    return {\r\n        type: SHOW_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const hideDecoratorDialog = () => {\r\n    return {\r\n        type: HIDE_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const switchDecDialogTab = payload => {\r\n    return {\r\n        type: SWITCH_DEC_DIALOG_TAB,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const resetDecDialogTab = () => {\r\n    return {\r\n        type: RESET_DEC_DIALOG_TAB,\r\n    };\r\n}\r\n\r\nexport const switchOnDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const updateValidationError = payload => {\r\n    return {\r\n        type: UPDATE_VALIDATION_ERROR,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const removeValidationError = () => {\r\n    return {\r\n        type: REMOVE_VALIDATION_ERROR,\r\n    };\r\n};\r\n\r\nexport const openDialog = dispatch => dec => {\r\n    if (dec) {\r\n        dispatch(updateDecoratorForm(dec));\r\n        dispatch(switchOnDecDialogEditMode());\r\n    } \r\n    dispatch(showDecoratorDialog());\r\n};\r\n\r\nexport const closeDialog = dispatch => () => {\r\n    dispatch(hideDecoratorDialog());\r\n    dispatch(switchOffDecDialogEditMode());\r\n    dispatch(removeValidationError());\r\n    dispatch(resetDecDialogTab());\r\n    dispatch(clearDecoratorForm());\r\n};\r\n\r\nexport const setValue = dispatch => propName => (e, secondArg = \"\") => {\r\n    const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const toggleValue = dispatch => propName => (e, secondArg) => {\r\n    const newValue = e ? e.target.checked : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const setBullet = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const newBullet = input.length > 1 ? input[input.length - 1] : input;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newBullet,\r\n    }));\r\n    return newBullet;\r\n};\r\n\r\nexport const setColor = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n    \r\n    const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                          ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                          : \"\" ;\r\n    \r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setNumber = dispatch => propName => (e, secondArg) => {\r\n    let input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                          ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                          : \"\" ;\r\n\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setShortCut = dispatch => (valuePropName, viewPropName) => e => {\r\n    const systemName = valuePropName.search(/mac/gi) !== -1 ? \"MacOS\" : \"Windows\";\r\n    const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n    if (shortCut && shortCut.deleteKey) {\r\n        setTimeout(() => {\r\n            dispatch(updateDecoratorForm({ \r\n                [valuePropName]: \"\" \r\n            }));\r\n            dispatch(updateDecoratorForm({ \r\n                [viewPropName]: \"\" \r\n            }));\r\n        }, 100);\r\n    } else if (shortCut) {\r\n        dispatch(updateDecoratorForm({ \r\n            [valuePropName]: shortCut.value \r\n        }));\r\n        dispatch(updateDecoratorForm({ \r\n            [viewPropName]: shortCut.stringValue \r\n        }));\r\n    }\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { hasErrorInSection, focusOnEmptyField } from \"../helpers\";\r\nimport { setValue, toggleValue, updateValidationError } from \"../actions\";\r\nimport { MAIN_LANG_KEY, ADDITIONAL_LANGS, sectionTypesMap } from \"../constants\";\r\n\r\nclass NamesSection extends React.Component {\r\n    decKeyInputRef = React.createRef();\r\n    decNameEnInputRef = React.createRef();\r\n    inputRefs = [this.decKeyInputRef, this.decNameEnInputRef];\r\n\r\n    onGroupChange = (e, groupName, group) => {\r\n        if (group) {\r\n            this.props.changeGroupToCreate(null, group);\r\n        }\r\n        this.props.changeGroup(e, groupName);\r\n    };\r\n\r\n    onNameChange = langKey => e => {\r\n        const newValue = {\r\n            ...this.props.name,\r\n            [langKey]: e.target.value,\r\n        };\r\n        this.props.changeName(null, newValue);\r\n    };\r\n\r\n    onSectionTypesChange = typeName => e => {\r\n        const newValue = {\r\n            ...this.props.sectionTypes,\r\n            [typeName]: e.target.checked,\r\n        };\r\n        this.props.changeSectionTypes(null, newValue);\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n        if (this.props.validationErrorInSection && !hasErrorInSection(this.inputRefs)) {\r\n            this.props.updateValidationError({ namesSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            groupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,\r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            validationErrorInSection,\r\n            decKey, changeDecKey,\r\n            sectionTypes,\r\n            group,\r\n            active, changeActive,\r\n            name,\r\n        } = this.props;\r\n\r\n        const newGroupName = groupToCreate[MAIN_LANG_KEY];\r\n        const isEditMode = !!newGroupName;\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n                <LabelWithAsterisk>Key</LabelWithAsterisk>\r\n                <TextField \r\n                    value={decKey}\r\n                    onChange={changeDecKey}\r\n                    error={validationErrorInSection && !decKey}\r\n                    inputRef={this.decKeyInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Section types</span>\r\n                <div className=\"checkBoxesSet\">\r\n                    { Array.from(sectionTypesMap).map(([ key, value ]) => (\r\n                        <div className=\"labeledCheckbox\" key={key}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label={value}\r\n                                labelPlacement=\"end\"\r\n                                checked={sectionTypes[key]}\r\n                                onChange={this.onSectionTypesChange(key)}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <span>Group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={group} \r\n                        onChange={this.onGroupChange}\r\n                        input={ <CustomInput /> }  \r\n                    >\r\n                        <option value=\"\">...</option>\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"0\">Text</option>\r\n                        <option value=\"1\">Heading</option>\r\n                        <option value=\"2\">Heading Heading Heading Heading</option>\r\n                    </NativeSelect>\r\n                    { !(isEditMode && group !== newGroupName) && (\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                    ) }\r\n                </div>\r\n\r\n                <span>Active</span>\r\n                <div className=\"unlabeledCheckbox\">\r\n                    <Checkbox\r\n                        checked={active}\r\n                        onChange={changeActive} \r\n                        color=\"primary\" \r\n                    />\r\n                </div>\r\n\r\n                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                <TextField \r\n                    value={name[MAIN_LANG_KEY]}\r\n                    onChange={this.onNameChange(MAIN_LANG_KEY)}\r\n                    error={validationErrorInSection && !name[MAIN_LANG_KEY]}\r\n                    inputRef={this.decNameEnInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                  <React.Fragment key={langKey}>\r\n                    <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                    <TextField \r\n                        value={name[langKey]}\r\n                        onChange={this.onNameChange(langKey)}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                    />\r\n                  </React.Fragment>  \r\n                )) }\r\n\r\n                <NewGroupDialog \r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onGroupChange}\r\n                    savedGroup={groupToCreate}\r\n                    groupType=\"decorators\"\r\n                    { ...{ \r\n                        isGroupDialogOpen,\r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return { \r\n        validationErrorInSection: validationError.namesSection,\r\n        formState: form,\r\n        decKey: form.decKey,\r\n        group: form.group,\r\n        active: form.active,\r\n        name: form.name,\r\n        groupToCreate: form.groupToCreate,\r\n        sectionTypes: form.sectionTypes,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeDecKey: setValue(dispatch)(\"decKey\"),\r\n        changeGroup: setValue(dispatch)(\"group\"),\r\n        changeGroupToCreate: setValue(dispatch)(\"groupToCreate\"),\r\n        changeActive: toggleValue(dispatch)(\"active\"),\r\n        changeName: setValue(dispatch)(\"name\"),\r\n        changeSectionTypes: setValue(dispatch)(\"sectionTypes\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(NamesSection)));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","import SectionTitle from \"./SectionTitle\";\r\nexport default SectionTitle;","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst SectionTitle = ({text, children}) => (\r\n    <>\r\n        <div className=\"sectionTitle\">\r\n            <span>{text || children}</span>\r\n        </div>\r\n        <div className=\"spaceHolder\"/>\r\n    </>\r\n);\r\n\r\nexport default SectionTitle;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst BackSpaceActionInput = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"175px\",\r\n      width: \"175px\",\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default BackSpaceActionInput;","import PositioningSection from \"./PositioningSection\";\r\nexport default PositioningSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport SectionTitle from \"../../common/SectionTitle\";\r\nimport { backSpaceActionsMap, decoratorsList, GLOBAL_FALLBACK_MARK } from \"../../constants\";\r\nimport BackSpaceActionInput from \"./BackSpaceActionInput\";\r\nimport { setValue, toggleValue } from \"../../actions\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst PositioningSection = props => {\r\n    const {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        fixedIndentation, changeisFixedIndentation,\r\n        softReturn, changeSoftReturn,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    } = props;\r\n\r\n    const onBackspaceActionChange = e => {\r\n        if (e.target.value === \"apply_other_pd\") {\r\n            changeBackspaceActionWithContentStyle(null, GLOBAL_FALLBACK_MARK);\r\n        } else if (backspaceActionWithContentStyle) {\r\n            changeBackspaceActionWithContentStyle(null, \"\");\r\n        }\r\n        changeBackspaceActionWithContent(e);\r\n    };\r\n\r\n    const backSpaceActionStyleSettingsState = backspaceActionWithContent === \"apply_other_pd\" ? \"shown\" : \"hidden\";\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Identational level</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={indentationalLevel}\r\n                    onChange={changeIndentationalLevel}\r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>Fixed indentation</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={fixedIndentation}\r\n                    onChange={changeisFixedIndentation}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n\r\n            <span>Soft return</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={softReturn}\r\n                    onChange={changeSoftReturn}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n            \r\n            <SectionTitle text=\"BACKSPACE\" />\r\n\r\n            <span>At the beginning of a section with content</span>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <NativeSelect \r\n                        value={backspaceActionWithContent}\r\n                        onChange={onBackspaceActionChange}\r\n                        input={ <BackSpaceActionInput /> }\r\n                    >\r\n                        {Array.from(backSpaceActionsMap).map(([key, value]) => (\r\n                            <option value={key} key={key}>{value}</option>\r\n                        ))}\r\n                    </NativeSelect>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${backSpaceActionStyleSettingsState} wideSelectBox`}>\r\n                    <NativeSelect\r\n                        value={backspaceActionWithContentStyle}\r\n                        onChange={changeBackspaceActionWithContentStyle}\r\n                        input={ <CustomInput /> }\r\n                    >\r\n                        <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n\r\n            <SectionTitle text=\"RETURN\" />\r\n\r\n\r\n            <span>Style of next section</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={returnActionNextSection}\r\n                    onChange={changeReturnActionNextSection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n\r\n            <span>In empty section change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect \r\n                    value={returnActionEmptySection}\r\n                    onChange={changeReturnActionEmptySection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <SectionTitle text=\"TAB / SHIFT+TAB\" />\r\n\r\n            <span>TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={tabAction}\r\n                    onChange={changeTabAction}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>SHIFT+TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={shiftTabAction}\r\n                    onChange={changeShiftTabAction} \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        indentationalLevel: form.indentationalLevel,\r\n        backspaceActionWithContent: form.backspaceActionWithContent,\r\n        backspaceActionWithContentStyle: form.backspaceActionWithContentStyle,\r\n        returnActionNextSection: form.returnActionNextSection,\r\n        returnActionEmptySection: form.returnActionEmptySection,\r\n        tabAction: form.tabAction,\r\n        shiftTabAction: form.shiftTabAction,\r\n        fixedIndentation: form.fixedIndentation,\r\n        softReturn: form.softReturn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeIndentationalLevel: setValue(dispatch)(\"indentationalLevel\"),\r\n        changeBackspaceActionWithContent: setValue(dispatch)(\"backspaceActionWithContent\"),\r\n        changeBackspaceActionWithContentStyle: setValue(dispatch)(\"backspaceActionWithContentStyle\"),\r\n        changeBackspaceActionWithoutContent: setValue(dispatch)(\"backspaceActionWithoutContent\"),\r\n        changeBackspaceActionWithoutContentStyle: setValue(dispatch)(\"backspaceActionWithoutContentStyle\"),\r\n        changeReturnActionNextSection: setValue(dispatch)(\"returnActionNextSection\"),\r\n        changeReturnActionEmptySection: setValue(dispatch)(\"returnActionEmptySection\"),\r\n        changeTabAction: setValue(dispatch)(\"tabAction\"),\r\n        changeShiftTabAction: setValue(dispatch)(\"shiftTabAction\"),\r\n        changeisFixedIndentation: toggleValue(dispatch)(\"fixedIndentation\"),\r\n        changeSoftReturn: toggleValue(dispatch)(\"softReturn\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(PositioningSection));","import { getOffset, getCorrectColor, getPreviewFont } from \"../../helpers\";\r\nimport { alignmentList, DEFAULT_FONT_SIZE, DEFAULT_LINE_SPACING } from \"../../constants\";\r\n\r\nexport const generatePreviewStyle = formState => {\r\n    const {\r\n        font,\r\n        customFont,\r\n        alignment,\r\n        fontSize,\r\n        fontColor,\r\n        bold,\r\n        italic,\r\n        underlined,\r\n        stroke,\r\n        textTransform,\r\n        verticalAlign,\r\n        marginTop,\r\n        marginBottom,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        customLineSpacing,\r\n        wordSpacing,\r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderType,\r\n        borderColor,\r\n        borderThickness,\r\n        fillingColor,\r\n        fillingConnectToPrevious,\r\n        connectToPrevious,\r\n    } = formState;\r\n    \r\n    const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n    const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n    const previewAdditionalFillingColor = fillingConnectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n    const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n    const previewMarginLeft = `${!otherRowsIndent ? 0 : (otherRowsIndent >= 6 ? 6 : otherRowsIndent)}cm`;\r\n    const previewTextIndent = `${!indentsDifference ? 0 : (indentsDifference >= 6 ? 6 : indentsDifference)}cm`;\r\n    const previewLineSpacing = lineSpacing !== \"custom\" ? lineSpacing : (customLineSpacing || DEFAULT_LINE_SPACING);\r\n    const offset = getOffset(verticalAlign, fontSize);\r\n    const previewMarginTop = `${(!connectToPrevious ? parseFloat(marginTop) : 0) + offset}pt`;\r\n    const previewMarginBottom = `${(!connectToPrevious ? parseFloat(marginBottom) : 0) - offset}pt`;\r\n    const previewBorderLeft = borderLeft ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderRight = borderRight ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderTop = borderTop ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderBottom = borderBottom ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const correctFontSize = fontSize <= 120 ? fontSize : 120;\r\n    const previewStyle = {\r\n        fontSize: !fontSize ? `${DEFAULT_FONT_SIZE}pt` : `${correctFontSize}pt`,\r\n        color: `#${previewFontColor}`,\r\n        fontFamily: getPreviewFont(font, customFont),\r\n        alignItems: alignmentList[alignment],\r\n        textAlign: alignment,\r\n        fontWeight: bold ? \"bold\" : \"normal\",\r\n        fontStyle: italic ? \"italic\" : \"normal\",\r\n        textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n        verticalAlign,\r\n        textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n        fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n        backgroundColor: `#${previewFillingColor}`,\r\n        backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        borderImage: `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        marginLeft: previewMarginLeft,\r\n        textIndent: previewTextIndent,\r\n        wordSpacing: `${wordSpacing || 0}pt`,\r\n        lineHeight: previewLineSpacing,\r\n        marginTop: previewMarginTop,\r\n        marginBottom: previewMarginBottom,\r\n        borderLeft: previewBorderLeft,\r\n        borderRight: previewBorderRight,\r\n        borderTop: previewBorderTop,\r\n        borderBottom: previewBorderBottom,\r\n        outline: \"none\",\r\n        ...borderLeft && { paddingLeft: `${correctFontSize / 3}pt`},\r\n        ...borderRight && { paddingRight: `${correctFontSize / 3}pt`},\r\n        ...borderTop && { paddingTop: `${correctFontSize / 3}pt`},\r\n        ...borderBottom && { paddingBottom: `${correctFontSize / 3}pt`},\r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport const generateSideNumberStyle = formState => {\r\n    const { \r\n        listType,\r\n        suffixDistance,\r\n        sideNumber,\r\n        sideNumberFont,\r\n        customSideNumberFont,\r\n        sideNumberAlignment,\r\n        sideNumberFontSize,\r\n        sideNumberFontColor,\r\n        sideNumberFillingColor,\r\n        sideNumberWidth,\r\n        sideNumberRadius,\r\n        sideNumberBold,\r\n        sideNumberItalic,\r\n        sideNumberUnderlined,\r\n        sideNumberLineHeight,\r\n    } = formState;\r\n\r\n    const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"000\");\r\n    const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n    const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n        fontFamily: getPreviewFont(sideNumberFont, customSideNumberFont),\r\n        textAlign: sideNumberAlignment,\r\n        fontSize: !sideNumberFontSize ? `${DEFAULT_FONT_SIZE}pt` : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n        color: `#${previewSideNumberFontColor}`,\r\n        backgroundColor: `#${previewSideNumberFillingColor}`,\r\n        minWidth: `${!sideNumberWidth ? 0 : (sideNumberWidth < 150 ? sideNumberWidth : 150)}pt`,\r\n        borderRadius: `${sideNumberRadius || 0}pt`,\r\n        fontWeight: sideNumberBold ? \"bold\" : \"normal\",\r\n        fontStyle: sideNumberItalic ? \"italic\" : \"normal\",\r\n        textDecoration: sideNumberUnderlined ? \"underline\" : \"none\",\r\n        ...sideNumberLineHeight && { lineHeight: `${sideNumberLineHeight}pt`},\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n    };\r\n\r\n    return sideNumberStyle;\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { generatePreviewStyle, generateSideNumberStyle } from \"./generators\";\r\nimport { getListChars } from \"../../helpers\";\r\nimport { bulletNamesMap } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = props => {\r\n    const { \r\n        formState,\r\n        prefix, \r\n        suffix, \r\n        suffixDistance,\r\n        listType,\r\n        listItem, \r\n        unicodeChar,\r\n        listItemString,\r\n        numberingStyle,\r\n        sideNumber,\r\n        patternMode,\r\n    } = props;\r\n\r\n    const isOrderedList = listType === \"ordered\";\r\n\r\n    let currentBullet;\r\n\r\n    if (listItem === \"custom\") {\r\n        currentBullet = unicodeChar;\r\n    } else if (listItem === \"string\") {\r\n        currentBullet = listItemString;\r\n    } else {\r\n        currentBullet = bulletNamesMap.get(listItem);\r\n    }\r\n\r\n    const listChars = getListChars(isOrderedList, numberingStyle, currentBullet);\r\n\r\n    let listItemBeginnings = (listType === \"ordered\" && patternMode) ? listChars : listChars.map(li => (`${prefix}${li}${suffix}`));\r\n\r\n    const previewStyle = generatePreviewStyle(formState);\r\n    const isSideNumber = isOrderedList && sideNumber;\r\n    const sideNumberStyle = isSideNumber ? generateSideNumberStyle(formState) : {};\r\n    const listItemBeginningStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className=\"demonstrationElement\">\r\n                    <div\r\n                        className=\"demonstrationElement-text\"\r\n                        style={previewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                        { isSideNumber && (\r\n                            <>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[3]}`}</span><span>One more list item</span>\r\n                                </div>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[4]}`}</span><span>And one more</span>\r\n                                </div>\r\n                            </>\r\n                        ) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n        prefix: form.prefix, \r\n        suffix: form.suffix,\r\n        patternMode: form.patternMode,\r\n        suffixDistance: form.suffixDistance,\r\n        listType: form.listType,\r\n        listItem: form.listItem, \r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        sideNumber: form.sideNumber,\r\n        listItemString: form.listItemString,\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps)(ListPreview));","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.PureComponent {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, defaultColorCode, required, bottomAligned } = this.props;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n        const colorPickerClassName = `colorPicker${ bottomAligned ? \" colorPicker_bottomAligned\" : \"\"}`;\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        if (defaultColorCode) {\r\n                            selectAllOnClick(defaultColorCode)(e);\r\n                        }\r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={this.showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className={colorPickerClassName}>\r\n                        <div className=\"colorPicker-chromeBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={this.colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={this.hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport CustomInput from \"./CustomInput\";\r\nimport { focusInput, changeAndScroll } from \"../helpers\";\r\nimport fontsSet from \"../constants/fontsSet\";\r\n\r\nclass FontSelectFields extends React.PureComponent {\r\n    customFontInputRef = React.createRef();\r\n\r\n    onFontChange = e => {\r\n        this.props.changeFont(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customFontInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { font, customFont, changeCustomFont } = this.props;\r\n        const optionalFieldState = font === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        return (\r\n            <>\r\n                <span >Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeAndScroll(this.onFontChange, 500)}\r\n                >\r\n                    { fontsSet.map(fontName => <option value={fontName} key={fontName}>{fontName}</option>) }\r\n                    <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                </NativeSelect>\r\n    \r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <span></span>\r\n                </div>\r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <TextField \r\n                        value={customFont}\r\n                        onChange={changeCustomFont}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        placeholder=\"Enter the font name\"\r\n                        inputRef={this.customFontInputRef}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FontSelectFields;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport ListPreview from \"../../common/Preview/ListPreview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport LabelWithAsterisk from \"../../common/LabelWithAsterisk\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport { \r\n    orderedListStylesMap, \r\n    bulletNamesMap, \r\n    DEFAULT_FONT_SIZE,\r\n    DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    DEFAULT_SIDE_NUMBER_WIDTH,\r\n    DEFAULT_SIDE_NUMBER_RADIUS,\r\n } from \"../../constants\";\r\nimport { \r\n    updateValidationError,\r\n    setValue,\r\n    toggleValue,\r\n    setNumber,\r\n    setColor,\r\n    setBullet,\r\n} from \"../../actions\";\r\nimport { \r\n    selectAllOnClick, \r\n    changeAndScroll,\r\n    scrollToBottom,\r\n    focusInput,\r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n} from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ListSection extends React.Component {\r\n    listNameInputRef = React.createRef();\r\n    unicodeCharInputRef = React.createRef();\r\n\r\n    onIsListChange = e => {\r\n        const { listName } = this.props;\r\n        this.props.changeIsList(e);\r\n\r\n        if (e.target.checked && !listName) {\r\n            focusInput(this.listNameInputRef);\r\n        }       \r\n    };\r\n\r\n    onListTypeChange = e => {\r\n        const { suffix, listName, orderLevel } = this.props;\r\n        const { value } = e.target;\r\n\r\n        if (value === \"ordered\" && !orderLevel) {\r\n            this.props.changeOrderLevel(null, \"0\")\r\n        }\r\n\r\n        this.props.changeListType(null, value);\r\n\r\n        if (value === \"ordered\" && !listName) {\r\n            focusInput(this.listNameInputRef);\r\n        } else {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }\r\n        if (value === \"ordered\" && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        } else if (value === \"unordered\" && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        }\r\n    };\r\n\r\n    onListItemChange = e => {\r\n        this.props.changeListItem(e);\r\n        if (e.target.value === \"custom\" && !this.props.unicodeChar) {\r\n            focusInput(this.unicodeCharInputRef);\r\n        }\r\n    };\r\n\r\n    onUnicodeNumberChange = e => {\r\n        const newUnicodeNumber = this.props.changeUnicodeNumber(e);\r\n        const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n        this.props.changeUnicodeChar(null, newUnicodeChar);\r\n    };\r\n    \r\n    onUnicodeCharChange = e => {\r\n        const newUnicodeChar = this.props.changeUnicodeChar(e);\r\n        const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n        this.props.changeUnicodeNumber(null, newUnicodeNumber);\r\n    };\r\n\r\n    onSideNumberChange = e => {\r\n        const { suffix } = this.props;\r\n        this.props.changeSideNumber(e);\r\n        if (e.target.checked && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        } else if (!e.target.checked && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        const { isList, listType, listName } = this.props;\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n        if (this.props.validationErrorInSection && (!isList || listType === \"unordered\" || listName)) {\r\n            this.props.updateValidationError({ listSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            validationErrorInSection,\r\n            listPreviewProps,\r\n            isList,\r\n            listName, changeListName,\r\n            orderLevel, changeOrderLevel,\r\n            patternMode, changePatternMode,\r\n            listPattern, changeListPattern,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listType,\r\n            listItem,\r\n            unicodeNumber,\r\n            unicodeChar,\r\n            listItemString, changeListItemString,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changeIncludePreviousFrom,\r\n            sideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            customSideNumberFont, changeCustomSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberWidth, changeSideNumberWidth,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n            sideNumberBold, changeSideNumberBold,\r\n            sideNumberItalic, changeSideNumberItalic,\r\n            sideNumberUnderlined, changeSideNumberUnderlined,\r\n            sideNumberLineHeight, changeSideNumberLineHeight,\r\n        } = this.props;\r\n        \r\n        const mainListSettingsState = isList ? \"shown\" : \"hidden\";\r\n        const unorderedListSettingsState = (isList && listType === \"unordered\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState = (isList && listType === \"unordered\" && listItem === \"custom\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState2 = (isList && listType === \"unordered\" && listItem === \"string\") ? \"shown\" : \"hidden\";\r\n        const orderedListSettingsState = (isList && listType === \"ordered\") ? \"shown\" : \"hidden\";\r\n        const sideNumberSettingsState = (isList && listType === \"ordered\" && sideNumber) ? \"shown\" : \"hidden\";\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"dialogGrid dialogGrid_2cols\">\r\n                    <div>\r\n                        <div>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                                <div className=\"listItemSpan\">\r\n                                    <span>Is it a list?</span>\r\n                                </div>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={isList} \r\n                                        onChange={this.onIsListChange} \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${mainListSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth optionalSettings\">\r\n                                    { listType === \"unordered\" ? (\r\n                                        <span>List name</span>\r\n                                    ) : (\r\n                                        <LabelWithAsterisk>List name</LabelWithAsterisk>\r\n                                    )}\r\n                                    <TextField\r\n                                        value={listName}\r\n                                        onChange={changeListName} \r\n                                        error={validationErrorInSection && !listName}\r\n                                        inputRef={this.listNameInputRef}\r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Order level</span>\r\n                                    <div>\r\n                                        <NativeSelect\r\n                                            value={orderLevel}\r\n                                            onChange={changeOrderLevel}\r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            { listType !== \"ordered\" && (<option value=\"\">...</option>)}\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                    </div>\r\n\r\n                                    <span>Suffix distance</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <NativeSelect\r\n                                            value={suffixDistance}\r\n                                            onChange={changeSuffixDistance} \r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"0.25\">0.25</option>\r\n                                            <option value=\"0.5\">0.5</option>\r\n                                            <option value=\"0.75\">0.75</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"1.25\">1.25</option>\r\n                                            <option value=\"1.5\">1.5</option>\r\n                                            <option value=\"1.75\">1.75</option>\r\n                                            <option value=\"2\">2</option>\r\n                                        </NativeSelect>\r\n                                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                                    </div>\r\n    \r\n                                    <span>Magic Tabs</span>\r\n                                    <div className=\"unlabeledCheckbox\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={magicTabs} \r\n                                            onChange={changeMagicTabs} \r\n                                        />\r\n                                    </div>\r\n    \r\n                                    <span>Type of list</span>\r\n                                    <RadioGroup \r\n                                        value={listType} \r\n                                        onChange={this.onListTypeChange}\r\n                                        row\r\n                                    >\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"unordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Unordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"ordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Ordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                    </RadioGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${orderedListSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {Array.from(orderedListStylesMap).map(([key, value]) => (\r\n                                            <option value={key} key={key}>{value}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changeIncludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                \r\n                                <span>Advanced list pattern settings</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Switch\r\n                                        checked={patternMode}\r\n                                        onChange={changePatternMode}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                { !patternMode ? (\r\n                                    <>\r\n                                        <span>Prefix</span>\r\n                                        <TextField\r\n                                            value={prefix}\r\n                                            onChange={changePrefix} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                        />\r\n        \r\n                                        <span>Suffix</span>\r\n                                        <TextField\r\n                                            value={suffix}\r\n                                            onChange={changeSuffix} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            onClick={selectAllOnClick(\".\")}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <span>Ordered list pattern</span>\r\n                                        <TextField\r\n                                            value={listPattern}\r\n                                            onChange={changeListPattern} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            onClick={selectAllOnClick(\".\")}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                                \r\n                                        \r\n                                <span>Side number</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={changeAndScroll(this.onSideNumberChange)}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                { (patternMode && !sideNumber) && (<div />)}\r\n                            </div> \r\n    \r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${sideNumberSettingsState}`}>\r\n                                <div className=\"flexibleGrid listTypeSettings\">\r\n                                    <FontSelectFields \r\n                                        font={sideNumberFont}\r\n                                        changeFont={changeSideNumberFont}\r\n                                        customFont={customSideNumberFont}\r\n                                        changeCustomFont={changeCustomSideNumberFont}\r\n                                    />\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFontColor} \r\n                                        changeColorCode={changeSideNumberFontColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FONT_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFillingColor} \r\n                                        changeColorCode={changeSideNumberFillingColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FILLING_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n    \r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_WIDTH)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span>Line height</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberLineHeight}\r\n                                            onChange={changeSideNumberLineHeight}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>  \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_RADIUS)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span className=\"stylingsSpan\">Stylings</span>\r\n                                    <div className=\"checkBoxesSet\">\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberBold}\r\n                                                onChange={changeSideNumberBold}\r\n                                                label=\"Bold\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberItalic}\r\n                                                onChange={changeSideNumberItalic}\r\n                                                label=\"Italic\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                label=\"Underlined\"\r\n                                                labelPlacement=\"end\"\r\n                                                checked={sideNumberUnderlined}\r\n                                                onChange={changeSideNumberUnderlined}\r\n                                            />\r\n                                        </div>\r\n                                    </div>  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className={`listPreviewBox optionalSettings optionalSettings_${mainListSettingsState}`}>\r\n                        <ListPreview {...listPreviewProps} />\r\n                    </div>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${unorderedListSettingsState}`}>\r\n                    <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listItemSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={this.onListItemChange} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Array.from(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"custom\"} className=\"highlightedOption\">Custom bullet</option>\r\n                                    <option value={\"string\"} className=\"highlightedOption\">Custom string</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={`optionalSettings optionalSettings_${customListItemSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Unicode number</span>\r\n                                        <div>\r\n                                            <TextField  \r\n                                                value={unicodeNumber}\r\n                                                onChange={this.onUnicodeNumberChange}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"unicodeInput\" \r\n                                                InputProps={{\r\n                                                    startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Char</span>\r\n                                        <div>\r\n                                            <TextField \r\n                                                value={unicodeChar}\r\n                                                onChange={this.onUnicodeCharChange}\r\n                                                onClick={selectAllOnClick()}\r\n                                                inputRef={this.unicodeCharInputRef}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"bulletInput\" \r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div> \r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_${customListItemSettingsState2}`}>\r\n                                <div className=\"listItemCustomString\">\r\n                                    <div className=\"dialogGrid dialogGrid_1col dialogGrid_leftIndented\">\r\n                                        <TextField\r\n                                            value={listItemString}\r\n                                            onChange={changeListItemString}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return {\r\n        validationErrorInSection: validationError.listSection,\r\n        formState: form,\r\n        isList: form.isList,\r\n        listName: form.listName, \r\n        orderLevel: form.orderLevel,\r\n        suffixDistance: form.suffixDistance,\r\n        magicTabs: form.magicTabs,\r\n        listType: form.listType,\r\n        listItem: form.listItem,\r\n        unicodeNumber: form.unicodeNumber,\r\n        unicodeChar: form.unicodeChar,\r\n        listItemString: form.listItemString,\r\n        numberingStyle: form.numberingStyle,\r\n        continueNumbering: form.continueNumbering,\r\n        allowRestartNumbering: form.allowRestartNumbering,\r\n        includePreviousFrom: form.includePreviousFrom,\r\n        patternMode: form.patternMode,\r\n        listPattern: form.listPattern,\r\n        prefix: form.prefix,\r\n        suffix: form.suffix,\r\n        sideNumber: form.sideNumber,\r\n        sideNumberFont: form.sideNumberFont,\r\n        customSideNumberFont: form.customSideNumberFont,\r\n        sideNumberAlignment: form.sideNumberAlignment,\r\n        sideNumberFontSize: form.sideNumberFontSize,\r\n        sideNumberFontColor: form.sideNumberFontColor,\r\n        sideNumberFillingColor: form.sideNumberFillingColor,\r\n        sideNumberWidth: form.sideNumberWidth,\r\n        sideNumberRadius: form.sideNumberRadius,\r\n        sideNumberBold: form.sideNumberBold,\r\n        sideNumberItalic: form.sideNumberItalic,\r\n        sideNumberUnderlined: form.sideNumberUnderlined,\r\n        sideNumberLineHeight: form.sideNumberLineHeight,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeListName: setValue(dispatch)(\"listName\"),\r\n        changeIsList: toggleValue(dispatch)(\"isList\"),\r\n        changeOrderLevel: setValue(dispatch)(\"orderLevel\"),\r\n        changeSuffixDistance: setValue(dispatch)(\"suffixDistance\"),\r\n        changeMagicTabs: toggleValue(dispatch)(\"magicTabs\"),\r\n        changeListType: setValue(dispatch)(\"listType\"),\r\n        changeListItem: setValue(dispatch)(\"listItem\"),\r\n        changeUnicodeNumber: setColor(dispatch)(\"unicodeNumber\"),\r\n        changeUnicodeChar: setBullet(dispatch)(\"unicodeChar\"),\r\n        changeListItemString: setValue(dispatch)(\"listItemString\"),\r\n        changeNumberingStyle: setValue(dispatch)(\"numberingStyle\"),\r\n        changeContinueNumbering: toggleValue(dispatch)(\"continueNumbering\"),\r\n        changeAllowRestartNumbering: toggleValue(dispatch)(\"allowRestartNumbering\"),\r\n        changeIncludePreviousFrom: setValue(dispatch)(\"includePreviousFrom\"),\r\n        changeListPattern: setValue(dispatch)(\"listPattern\"),\r\n        changePrefix: setValue(dispatch)(\"prefix\"),\r\n        changeSuffix: setValue(dispatch)(\"suffix\"),\r\n        changePatternMode: toggleValue(dispatch)(\"patternMode\"),\r\n        changeSideNumber: toggleValue(dispatch)(\"sideNumber\"),\r\n        changeSideNumberFont: setValue(dispatch)(\"sideNumberFont\"),\r\n        changeCustomSideNumberFont: setValue(dispatch)(\"customSideNumberFont\"),\r\n        changeSideNumberAlignment: setValue(dispatch)(\"sideNumberAlignment\"),\r\n        changeSideNumberFontSize: setNumber(dispatch)(\"sideNumberFontSize\"),\r\n        changeSideNumberFontColor: setColor(dispatch)(\"sideNumberFontColor\"),\r\n        changeSideNumberFillingColor: setColor(dispatch)(\"sideNumberFillingColor\"),\r\n        changeSideNumberWidth: setNumber(dispatch)(\"sideNumberWidth\"),\r\n        changeSideNumberRadius: setNumber(dispatch)(\"sideNumberRadius\"),\r\n        changeSideNumberBold: toggleValue(dispatch)(\"sideNumberBold\"),\r\n        changeSideNumberItalic: toggleValue(dispatch)(\"sideNumberItalic\"),\r\n        changeSideNumberUnderlined: toggleValue(dispatch)(\"sideNumberUnderlined\"),\r\n        changeSideNumberLineHeight: setNumber(dispatch)(\"sideNumberLineHeight\"),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListSection);","import ListSection from \"./ListSection\";\r\nexport default ListSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { setValue } from \"../actions\";\r\nimport { MAIN_LANG_KEY } from \"../constants\";\r\n\r\nclass ReferencingSection extends React.Component {\r\n    onXrefChange = (e, xrefName, xref) => {\r\n        if (xref) {\r\n            this.props.changeReferenceGroupToCreate(null, xref);\r\n        }\r\n        this.props.changeReferenceGroup(e, xrefName);\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            referenceGroupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,  \r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            referenceGroup,\r\n        } = this.props;\r\n        \r\n        const newGroupName = referenceGroupToCreate[MAIN_LANG_KEY] || referenceGroupToCreate.groupKey;\r\n        const isEditMode = !!newGroupName;\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Reference group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInput /> } \r\n                        value={referenceGroup} \r\n                        onChange={this.onXrefChange} \r\n                    >\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"\">none</option>\r\n                        <option value=\"0\">Reference group 1</option>\r\n                        <option value=\"1\">Reference group 2</option>\r\n                    </NativeSelect>\r\n                    {\r\n                        !(isEditMode && referenceGroup !== newGroupName) &&\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                     }\r\n                </div>\r\n                <NewGroupDialog\r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onXrefChange}\r\n                    savedGroup={referenceGroupToCreate}\r\n                    groupType=\"xref\" \r\n                    { ...{ \r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        referenceGroup: form.referenceGroup,\r\n        referenceGroupToCreate: form.referenceGroupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeReferenceGroup: setValue(dispatch)(\"referenceGroup\"),\r\n        changeReferenceGroupToCreate: setValue(dispatch)(\"referenceGroupToCreate\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(ReferencingSection)));","import * as React from \"react\";\r\nimport deepEqual from \"fast-deep-equal\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \");\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === \"function\" ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== \"function\" ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || \"table\", Object.assign({}, props, { ref: typeof innerRef === \"function\" ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContentEditable from \"../ContentEditable\";\r\nimport { generatePreviewStyle } from \"./generators\";\r\nimport { setValue } from \"../../actions\";\r\nimport { selectAllEditableContent, getUnstyledText } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nclass Preview extends React.Component {\r\n    onPreviewTextChange = e => {\r\n        const { value } = e.target;\r\n        if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n            this.props.changePreviewText(null, getUnstyledText(value));\r\n        } else {\r\n            this.props.changePreviewText(null, `<div><br></div>`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const previewStyle = generatePreviewStyle(this.props.formState);\r\n        const { previewText } = this.props;\r\n    \r\n        return (\r\n            <div className=\"preview\">\r\n                <span className=\"preview-title\">Preview</span>\r\n                <div \r\n                    className=\"preview-content preview-content_withPointer\" \r\n                    onClick={selectAllEditableContent(\"demonstrationElement\")}\r\n                >\r\n                    <div className=\"demonstrationElement\">\r\n                        <ContentEditable\r\n                            className=\"demonstrationElement-text\"\r\n                            onChange={this.onPreviewTextChange} \r\n                            html={previewText}\r\n                            style={previewStyle}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changePreviewText: setValue(dispatch)(\"previewText\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(Preview));","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport Preview from \"../../common/Preview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport {  setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { DEFAULT_FONT_SIZE, DEFAULT_FONT_COLOR } from \"../../constants\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = props => {\r\n    const { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign,\r\n        readOnly, changeReadOnly,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"flexibleGrid\">\r\n                <FontSelectFields { ...{ font, changeFont, customFont, changeCustomFont }} />\r\n                \r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    defaultColorCode={DEFAULT_FONT_COLOR}\r\n                    required\r\n                />\r\n\r\n                <span>Sub/Superscript</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={verticalAlign} \r\n                        onChange={changeVerticalAlign}\r\n                        input={ <CustomInput /> } \r\n                    >\r\n                        <option value=\"baseline\">None</option>\r\n                        <option value=\"sub\">Subscript</option>\r\n                        <option value=\"super\">Superscript</option>\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_topIndented\">\r\n            <span className=\"stylingsSpan\">Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Read only</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={readOnly}\r\n                    onChange={changeReadOnly}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        font: form.font,\r\n        customFont: form.customFont,\r\n        alignment: form.alignment,\r\n        fontSize: form.fontSize,\r\n        fontColor: form.fontColor,\r\n        bold: form.bold,\r\n        italic: form.italic,\r\n        underlined: form.underlined,\r\n        stroke: form.stroke,\r\n        textTransform: form.textTransform,\r\n        verticalAlign: form.verticalAlign,\r\n        readOnly: form.readOnly,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeFont: setValue(dispatch)(\"font\"),\r\n        changeCustomFont: setValue(dispatch)(\"customFont\"),\r\n        changeAlignment: setValue(dispatch)(\"alignment\"),\r\n        changeFontSize: setNumber(dispatch)(\"fontSize\"),\r\n        changeFontColor: setColor(dispatch)(\"fontColor\"),\r\n        changeBold: toggleValue(dispatch)(\"bold\"),\r\n        changeItalic: toggleValue(dispatch)(\"italic\"),\r\n        changeUnderlined: toggleValue(dispatch)(\"underlined\"),\r\n        changeStroke: toggleValue(dispatch)(\"stroke\"),\r\n        changeTextTransform: setValue(dispatch)(\"textTransform\"),\r\n        changeVerticalAlign: setValue(dispatch)(\"verticalAlign\"),\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeReadOnly: toggleValue(dispatch)(\"readOnly\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TypographySection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { toggleValue } from \"../actions\";\r\n\r\nconst ConnectToPreviousField = ({ connectToPrevious, changeConnectToPrevious }) => (\r\n    <>\r\n        <span>Merge sections</span>\r\n        <div className=\"unlabeledCheckbox\">\r\n            <Checkbox \r\n                checked={connectToPrevious}\r\n                onChange={changeConnectToPrevious}\r\n                color=\"primary\" \r\n            />\r\n        </div>\r\n    </>\r\n);\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeConnectToPrevious: toggleValue(dispatch)(\"connectToPrevious\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ConnectToPreviousField));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport Preview from \"../common/Preview\";\r\nimport { setValue, setNumber } from \"../actions\";\r\nimport { DEFAULT_MARGIN, DEFAULT_WORD_SPACING, lineSpacings } from \"../constants\";\r\nimport { selectAllOnClick, focusInput, changeAndScroll } from \"../helpers\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\n\r\nclass DistancesSection extends React.Component {\r\n    customLineSpacingInputRef = React.createRef();\r\n\r\n    onLineSpacingChange = e => {\r\n        this.props.changeLineSpacing(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customLineSpacingInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            previewProps,\r\n            connectToPrevious,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            firstRowIndent, changeFirstRowIndent,\r\n            otherRowsIndent, changeOtherRowsIndent,\r\n            lineSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n            wordSpacing, changeWordSpacing,\r\n        } = this.props;\r\n\r\n        const customLineSpacingFieldState = lineSpacing === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        const marginFieldsState = !connectToPrevious ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div className=\"flexibleGrid\">\r\n                    <ConnectToPreviousField />\r\n                    <div className={`optionalField optionalField ${marginFieldsState}`}>\r\n                      <span>Margin top</span>\r\n                    </div>\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginTop}\r\n                            onChange={changeMarginTop}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <div className={`optionalField ${marginFieldsState}`}>\r\n                        <span>Margin bottom</span>\r\n                    </div>\r\n\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginBottom}\r\n                            onChange={changeMarginBottom}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <span>1st row indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={firstRowIndent}\r\n                            onChange={changeFirstRowIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Other rows indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={otherRowsIndent}\r\n                            onChange={changeOtherRowsIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Line spacing</span>\r\n                    <div>\r\n                        <NativeSelect \r\n                            input={ <CustomInputShort /> } \r\n                            value={lineSpacing} \r\n                            onChange={changeAndScroll(this.onLineSpacingChange, 500)} \r\n                        >   \r\n                            { lineSpacings.map(value => (\r\n                                <option value={value} key={value}>{value}</option>\r\n                            ))}\r\n                            <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                        </NativeSelect> \r\n                    </div>\r\n\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                    </div>\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                            placeholder=\"Your value\"\r\n                            inputRef={this.customLineSpacingInputRef}\r\n                        />                                            \r\n                    </div>\r\n                        \r\n                    <span>Word spacing</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={wordSpacing}\r\n                            onChange={changeWordSpacing}\r\n                            onClick={selectAllOnClick(DEFAULT_WORD_SPACING)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n        marginTop: form.marginTop,\r\n        marginBottom: form.marginBottom,\r\n        firstRowIndent: form.firstRowIndent,\r\n        otherRowsIndent: form.otherRowsIndent,\r\n        lineSpacing: form.lineSpacing,\r\n        customLineSpacing: form.customLineSpacing,\r\n        wordSpacing: form.wordSpacing,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeMarginBottom: setNumber(dispatch)(\"marginBottom\"),\r\n        changeFirstRowIndent: setNumber(dispatch)(\"firstRowIndent\"),\r\n        changeOtherRowsIndent: setNumber(dispatch)(\"otherRowsIndent\"),\r\n        changeLineSpacing: setValue(dispatch)(\"lineSpacing\"),\r\n        changeCustomLineSpacing: setValue(dispatch)(\"customLineSpacing\"),\r\n        changeWordSpacing: setNumber(dispatch)(\"wordSpacing\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(DistancesSection));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default FrameTypeInput;","import { getCorrectColor } from \"../../helpers\";\r\n\r\nconst generateBorderPreviewStyle = formState => {\r\n    const { \r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderColor,\r\n        borderThickness,\r\n        borderType,\r\n    } = formState;\r\n\r\n    const correctColor = getCorrectColor(borderColor);\r\n    const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n    const previewStyle = {\r\n        borderLeft: borderLeft ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginLeft: borderLeft ? \"0\" : previewBorderWidth, \r\n        borderRight: borderRight ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginRight: borderRight ? \"0\" : previewBorderWidth, \r\n        borderTop: borderTop ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginTop: borderTop ? \"0\" : previewBorderWidth, \r\n        borderBottom: borderBottom ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginBottom: borderBottom ? \"0\" : previewBorderWidth, \r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport default generateBorderPreviewStyle;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport FrameTypeInput from \"../../sections/FramesSection/FrameTypeInput\";\r\nimport Preview from \"../../common/Preview\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport ConnectToPreviousField from \"../../common/ConnectToPreviousField\";\r\nimport generateBorderPreviewStyle from \"./generateBorderPreviewStyle\";\r\nimport { setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\nimport { DEFAULT_BORDER_COLOR, DEFAULT_BORDER_THICKNESS } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass FramesSection extends React.Component {\r\n    onBorderTypeChange = e => {\r\n        this.props.changeBorderType(e);\r\n        if (e.target.value === \"double\" && this.props.borderThickness === \"2\") {\r\n            this.props.changeBorderThickness(null, \"3\");\r\n        } else if (e.target.value !== \"double\" && this.props.borderThickness === \"3\") {\r\n            this.props.changeBorderThickness(null, \"2\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            previewProps,\r\n            formState,\r\n            borderLeft, changeBorderLeft, \r\n            borderRight, changeBorderRight,\r\n            borderTop, changeBorderTop, \r\n            borderBottom, changeBorderBottom, \r\n            borderColor, changeBorderColor,\r\n            borderThickness, changeBorderThickness,\r\n            borderType,\r\n         } = this.props;\r\n\r\n        const previewStyle = generateBorderPreviewStyle(formState)\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div>\r\n                    <div className=\"directionControlsContainer\">\r\n                        <div className=\"directionsControls\" style={previewStyle}>\r\n                            <span className=\"directionLabel\">Left</span>\r\n                            <div className=\"centralColumn\">\r\n                                <span className=\"directionLabel\">Top</span>\r\n                                <div className=\"checkboxesKit crossGrid\">\r\n                                    <div id=\"r1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderTop}  \r\n                                            onChange={changeBorderTop}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderLeft}  \r\n                                            onChange={changeBorderLeft}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c2\" className=\"gridCell\">\r\n                                    </div>\r\n                                    <div id=\"r2c3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderRight}  \r\n                                            onChange={changeBorderRight}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderBottom}  \r\n                                            onChange={changeBorderBottom}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"directionLabel\">Bottom</span>\r\n                            </div>\r\n                            <span className=\"directionLabel\">Right</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <span>Frame color</span>\r\n                        <ColorField \r\n                            colorCode={borderColor} \r\n                            changeColorCode={changeBorderColor}\r\n                            defaultColorCode={DEFAULT_BORDER_COLOR}\r\n                            required\r\n                        />\r\n        \r\n                        <span>Frame thickness</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                                value={borderThickness}\r\n                                onChange={changeBorderThickness}\r\n                                onClick={selectAllOnClick(DEFAULT_BORDER_THICKNESS)}\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>                        \r\n        \r\n                        <span>Type of frame</span>\r\n                        <div >\r\n                            <Select\r\n                            input={<FrameTypeInput />}\r\n                            value={borderType}\r\n                            onChange={this.onBorderTypeChange}\r\n                            >\r\n                                <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                                <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                                <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                                <MenuItem value=\"double\">══════</MenuItem>              \r\n                            </Select>\r\n                        </div>\r\n\r\n                        <ConnectToPreviousField />\r\n                    </div>\r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        borderLeft: form.borderLeft,\r\n        borderRight: form.borderRight,\r\n        borderTop: form.borderTop,\r\n        borderBottom: form.borderBottom,\r\n        borderColor: form.borderColor,\r\n        borderThickness: form.borderThickness,\r\n        borderType: form.borderType,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeBorderLeft: toggleValue(dispatch)(\"borderLeft\"),\r\n        changeBorderRight: toggleValue(dispatch)(\"borderRight\"),\r\n        changeBorderTop: toggleValue(dispatch)(\"borderTop\"),\r\n        changeBorderBottom: toggleValue(dispatch)(\"borderBottom\"),\r\n        changeBorderColor: setColor(dispatch)(\"borderColor\"),\r\n        changeBorderThickness: setNumber(dispatch)(\"borderThickness\"),\r\n        changeBorderType: setValue(dispatch)(\"borderType\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FramesSection));","import FramesSection from \"./FramesSection\";\r\nexport default FramesSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Preview from \"../common/Preview\";\r\nimport ColorField from \"../common/ColorField\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\nimport { setColor } from \"../actions\";\r\n\r\nconst  FillingSection = ({ previewProps, fillingColor, changeFillingColor }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n                <ConnectToPreviousField />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        fillingColor: form.fillingColor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeFillingColor: setColor(dispatch)(\"fillingColor\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FillingSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport { setValue } from \"../actions\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        tocIndentation: form.tocIndentation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeTocIndentation: setValue(dispatch)(\"tocIndentation\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TocSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { setShortCut } from \"../actions\";\r\n\r\nconst ShortCutSection = ({ shortCutWinView, shortCutMacView, changeShortCutWin, changeShortCutMac }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        shortCutWinView: form.shortCutWinView,\r\n        shortCutMacView: form.shortCutMacView,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeShortCutWin: setShortCut(dispatch)(\"shortCutWin\", \"shortCutWinView\"),\r\n        changeShortCutMac: setShortCut(dispatch)(\"shortCutMac\", \"shortCutMacView\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ShortCutSection));","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomErrorTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n      textDecoration: \"red underline\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n        textDecoration: \"indianred underline\",\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomErrorTab;","import Tabs from \"@material-ui/core/Tabs\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n    }\r\n};\r\n\r\nexport default withStyles(styles)(Tabs);","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        \"&:after\": {\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: \"1280px\",\r\n        maxHeight: \"850px\",\r\n        minHeight: \"550px\",\r\n        width: \"calc(100% - 96px)\",\r\n        height: \"calc(100% - 96px)\",\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        border: \"none\",\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: \"middle\",\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","export const SAVE_DEC_FORM = \"SAVE_DEC_FORM\";\r\nexport const CLEAR_SAVED_DEC_FORM = \"CLEAR_SAVED_DEC_FORM\";\r\n\r\nexport const saveDecoratorForm = payload => {\r\n    return {\r\n        type: SAVE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearSavedDecoratorForm = () => {\r\n    return {\r\n        type: CLEAR_SAVED_DEC_FORM,\r\n    };\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport NamesSection from \"./sections/NamesSection\";\r\nimport PositioningSection from \"./sections/PositioningSection\";\r\nimport ListSection from \"./sections/ListSection\";\r\nimport ReferencingSection from \"./sections/ReferencingSection\";\r\nimport TypographySection from \"./sections/TypographySection\";\r\nimport DistancesSection from \"./sections/DistancesSection\";\r\nimport FramesSection from \"./sections/FramesSection\";\r\nimport FillingSection from \"./sections/FillingSection\";\r\nimport TocSection from \"./sections/TocSection\";\r\nimport ShortCutsSection from \"./sections/ShortCutsSection\";\r\n// import TestSection from \"./sections/TestSection\";\r\n\r\nimport theme from \"./theme\";\r\nimport CustomTab from \"./common/CustomTab\";\r\nimport CustomErrorTab from \"./common/CustomErrorTab\";\r\nimport CustomTabs from \"./common/CustomTabs\";\r\nimport CustomDialog from \"./common/CustomDialog\";\r\nimport { saveDecoratorForm } from \"../../actions\";\r\nimport { \r\n    closeDialog, \r\n    clearDecoratorForm, \r\n    switchDecDialogTab, \r\n    updateValidationError \r\n} from \"./actions\";\r\nimport { \r\n    fillMissedFields, \r\n    DecDataConverter, \r\n    getTabsErrorState,\r\n    getTabNumberToSwitch,\r\n} from \"./helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass DecoratorDialog extends React.Component {\r\n    onClose = () => {\r\n        this.props.closeDialog();\r\n        this.props.clearForm();\r\n    };\r\n\r\n    onSaveButtonClick = () => {\r\n        const { formState, updateValidationError, switchTab, sendForm } = this.props;\r\n        const tabsErrorState = getTabsErrorState(formState);\r\n        if (tabsErrorState) {\r\n            updateValidationError(tabsErrorState);\r\n            switchTab(getTabNumberToSwitch(tabsErrorState));\r\n        } else {\r\n            const formToSend = DecDataConverter.convertToSend(fillMissedFields(formState));\r\n            sendForm(formToSend);\r\n            this.onClose();\r\n        }\r\n    };\r\n\r\n    onTabSwitch = (e, tabNumber) => {\r\n        this.props.switchTab(tabNumber);\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            isOpen, \r\n            openedTab,\r\n            validationError, \r\n            isEditMode,\r\n        } = this.props;\r\n    \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <CustomDialog\r\n                    open={isOpen}\r\n                    onClose={this.onClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                    scroll=\"body\"\r\n                    className=\"decoratorDialog\"\r\n                    fullWidth={true}\r\n                    maxWidth={false}\r\n                    id=\"dialog\"\r\n                >\r\n                    <div className=\"header\">\r\n                        <DialogTitle className=\"header-title\">\r\n                            <p>Create new paragraph decorator</p>\r\n                        </DialogTitle>\r\n                        <div className=\"header-buttons\">\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                onClick={this.onClose}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.onSaveButtonClick}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                {isEditMode ? \"Save\" : \"Create\"}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <DialogContent className=\"content\">\r\n                        <div className=\"content-leftSide\">\r\n                            <CustomTabs \r\n                                className=\"dialogTabs\"\r\n                                value={openedTab} \r\n                                onChange={this.onTabSwitch} \r\n                                orientation=\"vertical\"\r\n                                color=\"primary\"\r\n                                indicatorColor=\"primary\"\r\n                            >\r\n                                { validationError.namesSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"Decorator's name\" /> )\r\n                                    :  ( <CustomTab className=\"dialogTab\" label=\"Decorator's name\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n    \r\n                                { validationError.listSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"List\" /> ) \r\n                                    : ( <CustomTab className=\"dialogTab\" label=\"List\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                                {/* <CustomTab className=\"dialogTab\" label=\"Test\" /> */}\r\n                            </CustomTabs>\r\n                        </div>\r\n                        <div className=\"content-rightSide\">\r\n                            { openedTab === 0 && <NamesSection /> }\r\n                            { openedTab === 1 && <PositioningSection /> }\r\n                            { openedTab === 2 && <ListSection /> }\r\n                            { openedTab === 3 && <ReferencingSection /> }\r\n                            { openedTab === 4 && <TypographySection /> }\r\n                            { openedTab === 5 && <DistancesSection /> }\r\n                            { openedTab === 6 && <FramesSection /> }\r\n                            { openedTab === 7 && <FillingSection /> }\r\n                            { openedTab === 8 && <TocSection /> }\r\n                            { openedTab === 9 && <ShortCutsSection /> }\r\n                            {/* openedTab === 10 && <TestSection /> */}\r\n                        </div>\r\n                    </DialogContent>\r\n                </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, isOpen, openedTab, validationError, isEditMode }}) => {\r\n    return { \r\n        formState: form,\r\n        isOpen,\r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        closeDialog: closeDialog(dispatch),\r\n        clearForm: () => dispatch(clearDecoratorForm()),\r\n        switchTab: payload => dispatch(switchDecDialogTab(payload)),\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecoratorDialog);","import DecoratorDialog from \"./DecoratorDialog\";\r\nexport default DecoratorDialog;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport DecoratorDialog from \"./components/DecoratorDialog\";\nimport { openDialog } from \"./components/DecoratorDialog/actions\";\nimport { clearSavedDecoratorForm,  saveDecoratorForm } from \"./actions\";\nimport { DecDataConverter } from \"./components/DecoratorDialog/helpers\";\nimport theme from \"./components/DecoratorDialog/theme\";\n\nimport \"./App.css\";\n\nconst App = props => {\n    const { openDialog, saveForm, clearSavedForm, savedForm } = props;\n\n    const openEditDialog = () => {\n        openDialog(DecDataConverter.convertToEdit(savedForm || {}));\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"startButtons\">\n                    { !savedForm ? (\n                        <Button \n                            onClick={() => openDialog()}\n                            color=\"primary\"\n                        >Create new</Button>\n                    ) : (\n                        <>\n                            <Button \n                                onClick={() => openEditDialog()}\n                            >Edit saved</Button>\n                            <Button \n                                onClick={clearSavedForm}\n                                color=\"secondary\"\n                            >Delete saved</Button>\n                        </>\n                    )}\n                </div>\n                <DecoratorDialog sendForm={saveForm} />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = ({ savedForm }) => {\n    return { savedForm };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openDialog: openDialog(dispatch),\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\n        clearSavedForm: () => dispatch(clearSavedDecoratorForm()),\n    };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SHOW_DEC_DIALOG, HIDE_DEC_DIALOG } from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isOpenReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SHOW_DEC_DIALOG:\r\n            return true;\r\n        case HIDE_DEC_DIALOG:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isOpenReducer;","import { UPDATE_DEC_FORM, CLEAR_DEC_FORM } from \"../../components/DecoratorDialog/actions\";\r\nimport { sampleText, initialFormState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst initialState = { \r\n    previewText: sampleText,\r\n    ...initialFormState,\r\n};\r\n\r\nconst decoratorFormReducer = (state = initialState, action) =>  {\r\n    switch (action.type) {\r\n        case UPDATE_DEC_FORM:\r\n            return { ...state, ...action.payload };\r\n        case CLEAR_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default decoratorFormReducer;","import { \r\n    UPDATE_VALIDATION_ERROR, \r\n    REMOVE_VALIDATION_ERROR, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nimport { tabsErrorInitialState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst validationErrorReducer = (state = tabsErrorInitialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_VALIDATION_ERROR:\r\n            return { ...state, ...action.payload };\r\n        case REMOVE_VALIDATION_ERROR:\r\n            return tabsErrorInitialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default validationErrorReducer;","import { \r\n    SWITCH_ON_DEC_DIALOG_EDIT_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_EDIT_MODE, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isEditModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_EDIT_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_EDIT_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isEditModeReducer;","import { \r\n    SWITCH_DEC_DIALOG_TAB,\r\n    RESET_DEC_DIALOG_TAB, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst initialState = 0;\r\n\r\nconst openedTabReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_DEC_DIALOG_TAB:\r\n            return action.payload;\r\n        case RESET_DEC_DIALOG_TAB:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default openedTabReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport isOpenReducer from \"./isOpenReducer\";\r\nimport decoratorFormReducer from \"./decoratorFormReducer\";\r\nimport validationErrorReducer from \"./validationErrorReducer\";\r\nimport isEditModeReducer from \"./isEditModeReducer\";\r\nimport openedTabReducer from \"./openedTabReducer\";\r\n\r\nconst decoratorDialogReducer = combineReducers({\r\n    isOpen: isOpenReducer,\r\n    openedTab: openedTabReducer,\r\n    validationError: validationErrorReducer,\r\n    isEditMode: isEditModeReducer,\r\n    form: decoratorFormReducer,\r\n});\r\n\r\nexport default decoratorDialogReducer;","import { SAVE_DEC_FORM, CLEAR_SAVED_DEC_FORM } from \"../actions\";\r\n\r\nconst initialState = null;\r\n\r\nexport const savedFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_DEC_FORM:\r\n            return action.payload;\r\n        case CLEAR_SAVED_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedFormReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport decoratorDialogReducer from \"./decoratorDialogReducer\";\r\nimport savedFormReducer from \"./savedFormReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    decoratorDialog: decoratorDialogReducer,\r\n    savedForm: savedFormReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}