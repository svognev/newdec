{"version":3,"sources":["components/common/CustomInput.js","components/common/NewGroupDialog.js","components/common/withNewGroupControl.js","components/NewDecDialog/sections/NamesSection.js","components/NewDecDialog/sections/WordExportSection.js","components/common/CustomInputShort.js","constants.js","components/NewDecDialog/sections/PositioningSection/index.js","components/NewDecDialog/sections/PositioningSection/PositioningSection.js","components/NewDecDialog/sections/ListSection.js","components/NewDecDialog/sections/ReferencingSection.js","utils.js","components/NewDecDialog/sections/TypographySection.js","components/NewDecDialog/sections/DistancesSection.js","components/NewDecDialog/sections/FramesSection.js","components/NewDecDialog/sections/FillingSection.js","components/NewDecDialog/sections/TocSection.js","components/NewDecDialog/sections/ShortCutsSection.js","components/NewDecDialog/sections/TestSection.js","theme.js","components/common/CustomTab.js","components/common/CustomTabs.js","components/common/CustomDialog.js","components/NewDecDialog/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","NewGroupDialog","state","props","groupType","nameEN","nameDE","nameRU","nameFR","groupKey","onInputChange","inputName","e","setState","target","value","onClose","currentGroup","hideDialog","onSave","changeGroupSelect","trim","length","groupToSave","this","isOpen","isEditMode","titleText","buttonText","Dialog","className","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","variant","margin","onChange","DialogActions","Button","onClick","color","React","Component","withNewGroupControl","View","groupSelect","newGroup","handleClick","newValue","newGroupName","NativeSelect","Checkbox","WordExportSection","listStyleType","name","backSpaceActions","key","returnOnEmptySectionActions","decoratorsList","PositioningSection","id","CustomInputShort","map","action","dec","ListSection","isList","listType","changeIsList","changeListType","bulletField","setBulletField","Fragment","checked","InputAdornment","charCodeAt","toString","style","getCorrectColor","hex","TypographySection","verticalAlign","textTransform","changeVerticalAlign","changeTextTransform","fontColor","changeFontColor","correctColor","colorSampleStyle","InputProps","startAdornment","FormControlLabel","control","label","labelPlacement","RadioGroup","aria-label","row","Radio","DistancesSection","firstRowIndent","otherRowsIndent","lineSpacing","changeFirstRowIndent","changeOtherRowsIndent","changeLineSpacing","FramesSection","leftBorder","rightBorder","topBorder","bottomBorder","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColor","borderThickness","changeBorderThickness","previewBorderColor","previewBorderWidth","isNaN","parseFloat","previewStyle","borderLeft","borderRight","borderTop","borderBottom","FillingSection","fillingColor","changeFillingColor","TocSection","ShortCutSection","TestSection","slice","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomTabs","indicator","width","zIndex","display","Tabs","CustomDialog","minHeight","height","container","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","NewDecDialog","openedTab","toggleStateProperty","propName","setStateProperty","undefined","setColor","filteredInput","replace","match","setNumber","changeOpenedTab","listSectionProps","typographySectionProps","distancesSectionProps","framesSectionProps","fillingSectionProps","ThemeProvider","aria-labelledby","scroll","orientation","indicatorColor","ShortCutsSection","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b62b89e.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: '183px',\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass NewGroupDialog extends React.Component {\r\n\r\n    state = this.props.groupType !== \"xref\" \r\n          ? { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\" }\r\n          : { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\", groupKey: \"\" };\r\n    \r\n    onInputChange = inputName => e => {\r\n        this.setState({ \r\n            [inputName]: e.target.value \r\n        });\r\n    };\r\n\r\n    onClose = () => {\r\n        const {currentGroup, hideDialog } = this.props;\r\n        this.setState({ ...currentGroup });\r\n        hideDialog()\r\n    };\r\n\r\n    onSave = () => {\r\n        const { onSave, changeGroupSelect, hideDialog, groupType } = this.props;\r\n        if (this.state.nameEN.trim().length && (groupType !== \"xref\" || this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                nameEN: this.state.nameEN.trim(),\r\n                nameDE: this.state.nameDE.trim(),\r\n                nameRU: this.state.nameRU.trim(),\r\n                nameFR: this.state.nameFR.trim(),\r\n            };\r\n            if (groupType === \"xref\") {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            onSave(groupToSave);\r\n            changeGroupSelect(this.state.nameEN.trim());\r\n            hideDialog();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode } = this.props;\r\n        const { onInputChange, onSave, onClose } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${this.props.groupType === \"xref\" ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"paragraphDecorators-dialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        {\r\n                            this.props.groupType === \"xref\" \r\n                            &&\r\n                            <>\r\n                                <span>Group Key</span>\r\n                                <TextField \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    value={this.state.groupKey}\r\n                                />\r\n                            </>\r\n                        }\r\n                        <span>Name EN</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameEN\")}\r\n                            value={this.state.nameEN}\r\n                        />\r\n                        <span>Name DE</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameDE\")} \r\n                            value={this.state.nameDE}\r\n                        />                        \r\n                        <span>Name RU</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameRU\")} \r\n                            value={this.state.nameRU}\r\n                        />                        \r\n                        <span>Name FR</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameFR\")} \r\n                            value={this.state.nameFR}\r\n                        />                    \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (View) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isOpen: false,\r\n            groupSelect: \"\",\r\n            newGroup: {},\r\n        }\r\n        \r\n        handleClick = () => {\r\n            this.setState(({ isOpen }) => {\r\n                return {\r\n                    isOpen: !isOpen\r\n                };\r\n            })\r\n        }\r\n    \r\n        onSave = newGroup => {\r\n            this.setState({ newGroup });\r\n        }\r\n    \r\n        changeGroupSelect = (newValue) => {\r\n            this.setState({\r\n                groupSelect: newValue,\r\n            });\r\n        }\r\n\r\n        hideDialog = () => {\r\n            this.setState({ isOpen: false });\r\n        }\r\n        \r\n        render() {\r\n            const { handleClick, onSave, changeGroupSelect, hideDialog } = this; \r\n            return <View \r\n                {...this.props} \r\n                {...this.state}\r\n                {...{ handleClick, onSave, changeGroupSelect, hideDialog }}\r\n                />\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport CustomInput from '../../common/CustomInput';\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from '../../common/withNewGroupControl';\r\n\r\nconst NamesSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Key</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    <option value=\"\">...</option>\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"0\">Text</option>\r\n                    <option value=\"1\">Heading</option>\r\n                    <option value=\"2\">Heading Heading Heading Heading</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n\r\n            <span>Active</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n            <span>Style name (English)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (German)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (Russian)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (French)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"decorators\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(NamesSection);","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst WordExportSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Style name in WORD</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n            \r\n            <span>Soft return</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","export const listStyleType = [\r\n    {\r\n      name: 'Decimal',\r\n      value: 'decimal',\r\n    },\r\n    {\r\n      name: 'Decimal leading zero',\r\n      value: 'decimal-leading-zero',\r\n    },\r\n    {\r\n      name: 'Lower alpha',\r\n      value: 'lower-alpha',\r\n    },\r\n    {\r\n      name: 'Lower greek',\r\n      value: 'lower-greek',\r\n    },\r\n    {\r\n      name: 'Lower latin',\r\n      value: 'lower-latin',\r\n    },\r\n    {\r\n      name: 'Lower roman',\r\n      value: 'lower-roman',\r\n    },\r\n    {\r\n      name: 'Upper alpha',\r\n      value: 'upper-alpha',\r\n    },\r\n    {\r\n      name: 'Upper greek',\r\n      value: 'upper-greek',\r\n    },\r\n    {\r\n      name: 'Upper latin',\r\n      value: 'upper-latin',\r\n    },\r\n    {\r\n      name: 'Upper roman',\r\n      value: 'upper-roman',\r\n    },\r\n  ];\r\n\r\nexport const backSpaceActions = [\r\n    { key: 'merge', value: 'Merge' },\r\n    { key: 'apply_other_pd', value: 'Apply other PD' },\r\n    { key: 'remove_pd', value: 'Remove PD' },\r\n    { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const returnOnEmptySectionActions = [\r\n    { key: 'apply_other_pd', value: 'Apply other PD' },\r\n    { key: 'create_new_section', value: 'Create new section' },\r\n    { key: 'apply_default_pd', value: 'Apply default PD' },\r\n    { key: 'nothing', value: 'Nothing' }\r\n  ];\r\n\r\nexport const decoratorsList = [\r\n    { name: \"...\", value: null },\r\n    { name: \"Text 0\", value: \"quick_text_0\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n]","import PositioningSection from \"./PositioningSection.js\";\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport CustomInput from 'components/common/CustomInput';\r\nimport CustomInputShort from 'components/common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from 'constants.js'\r\n\r\nimport './style.css';\r\n\r\nconst PositioningSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <NativeSelect id=\"r1c2\" input={ <CustomInputShort /> }>\r\n                <option value={null}>...</option>\r\n                <option value=\"0\">0</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </NativeSelect>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <NativeSelect id=\"r3c2\" input={ <CustomInput /> }>\r\n                {backSpaceActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n            <span id=\"r4c1\">At the beginning of a section WITHOUT content</span>\r\n            <NativeSelect id=\"r4c2\" input={ <CustomInput /> }>\r\n                {returnOnEmptySectionActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n\r\n            <div id=\"r5\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n            <span id=\"r6c1\">Style of next section</span>\r\n            <NativeSelect id=\"r6c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r7c1\">In empty section change current style to</span>\r\n            <NativeSelect  id=\"r7c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n\r\n            <div id=\"r8\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n            <span id=\"r9c1\">TAB – change current style to</span>\r\n            <NativeSelect  id=\"r9c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r10c1\">SHIFT+TAB – change current style to</span>\r\n            <NativeSelect  id=\"r10c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { listStyleType } from '../../../constants'\r\n\r\nconst ListSection = ({ isList, listType, changeIsList, changeListType, bulletField, setBulletField }) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Is it a list?</span></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><span>List name</span></li>\r\n                            <li><span>Order level</span></li>\r\n                            <li><span>Prefix</span></li>\r\n                            <li><span>Suffix</span></li>\r\n                            <li><span>Suffix distance</span></li>\r\n                            <li><span>Magic Tabs</span></li>\r\n                            <li><span>Type of list</span></li>\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><Checkbox color=\"primary\" checked={isList} onChange={changeIsList} /></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value={null}>...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value=\"0.5\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </li>\r\n                            <li><Checkbox color=\"primary\" /></li>\r\n                            <li>\r\n                                <NativeSelect value={listType} onChange={changeListType} input={ <CustomInput /> }>\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Bullet character</span></li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Numbering style</span></li>\r\n                                    <li><span>Continue numbering after interruption</span></li>\r\n                                    <li><span>Allow restart numbering</span></li>\r\n                                    <li><span>Include previous levels from</span></li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                <li></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <TextField \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"paragraphDecorators-dialog__bullet-input\" \r\n                                            onChange={setBulletField}\r\n                                            value={bulletField}\r\n                                         />                                            \r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            { bulletField ? `Unicode: ${bulletField.charCodeAt(0).toString(16)}` : \"\"}\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            {listStyleType.map(style => (\r\n                                              <option value={style.value} key={style.value}>{style.name}</option>\r\n                                            ))}                                    \r\n                                        </NativeSelect>\r\n                                    </li>\r\n                                    <li><Checkbox color=\"primary\" /></li>\r\n                                    <li><Checkbox color=\"primary\" checked={true} /></li>\r\n                                    <li>\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            <option value={null}>...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            Preview: А.1.1\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ListSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from \"../../common/withNewGroupControl\";\r\n\r\nconst ReferencingSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Reference group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"\">none</option>\r\n                    <option value=\"0\">Reference group 1</option>\r\n                    <option value=\"1\">Reference group 2</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"xref\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(ReferencingSection);","export const getCorrectColor = (hex) => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : \"FFF\";\r\n    return correctColor;\r\n}","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst TypographySection = (props) => {\r\n    const { \r\n        verticalAlign, \r\n        textTransform, \r\n        changeVerticalAlign, \r\n        changeTextTransform,\r\n        fontColor,\r\n        changeFontColor,\r\n    } = props;\r\n\r\n    const correctColor = getCorrectColor(fontColor);\r\n\r\n    const colorSampleStyle = {\r\n        backgroundColor: `#${correctColor}`,\r\n    };\r\n    \r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Font</span></li>\r\n                    <li><span>Alignment</span></li>\r\n                    <li><span>Font size</span></li>\r\n                    <li><span>Font color name</span></li>\r\n                    <li><span>Font color HEX</span></li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                        <span>Stylings</span>\r\n                    </li>\r\n                    <li><span>Sub/Superscript</span></li>\r\n                    <li><span>Text transform</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            <option value={\"Helvetica New\"}>Helvetica New</option>\r\n                            <option value={\"Georgia\"}>Georgia</option>\r\n                            <option value={\"Roboto\"}>Roboto</option>\r\n                            <option value={\"Open Sans\"}>Open Sans</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInput /> }>\r\n                            <option value={\"left\"}>Left</option>\r\n                            <option value={\"center\"}>Center</option>\r\n                            <option value={\"right\"}>Right</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                    <li>\r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={\"12\"}>12</option>\r\n                            <option value={\"14\"}>14</option>\r\n                            <option value={\"16\"}>16</option>\r\n                        </NativeSelect>\r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={fontColor}\r\n                            onChange={changeFontColor}\r\n                         />\r\n                         <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                            \r\n                    </li>\r\n                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Bold\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Italic\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Underlined\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label=\"Stroke\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <RadioGroup \r\n                            aria-label=\"verticalAlign\" \r\n                            name=\"verticalAlign\" \r\n                            value={verticalAlign} \r\n                            onChange={changeVerticalAlign} \r\n                            row\r\n                        >\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"No\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"subscript\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Subscript\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"superscript\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Superscript\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                        </RadioGroup>\r\n                    </li>\r\n                    <li>\r\n                        <RadioGroup \r\n                            aria-label=\"textTransform\" \r\n                            name=\"textTransform\" \r\n                            value={textTransform} \r\n                            onChange={changeTextTransform} \r\n                            row\r\n                        >\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"No\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"lowercase\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Lowercase\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"paragraphDecorators-dialog__labeled-checkbox\">\r\n                                <FormControlLabel\r\n                                    value=\"uppercase\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Uppercase\"\r\n                                    labelPlacement=\"end\"\r\n                                />\r\n                            </div>\r\n                        </RadioGroup>\r\n                    </li>\r\n\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TypographySection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst DistancesSection = (props) => {\r\n    const {\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        changeFirstRowIndent,\r\n        changeOtherRowsIndent,\r\n        changeLineSpacing,\r\n    } = props;\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Margin top</span></li>\r\n                    <li><span>Margin bottom</span></li>\r\n                    <li><span>1st row indent</span></li>\r\n                    <li><span>Other rows indent</span></li>\r\n                    <li><span>Line spacing</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li>\r\n                    <NativeSelect input={ <CustomInputShort /> }>\r\n                        <option value={\"6\"}>6</option>\r\n                        <option value={\"8\"}>8</option>\r\n                        <option value={\"10\"}>10</option>\r\n                    </NativeSelect>\r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <NativeSelect input={ <CustomInputShort /> }>\r\n                        <option value={\"6\"}>6</option>\r\n                        <option value={\"8\"}>8</option>\r\n                        <option value={\"10\"}>10</option>\r\n                    </NativeSelect>\r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\"\r\n                        value={firstRowIndent}\r\n                        onChange={changeFirstRowIndent} \r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\" \r\n                        value={otherRowsIndent}\r\n                        onChange={changeOtherRowsIndent}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </li>\r\n                <li>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"paragraphDecorators-dialog__number-input\"\r\n                        value={lineSpacing}\r\n                        onChange={changeLineSpacing} \r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default DistancesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst FramesSection = (props) => {\r\n    const { \r\n        leftBorder, \r\n        rightBorder, \r\n        topBorder, \r\n        bottomBorder, \r\n        changeLeftBorder,\r\n        changeRightBorder,\r\n        changeTopBorder,\r\n        changeBottomBorder,\r\n        borderColor,\r\n        changeBorderColor,\r\n        borderThickness,\r\n        changeBorderThickness,\r\n     } = props;\r\n\r\n     const correctColor = getCorrectColor(borderColor);\r\n     const colorSampleStyle = {\r\n         backgroundColor: `#${correctColor}`,\r\n     };\r\n     const previewBorderColor = correctColor !== \"FFF\" ? `#${correctColor}` : \"#dc004e\";\r\n     const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness)) && parseFloat(borderThickness) <= 15\r\n                                ? `${borderThickness}pt`\r\n                                : \"1.3px\";\r\n\r\n     const previewStyle = {\r\n         borderLeft: `${previewBorderWidth} solid ${leftBorder ? previewBorderColor : \"white\"}`,\r\n         borderRight: `${previewBorderWidth} solid ${rightBorder ? previewBorderColor : \"white\"}`,\r\n         borderTop: `${previewBorderWidth} solid ${topBorder ? previewBorderColor : \"white\"}`,\r\n         borderBottom: `${previewBorderWidth} solid ${bottomBorder ? previewBorderColor : \"white\"}`,\r\n     }\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <div className=\"paragraphDecorators-dialog__border-directions\">\r\n                        <div className=\"top-row\">\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__top-direction-span\">Top</span>\r\n                        </div>\r\n                        <div className=\"center-row\">\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__left-direction-span\">Left</span>\r\n                            <div className=\"center-square\">\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-top\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-top\" \r\n                                            checked={topBorder}  \r\n                                            onChange={changeTopBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-left\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-left\" \r\n                                            checked={leftBorder}  \r\n                                            onChange={changeLeftBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                    <div className=\"preview\" style={previewStyle}>\r\n                                        <span>Text</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-right\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-right\" \r\n                                            checked={rightBorder}  \r\n                                            onChange={changeRightBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                                <div className=\"center-cell center-cell-bottom\">\r\n                                    <li>\r\n                                        <Checkbox \r\n                                            className=\"checkbox-bottom\" \r\n                                            checked={bottomBorder}  \r\n                                            onChange={changeBottomBorder}\r\n                                            color=\"primary\" \r\n                                        />\r\n                                    </li>\r\n                                </div>\r\n                                <div className=\"center-cell\">\r\n                                </div>\r\n                            </div>\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__right-direction-span\">Right</span>\r\n                        </div>\r\n                        <div className=\"bottom-row\">\r\n                            <span className=\"paragraphDecorators-dialog__direction-span paragraphDecorators-dialog__bottom-direction-span\">Bottom</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Frame color name</span></li>\r\n                    <li><span>Frame color HEX</span></li>\r\n                    <li><span>Frame thickness</span></li>\r\n                    <li><span>Connect to previous</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={borderColor}\r\n                            onChange={changeBorderColor}\r\n                         />\r\n                        <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                            \r\n                    </li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\"\r\n                            value={borderThickness}\r\n                            onChange={changeBorderThickness}\r\n                         />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </li>\r\n                    <li><Checkbox color=\"primary\" /></li>\r\n                </div>\r\n            </ul>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { getCorrectColor } from '../../../utils';\r\n\r\nconst FillingSection = ({ fillingColor, changeFillingColor }) => {\r\n\r\n    const correctColor = getCorrectColor(fillingColor);\r\n    const colorSampleStyle = {\r\n        backgroundColor: `#${correctColor}`,\r\n    };\r\n\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Background color name</span></li>\r\n                    <li><span>Background color HEX</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"paragraphDecorators-dialog__number-input\" \r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\r\n                              }}\r\n                            value={fillingColor}\r\n                            onChange={changeFillingColor}\r\n                         />     \r\n                        <div className=\"paragraphDecorators-dialog__color-sample\" style={colorSampleStyle}></div>                                                                                   \r\n                    </li>                \r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FillingSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nconst TocSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li><span>ToC indentation</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>                    \r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={null}>...</option>\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TocSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst ShortCutSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Windows</span></li>\r\n                    <li><span>Mac</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ShortCutSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from '../../../constants'\r\n\r\nconst TestSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <NativeSelect id=\"r1c2\" input={ <CustomInputShort /> }>\r\n                <option value={null}>...</option>\r\n                <option value=\"0\">0</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </NativeSelect>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <NativeSelect id=\"r3c2\" input={ <CustomInput /> }>\r\n                {backSpaceActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n            <span id=\"r4c1\">At the beginning of a section WITHOUT content</span>\r\n            <NativeSelect id=\"r4c2\" input={ <CustomInput /> }>\r\n                {returnOnEmptySectionActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n\r\n            <div id=\"r5\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n            <span id=\"r6c1\">Style of next section</span>\r\n            <NativeSelect id=\"r6c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.slice(1).map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                <option value={null}>...</option>\r\n            </NativeSelect>\r\n            <span id=\"r7c1\">In empty section change current style to</span>\r\n            <NativeSelect  id=\"r7c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.slice(1).map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                <option value={null}>...</option>\r\n            </NativeSelect>\r\n\r\n            <div id=\"r8\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n            <span id=\"r9c1\">TAB – change current style to</span>\r\n            <NativeSelect  id=\"r9c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r10c1\">SHIFT+TAB – change current style to</span>\r\n            <NativeSelect  id=\"r10c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TestSection;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\n\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: 'initial',\r\n      backgroundColor: 'white',\r\n      transition: '0.2s',\r\n\r\n      '&:before': {\r\n        transition: '0.2s',\r\n      },\r\n\r\n      '&:hover': {\r\n        color: '#000',\r\n      },\r\n      '&$selected': {\r\n        backgroundColor: '#2196f3',\r\n        color: 'white',\r\n        opacity: 1,\r\n      },\r\n      '&:hover:active': {\r\n        backgroundColor: 'white',\r\n        transition: '0.2s',\r\n      },\r\n      '&$selected:hover:active': {\r\n        backgroundColor: '#2ca4ff',\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import Tabs from '@material-ui/core/Tabs';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTabs = withStyles(theme => ({\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n      }\r\n  }))(Tabs);\r\n\r\n  export default CustomTabs;","import { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1150px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        '&:after': {\r\n            height: '100%',\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: '1280px',\r\n        maxHeight: '850px',\r\n        minHeight: '550px',\r\n        width: 'calc(100% - 96px)',\r\n        height: 'calc(100% - 96px)',\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        border: 'none',\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: 'middle',\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","import React from 'react';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport NamesSection from './sections/NamesSection';\r\nimport WordExportSection from './sections/WordExportSection';\r\nimport PositioningSection from './sections/PositioningSection';\r\nimport ListSection from './sections/ListSection';\r\nimport ReferencingSection from './sections/ReferencingSection';\r\nimport TypographySection from './sections/TypographySection';\r\nimport DistancesSection from './sections/DistancesSection';\r\nimport FramesSection from './sections/FramesSection';\r\nimport FillingSection from './sections/FillingSection';\r\nimport TocSection from './sections/TocSection';\r\nimport ShortCutsSection from './sections/ShortCutsSection';\r\nimport TestSection from './sections/TestSection';\r\n\r\nimport theme from '../../theme';\r\nimport CustomTab from '../common/CustomTab';\r\nimport CustomTabs from '../common/CustomTabs';\r\nimport CustomDialog from '../common/CustomDialog';\r\n\r\nimport \"./style.css\";\r\n\r\nclass NewDecDialog extends React.Component {\r\n    state = { \r\n        openedTab: 0,\r\n        isList: true,\r\n        listType: \"unordered\",\r\n        bulletField: \"\",\r\n        verticalAlign: \"\",\r\n        textTransform: \"\",\r\n        leftBorder: true,\r\n        rightBorder: true,\r\n        topBorder: true,\r\n        bottomBorder: true,\r\n        borderColor: \"\",\r\n        fontColor: \"\",\r\n        fillingColor: \"\",\r\n        borderThickness: \"\",\r\n        firstRowIndent: \"\",\r\n        otherRowsIndent: \"\",\r\n        lineSpacing: \"\",\r\n    };\r\n\r\n    toggleStateProperty = (propName) => (e) => {\r\n        this.setState({\r\n            [propName]: e.target.checked\r\n        });\r\n    }\r\n\r\n    setStateProperty = (propName) => (e, newValue) => {\r\n        this.setState({\r\n            [propName]: newValue === undefined ? e.target.value : newValue,\r\n        });\r\n    }\r\n\r\n    setBulletField = (e) => {\r\n        this.setState({\r\n            bulletField: e.target.value.length > 1 ? e.target.value[e.target.value.length - 1] : e.target.value \r\n        });\r\n    } \r\n\r\n    setColor = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n        \r\n        const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                              : \"\" ;\r\n        \r\n        if (filteredInput === this.state[propName]) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [propName]: filteredInput,\r\n        });\r\n    }\r\n\r\n    setNumber = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n\r\n        const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                              : \"\" ;\r\n\r\n        if (filteredInput === this.state[propName]) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            [propName]: filteredInput,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isOpen, onClose } = this.props;\r\n        const { openedTab, \r\n                isList, \r\n                listType, \r\n                bulletField, \r\n                verticalAlign, \r\n                textTransform,\r\n                leftBorder, \r\n                rightBorder,\r\n                topBorder,\r\n                bottomBorder, \r\n                borderColor,\r\n                fontColor,\r\n                fillingColor,\r\n                borderThickness,\r\n                firstRowIndent,\r\n                otherRowsIndent,\r\n                lineSpacing,\r\n            } = this.state;\r\n\r\n        const { setBulletField } = this;\r\n        const changeOpenedTab = this.setStateProperty(\"openedTab\");\r\n        const changeIsList = this.toggleStateProperty(\"isList\");\r\n        const changeListType = this.setStateProperty(\"listType\");\r\n        const changeVerticalAlign = this.setStateProperty(\"verticalAlign\");\r\n        const changeTextTransform = this.setStateProperty(\"textTransform\");\r\n        const changeLeftBorder = this.toggleStateProperty(\"leftBorder\");\r\n        const changeRightBorder = this.toggleStateProperty(\"rightBorder\");\r\n        const changeTopBorder = this.toggleStateProperty(\"topBorder\");\r\n        const changeBottomBorder = this.toggleStateProperty(\"bottomBorder\");\r\n        const changeBorderColor = this.setColor(\"borderColor\");\r\n        const changeFontColor = this.setColor(\"fontColor\");\r\n        const changeFillingColor = this.setColor(\"fillingColor\");\r\n        const changeBorderThickness = this.setNumber(\"borderThickness\");\r\n        const changeFirstRowIndent = this.setNumber(\"firstRowIndent\");\r\n        const changeOtherRowsIndent = this.setNumber(\"otherRowsIndent\");\r\n        const changeLineSpacing = this.setNumber(\"lineSpacing\");\r\n\r\n        const listSectionProps = { \r\n            isList, \r\n            listType, \r\n            changeIsList, \r\n            changeListType, \r\n            bulletField, \r\n            setBulletField,\r\n        };\r\n\r\n        const typographySectionProps = { \r\n            verticalAlign, \r\n            textTransform, \r\n            changeVerticalAlign, \r\n            changeTextTransform,\r\n            fontColor,\r\n            changeFontColor,\r\n        };\r\n\r\n        const distancesSectionProps = {\r\n            firstRowIndent,\r\n            otherRowsIndent,\r\n            lineSpacing,\r\n            changeFirstRowIndent,\r\n            changeOtherRowsIndent,\r\n            changeLineSpacing,\r\n        };\r\n\r\n        const framesSectionProps = { \r\n            leftBorder, \r\n            rightBorder, \r\n            topBorder, \r\n            bottomBorder, \r\n            changeLeftBorder, \r\n            changeRightBorder, \r\n            changeTopBorder, \r\n            changeBottomBorder, \r\n            borderColor,\r\n            changeBorderColor,\r\n            borderThickness,\r\n            changeBorderThickness,\r\n        };\r\n\r\n        const fillingSectionProps = { fillingColor, changeFillingColor };\r\n        \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n            <CustomDialog\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"body\"\r\n                className=\"paragraphDecorators-dialog\"\r\n                fullWidth={true}\r\n                maxWidth={false}\r\n            >\r\n                <div className=\"header\">\r\n                    <DialogTitle className=\"header-title\">\r\n                        <p>Create new paragraph decorator</p>\r\n                    </DialogTitle>\r\n                    <div className=\"header-buttons\">\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick={onClose}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {}}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                    \r\n                <DialogContent className=\"content\">\r\n                    <div className=\"content-leftSide\">\r\n                        <CustomTabs \r\n                            className=\"dialogTabs\"\r\n                            value={openedTab} \r\n                            onChange={changeOpenedTab} \r\n                            orientation=\"vertical\"\r\n                            color=\"primary\"\r\n                            indicatorColor=\"primary\"\r\n                        >\r\n                            <CustomTab className=\"dialogTab\" label=\"Names\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"WORD export\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"List\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Test\" />\r\n                        </CustomTabs>\r\n                    </div>\r\n                    <div className=\"content-rightSide\">\r\n                        { openedTab === 0 && <NamesSection /> }\r\n                        { openedTab === 1 && <WordExportSection /> }\r\n                        { openedTab === 2 && <PositioningSection /> }\r\n                        { openedTab === 3 && <ListSection {...listSectionProps} />}\r\n                        { openedTab === 4 && <ReferencingSection /> }\r\n                        { openedTab === 5 && <TypographySection {...typographySectionProps} /> }\r\n                        { openedTab === 6 && <DistancesSection {...distancesSectionProps} /> }\r\n                        { openedTab === 7 && <FramesSection {...framesSectionProps} /> }\r\n                        { openedTab === 8 && <FillingSection {...fillingSectionProps} /> }\r\n                        { openedTab === 9 && <TocSection /> }\r\n                        { openedTab === 10 && <ShortCutsSection /> }\r\n                        { openedTab === 11 && <TestSection /> }\r\n                    </div>\r\n                </DialogContent>\r\n            </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewDecDialog;","import React from 'react';\nimport './App.css';\n\nimport NewDecDialog from './components/NewDecDialog';\n\nclass App extends React.Component {\n  state = {\n    isOpen: true,\n  }\n\n  handleClick = () => {\n    this.setState(({ isOpen }) => {\n      return {\n        isOpen: !isOpen\n      };\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleClick}>Open</button>\n        <NewDecDialog \n          isOpen={this.state.isOpen}\n          onClose={() => {\n            this.setState({ isOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}