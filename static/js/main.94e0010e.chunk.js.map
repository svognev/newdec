{"version":3,"sources":["components/DecoratorDialog/common/CustomInput.js","components/DecoratorDialog/common/LabelWithAsterisk.js","components/DecoratorDialog/helpers/DecDataParser.js","components/DecoratorDialog/helpers/isFontAvailable.js","components/DecoratorDialog/helpers/getShortCutUtils.js","components/DecoratorDialog/constants/decoratorsList.js","components/DecoratorDialog/constants/fontsSet.js","components/DecoratorDialog/constants/validationData.js","components/DecoratorDialog/constants/constants.js","components/DecoratorDialog/constants/emptyDecFormState.js","components/DecoratorDialog/helpers/validationFunctions.js","components/DecoratorDialog/helpers/helpers.js","components/DecoratorDialog/common/NewGroupDialog.js","components/DecoratorDialog/hoc/withNewGroupControl.js","components/DecoratorDialog/actions/index.js","components/DecoratorDialog/sections/NamesSection.js","components/DecoratorDialog/sections/WordExportSection.js","components/DecoratorDialog/common/CustomInputShort.js","components/DecoratorDialog/sections/PositioningSection/BackSpaceActionInput.js","components/DecoratorDialog/sections/PositioningSection/index.js","components/DecoratorDialog/sections/PositioningSection/PositioningSection.js","components/DecoratorDialog/common/Preview/generators.js","components/DecoratorDialog/common/Preview/ListPreview.js","components/DecoratorDialog/common/ColorField/index.js","components/DecoratorDialog/common/ColorField/ColorField.js","components/DecoratorDialog/common/FontSelectFields.js","components/DecoratorDialog/sections/ListSection/ListSection.js","components/DecoratorDialog/sections/ListSection/index.js","components/DecoratorDialog/sections/ReferencingSection.js","components/DecoratorDialog/common/ContentEditable.js","components/DecoratorDialog/common/Preview/Preview.js","components/DecoratorDialog/common/Preview/index.js","components/DecoratorDialog/sections/TypographySection/index.js","components/DecoratorDialog/sections/TypographySection/TypographySection.js","components/DecoratorDialog/sections/DistancesSection.js","components/DecoratorDialog/sections/FramesSection/FrameTypeInput.js","components/DecoratorDialog/sections/FramesSection/generateBorderPreviewStyle.js","components/DecoratorDialog/sections/FramesSection/FramesSection.js","components/DecoratorDialog/sections/FramesSection/index.js","components/DecoratorDialog/sections/FillingSection.js","components/DecoratorDialog/sections/TocSection.js","components/DecoratorDialog/sections/ShortCutsSection.js","components/DecoratorDialog/theme.js","components/DecoratorDialog/common/CustomTab.js","components/DecoratorDialog/common/CustomErrorTab.js","components/DecoratorDialog/common/CustomTabs.js","components/DecoratorDialog/common/CustomDialog.js","actions.js","components/DecoratorDialog/DecoratorDialog.js","components/DecoratorDialog/index.js","App.js","reducers/decoratorDialogReducer/isOpenReducer.js","reducers/decoratorDialogReducer/decoratorFormReducer.js","reducers/decoratorDialogReducer/validationErrorReducer.js","reducers/decoratorDialogReducer/isEditModeReducer.js","reducers/decoratorDialogReducer/openedTabReducer.js","reducers/decoratorDialogReducer/index.js","reducers/savedFormReducer.js","reducers/rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","LabelWithAsterisk","children","className","DecDataParser","dec","mapDecFields","width","getShortCutUtils","systemName","e","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","indexOf","isCmdPressed","value","stringValue","Object","keys","CMD_KEYS","forEach","key","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","item_type","isEqual","keyboard_shortcut","childItems","child_items","itemKey","style","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","body","document","container","createElement","innerHTML","Array","cssText","getWidth","appendChild","clientWidth","removeChild","monoWidth","serifWidth","sansWidth","isFontAvailable","font","decoratorsList","name","fontSet","namesSectionRequiredFields","wordExportSectionRequiredFields","listSectionRequiredFields","tabsErrorInitialState","namesSection","wordExportSection","listSection","sectionsTabNumbers","tabName","tabNumber","alignmentsMap","center","left","right","justify","backSpaceActions","bulletNamesMap","bulletpoint","dash","star","listStyleTypes","numberingSets","decimal","HOLDER","autoFillingRequiredFields","sideNumberFont","sideNumberFontSize","sideNumberFontColor","sideNumberFillingColor","sideNumberWidth","sideNumberRadius","fontColor","marginBottom","firstRowIndent","otherRowsIndent","wordSpacing","lineSpacing","borderThickness","emptyDecFormState","decKey","group","groupToCreate","active","decNameEn","decNameDe","decNameRu","decNameFr","decNameFrCa","decNameEs","wordStyleName","softReturn","indentationalLevel","backspaceActionWithContent","backspaceActionWithContentStyle","returnActionNextSection","returnActionEmptySection","tabAction","shiftTabAction","isList","listName","orderLevel","prefix","suffix","suffixDistance","magicTabs","listType","listItem","unicodeNumber","unicodeChar","numberingStyle","continueNumbering","allowRestartNumbering","includePreviousFrom","sideNumber","customSideNumberFont","sideNumberAlignment","referenceGroup","referenceGroupToCreate","customFont","alignment","fontColorName","bold","italic","underlined","stroke","textTransform","verticalAlign","customLineSpacing","leftBorder","rightBorder","topBorder","bottomBorder","borderColorName","borderType","borderConnectToPrevious","fillingColorName","fillingColor","fillingfillingConnectToPrevious","tocIndentation","shortCutWin","shortCutWinView","shortCutMac","shortCutMacView","getNamesSectionErrorState","form","every","fieldName","getWordExportSectionErrorState","getListSectionErrorState","getTabsErrorState","tabsState","clone","getTabNumberToSwitch","tabsErrorState","getCorrectColor","hex","correctColor","length","selectAllOnClick","defaultValue","target","focus","select","getOffset","alignType","parseFloat","slice","getUnstyledText","styledText","unstyledText","replace","unicodeNumberToChar","String","fromCharCode","parseInt","unicodeCharToNumber","charCodeAt","toString","scrollToBottom","setTimeout","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","changeAndScroll","changeFunction","timeOut","focusInput","inputRef","timeout","current","getPreviewFont","fillMissedFields","currentFormState","formStateWithoutMissedFields","option","customOption","NewGroupDialog","isXref","props","groupType","emptyGroup","nameEn","nameDe","nameRu","nameFr","nameFrCa","nameEs","groupKey","getInitialState","savedGroup","state","requiredFieldRef","React","createRef","onInputChange","inputName","setState","onClose","hideGroupDialogValidationError","closeGroupDialog","onGroupSave","trim","groupToSave","saveGroup","showGroupDialogValidationError","this","isOpen","isEditMode","hasGroupDialogValidationError","titleText","buttonText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","onChange","error","variant","margin","DialogActions","Button","onClick","color","PureComponent","withNewGroupControl","ViewComponent","isGroupDialogOpen","openGroupDialog","Component","updateDecoratorForm","payload","type","clearDecoratorForm","updateValidationError","openDialog","dispatch","closeDialog","setValue","propName","secondArg","newValue","undefined","toggleValue","checked","setBullet","newBullet","setColor","filteredInput","match","setNumber","setShortCut","valuePropName","viewPropName","search","convertEventToShortCut","NamesSection","decKeyInputRef","decNameEnInputRef","focusOnEmptyField","onGroupChange","groupName","changeGroupToCreate","changeGroup","validationError","prevprops","formState","changeDecKey","changeActive","changeDecNameEn","changeDecNameDe","changeDecNameRu","changeDecNameFr","changeDecNameFrCa","changeDecNameEs","newGroupName","NativeSelect","Checkbox","connect","decoratorDialog","changeWordStyleName","changeSoftReturn","autoFocus","CustomInputShort","BackSpaceActionInput","PositioningSection","changeIndentationalLevel","changeBackspaceActionWithContent","changeBackspaceActionWithContentStyle","changeBackspaceActionWithoutContent","changeBackspaceActionWithoutContentStyle","changeReturnActionNextSection","changeReturnActionEmptySection","changeTabAction","changeShiftTabAction","backSpaceActionStyleSettingsState","id","map","action","generatePreviewStyle","fillingConnectToPrevious","previewFontColor","previewFillingColor","previewAdditionalFillingColor","indentsDifference","previewMarginLeft","previewTextIndent","previewLineSpacing","alignItems","textAlign","fontWeight","fontStyle","textDecoration","fontVariant","backgroundImage","marginLeft","textIndent","lineHeight","outline","previewText","isOrderedList","listItemBeginnings","fill","getListChars","listChar","previewStyle","sideNumberStyle","previewSideNumberFontColor","previewSideNumberFillingColor","marginRight","generateSideNumberStyle","listItemBeginningStyle","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","defaultColorCode","required","bottomAligned","colorError","inputError","pickerColor","colorSampleStyle","colorPickerClassName","InputProps","startAdornment","InputAdornment","onChangeComplete","disableAlpha","FontSelectFields","customFontInputRef","onFontChange","changeFont","changeCustomFont","availableFonts","filter","fontName","optionalFieldState","placeholder","ListSection","listNameInputRef","unicodeCharInputRef","onIsListChange","changeListName","changeIsList","onListTypeChange","changeListType","changeSuffix","onListItemChange","changeListItem","onUnicodeNumberChange","newUnicodeNumber","changeUnicodeNumber","newUnicodeChar","changeUnicodeChar","onUnicodeCharChange","onSideNumberChange","changeSideNumber","listPreviewProps","changeOrderLevel","changePrefix","changeSuffixDistance","changeMagicTabs","changeNumberingStyle","changeContinueNumbering","changeAllowRestartNumbering","changeIncludePreviousFrom","changeSideNumberFont","changeCustomSideNumberFont","changeSideNumberAlignment","changeSideNumberFontSize","changeSideNumberFontColor","changeSideNumberFillingColor","changeSideNumberWidth","changeSideNumberRadius","mainListSettingsState","unorderedListSettingsState","customListItemSettingsState","orderedListSettingsState","sideNumberSettingsState","RadioGroup","row","FormControlLabel","control","Radio","label","labelPlacement","entries","ReferencingSection","onXrefChange","xrefName","xref","changeReferenceGroupToCreate","changeReferenceGroup","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","q","propertyIsEnumerable","normalizeHtml","str","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","getEl","emitChange","originalEvt","evt","assign","_a","tagName","ref","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","onPreviewTextChange","changePreviewText","selectAllChildren","TypographySection","changeAlignment","changeFontSize","changeFontColorName","changeFontColor","changeBold","changeItalic","changeUnderlined","changeStroke","changeTextTransform","changeVerticalAlign","changeMarginTop","previewProps","DistancesSection","customLineSpacingInputRef","onLineSpacingChange","changeLineSpacing","changeMarginBottom","changeFirstRowIndent","changeOtherRowsIndent","changeCustomLineSpacing","changeWordSpacing","FrameTypeInput","generateBorderPreviewStyle","previewBorderWidth","isNaN","borderLeft","borderRight","borderTop","borderBottom","FramesSection","onBorderTypeChange","changeBorderType","changeBorderThickness","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColorName","changeBorderColor","changeBorderConnectToPrevious","Select","MenuItem","changeFillingColorName","changeFillingColor","changefillingConnectToPrevious","changeTocIndentation","changeShortCutWin","changeShortCutMac","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomErrorTab","CustomTabs","Tabs","indicator","zIndex","display","CustomDialog","minHeight","height","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","saveDecoratorForm","DecoratorDialog","clearForm","onSaveButtonClick","switchTab","sendForm","parseToSend","onTabSwitch","openedTab","ThemeProvider","aria-labelledby","scroll","orientation","indicatorColor","ShortCutsSection","switchDecDialogTab","saveForm","savedForm","clearSavedForm","parseToEdit","isOpenReducer","initialState","decoratorFormReducer","validationErrorReducer","isEditModeReducer","openedTabReducer","decoratorDialogReducer","combineReducers","savedFormReducer","rootReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94e0010e.chunk.js","sourcesContent":["import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: \"183px\",\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from \"react\";\r\n\r\nconst LabelWithAsterisk = ({ children }) => {\r\n    return (\r\n        <div className=\"labelWithAsterisk\">\r\n            <div className=\"labelWithAsterisk-labelBox\">\r\n                <span>{children}</span>\r\n            </div>\r\n            <div className=\"labelWithAsterisk-asteriskBox\">\r\n                <span className=\"labelWithAsterisk-asteriskMark\">*</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabelWithAsterisk;","class DecDataParser {\r\n    static parseToSend(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static parseToEdit(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static mapDecFields = {};\r\n}\r\n\r\nexport default DecDataParser;","const { body } = document;\r\nlet width;\r\n\r\nconst container = document.createElement('span');\r\ncontainer.innerHTML = Array(100).join('wi');\r\ncontainer.style.cssText = [\r\n    'position:absolute',\r\n    'width:auto',\r\n    'font-size:128px',\r\n    'left:-99999px'\r\n].join(' !important;');\r\n\r\nconst getWidth = fontFamily => {\r\n    container.style.fontFamily = fontFamily;\r\n\r\n    body.appendChild(container);\r\n    width = container.clientWidth;\r\n    body.removeChild(container);\r\n\r\n    return width;\r\n};\r\n\r\nconst monoWidth  = getWidth('monospace');\r\nconst serifWidth = getWidth('serif');\r\nconst sansWidth  = getWidth('sans-serif');\r\n\r\nconst isFontAvailable = font => {\r\n    return monoWidth !== getWidth(font + ',monospace') ||\r\n    sansWidth !== getWidth(font + ',sans-serif') ||\r\n    serifWidth !== getWidth(font + ',serif');\r\n};\r\n\r\nexport default isFontAvailable;","import keycode from \"keycode\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === \"MacOS\" ? \"Option\" : \"Alt\",\r\n      ctrlKey: systemName === \"MacOS\" ? \"Control\" : \"Ctrl\",\r\n      shiftKey: \"Shift\",\r\n      metaKey: \"Command\",\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = \"\";\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === \"style\") {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","const decoratorsList = [\r\n    { name: \"...\", value: \"\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n    { name: \"Heading 1\", value: \"quick_heading_1\" },\r\n    { name: \"Heading 2\", value: \"quick_heading_2\" },\r\n    { name: \"Heading 3\", value: \"quick_heading_3\" },\r\n    { name: \"Heading 4\", value: \"quick_heading_4\" },\r\n    { name: \"Heading 5\", value: \"quick_heading_5\" },\r\n];\r\n\r\nexport default decoratorsList;","const fontSet = [ \r\n    \"Source Sans Pro\",\r\n    \"Dejavu Sans\",\r\n    \"Dejavu Serif\",\r\n    \"Open Sans\",\r\n    \"Montserrat\",\r\n    \"Arial\",\r\n    \"Georgia\",\r\n    \"Verdana\",\r\n    \"Times New Roman\",\r\n];\r\n\r\nexport default fontSet;","export const namesSectionRequiredFields = [\"decKey\", \"decNameEn\"];\r\n\r\nexport const wordExportSectionRequiredFields = [\"wordStyleName\"];\r\n\r\nexport const listSectionRequiredFields = [\"listName\"];\r\n\r\nexport const requiredFields = [ \r\n    ...namesSectionRequiredFields, \r\n    ...wordExportSectionRequiredFields, \r\n    ...listSectionRequiredFields, \r\n];\r\n\r\nexport const tabsErrorInitialState = {\r\n    namesSection: false,\r\n    wordExportSection: false,\r\n    listSection: false,\r\n};\r\n\r\nexport const sectionsTabNumbers = [\r\n    { tabName: \"namesSection\", tabNumber: 0 },\r\n    { tabName: \"wordExportSection\", tabNumber: 1},\r\n    { tabName: \"listSection\", tabNumber: 3 },\r\n];","export const alignmentsMap = {\r\n    center: \"center\",\r\n    left: \"flex-start\",\r\n    right: \"flex-end\",\r\n    justify: \"flex-start\",\r\n};\r\n\r\nexport const backSpaceActions = [\r\n    { key: 'merge', value: 'Merge' },\r\n    { key: 'apply_other_pd', value: 'Apply other PD' },\r\n    { key: 'remove_pd', value: 'Remove PD' },\r\n    { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const bulletNamesMap = {\r\n    bulletpoint: \"•\",\r\n    dash: \"—\",\r\n    star: \"★\",\r\n};\r\n\r\nexport const listStyleTypes = [\r\n    { name: '1, 2, 3', value: 'decimal' },\r\n    {  name: 'A, B, C', value: 'upper-alpha' },\r\n    {  name: 'a, b, c', value: 'lower-alpha' },\r\n    {  name: 'I, II, III', value: 'upper-roman' },\r\n    {  name: 'i, ii, iii', value: 'lower-roman' },\r\n];\r\n\r\nexport const numberingSets = {\r\n    decimal: [\"1\", \"2\", \"3\", \"4\"],\r\n    \"upper-alpha\": [\"A\", \"B\", \"C\", \"D\"],\r\n    \"lower-alpha\": [\"a\", \"b\", \"c\", \"d\"],\r\n    \"upper-roman\": [\"I\", \"II\", \"III\", \"IV\"],\r\n    \"lower-roman\": [\"i\", \"ii\", \"iii\", \"iv\"],\r\n};\r\n\r\nexport const sampleText = `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`;\r\n","export const HOLDER = \"HOLDER-POLDER\";\r\nexport const DEFAULT_FONT = \"Helvetica\";\r\nexport const DEFAULT_FONT_SIZE = \"11\";\r\nexport const DEFAULT_SIDE_NUMBER_FONT_COLOR = \"FFF\";\r\nexport const DEFAULT_SIDE_NUMBER_FILLING_COLOR = \"1E88E5\";\r\nexport const DEFAULT_SIDE_NUMBER_WIDTH = \"20\";\r\nexport const DEFAULT_SIDE_NUMBER_RADIUS = \"10\";\r\nexport const DEFAULT_FONT_COLOR = \"000\";\r\nexport const DEFAULT_ROW_INDENT = \"0\";\r\nexport const DEFAULT_MARGIN = \"6\";\r\nexport const DEFAULT_WORD_SPACING = \"0\";\r\nexport const DEFAULT_LINE_SPACING = \"1.5\";\r\nexport const DEFAULT_BORDER_COLOR = \"F00\";\r\nexport const DEFAULT_BORDER_THICKNESS = \"2\";\r\nexport const DEFAULT_FONT_COLOR_NAME = \"Black\";\r\nexport const DEFAULT_BORDER_COLOR_NAME = \"Red\";\r\n\r\nexport const autoFillingRequiredFields = {\r\n    sideNumberFont: DEFAULT_FONT,\r\n    sideNumberFontSize: DEFAULT_FONT_SIZE,\r\n    sideNumberFontColor: DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    sideNumberFillingColor: DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    sideNumberWidth: DEFAULT_SIDE_NUMBER_WIDTH,\r\n    sideNumberRadius: DEFAULT_SIDE_NUMBER_RADIUS,\r\n    font: DEFAULT_FONT,\r\n    fontSize: DEFAULT_FONT_SIZE,\r\n    fontColor: DEFAULT_FONT_COLOR,\r\n    marginTop: DEFAULT_MARGIN,\r\n    marginBottom: DEFAULT_MARGIN,\r\n    firstRowIndent: DEFAULT_ROW_INDENT,\r\n    otherRowsIndent: DEFAULT_ROW_INDENT,\r\n    wordSpacing: DEFAULT_WORD_SPACING,   \r\n    lineSpacing: DEFAULT_LINE_SPACING,\r\n    borderColor: DEFAULT_BORDER_COLOR,\r\n    borderThickness: DEFAULT_BORDER_THICKNESS,\r\n};\r\n\r\nexport const emptyDecFormState = {\r\n    ...autoFillingRequiredFields,\r\n    decKey: \"\",\r\n    group: \"\",\r\n    groupToCreate: \"\",\r\n    active: true,\r\n    decNameEn: \"\",\r\n    decNameDe: \"\",\r\n    decNameRu: \"\",\r\n    decNameFr: \"\",\r\n    decNameFrCa: \"\",\r\n    decNameEs: \"\",\r\n    wordStyleName: \"\",\r\n    softReturn: false,\r\n    indentationalLevel: \"\",\r\n    backspaceActionWithContent: \"merge\",\r\n    backspaceActionWithContentStyle: \"default\",\r\n    returnActionNextSection: \"default\",\r\n    returnActionEmptySection: \"default\",\r\n    tabAction: \"\",\r\n    shiftTabAction: \"\",\r\n    isList: false,\r\n    listName: HOLDER,\r\n    orderLevel: \"\",\r\n    prefix: \"\",\r\n    suffix: \"\",\r\n    suffixDistance: \"0.25\",\r\n    magicTabs: false,\r\n    listType: \"unordered\",\r\n    listItem: \"bulletpoint\",\r\n    unicodeNumber: \"\",\r\n    unicodeChar: \"\",\r\n    numberingStyle: \"decimal\",\r\n    continueNumbering: false,\r\n    allowRestartNumbering: false,\r\n    includePreviousFrom: \"\",\r\n    sideNumber: false,\r\n    customSideNumberFont: \"\",\r\n    sideNumberAlignment: \"center\",\r\n    referenceGroup: \"\",\r\n    referenceGroupToCreate: \"\",\r\n    customFont: \"\",\r\n    alignment: \"left\",\r\n    fontColorName: DEFAULT_FONT_COLOR_NAME,\r\n    bold: false,\r\n    italic: false,\r\n    underlined: false,\r\n    stroke: false,\r\n    textTransform: \"none\",\r\n    verticalAlign: \"baseline\",\r\n    customLineSpacing: \"\",\r\n    leftBorder: false,\r\n    rightBorder: false,\r\n    topBorder: false,\r\n    bottomBorder: false,\r\n    borderColorName: DEFAULT_BORDER_COLOR_NAME,\r\n    borderType: \"solid\",\r\n    borderConnectToPrevious: false,\r\n    fillingColorName: \"\",\r\n    fillingColor: \"\",\r\n    fillingfillingConnectToPrevious: false,\r\n    tocIndentation: \"\",\r\n    shortCutWin: \"\",\r\n    shortCutWinView: \"\",\r\n    shortCutMac: \"\",\r\n    shortCutMacView: \"\",\r\n};","import { clone } from \"lodash\";\r\n\r\nimport {\r\n    namesSectionRequiredFields,\r\n    wordExportSectionRequiredFields,\r\n    listSectionRequiredFields,\r\n    tabsErrorInitialState,\r\n    sectionsTabNumbers,\r\n} from \"../constants\";\r\n\r\nexport const getNamesSectionErrorState = form => {\r\n    return !namesSectionRequiredFields.every(fieldName => form[fieldName]);\r\n};\r\n\r\nexport const getWordExportSectionErrorState = form => {\r\n    return !wordExportSectionRequiredFields.every(fieldName => form[fieldName]);\r\n}\r\n\r\nexport const getListSectionErrorState = form => {\r\n    return !listSectionRequiredFields.every(fieldName => form[fieldName]);\r\n}\r\n\r\nexport const getTabsErrorState = form => {\r\n    const tabsState = clone(tabsErrorInitialState);\r\n\r\n    if (getNamesSectionErrorState(form)) {\r\n        tabsState.namesSection = true;\r\n    }\r\n\r\n    if (getWordExportSectionErrorState(form)) {\r\n        tabsState.wordExportSection = true;\r\n    }\r\n\r\n    if (getListSectionErrorState(form)) {\r\n        tabsState.listSection = true;\r\n    }\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let tabName in tabsState) {\r\n        if (tabsState[tabName]) {\r\n            return tabsState;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport const getTabNumberToSwitch = tabsErrorState => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const { tabName, tabNumber } of sectionsTabNumbers) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabNumber;\r\n        }\r\n    }\r\n};","import { \r\n    numberingSets, \r\n    bulletNamesMap, \r\n    autoFillingRequiredFields, \r\n    DEFAULT_FONT, \r\n} from \"../constants\";\r\nimport isFontAvailable from \"./isFontAvailable\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const changeAndScroll = (changeFunction, timeOut) => (...args) => {\r\n    changeFunction(...args);\r\n    if (!timeOut) {\r\n        scrollToBottom(\"content-rightSide\");\r\n    } else {\r\n        setTimeout(() => {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }, timeOut);\r\n    }\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = ({ isOrderedList, numberingStyle, listItem, unicodeChar }) => {\r\n    if (isOrderedList) {\r\n        return numberingSets[numberingStyle];\r\n    }\r\n    const newBullet = bulletNamesMap[listItem] || unicodeChar;\r\n    return Array(4).fill(newBullet);\r\n};\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};\r\n\r\nexport const focusInput = (inputRef, timeout = 300) => {\r\n    setTimeout(() => {\r\n        inputRef.current.focus();\r\n    }, timeout);\r\n};\r\n\r\nexport const getErrorSections = (requiredFields = [], ...sectionPropsSets) => {\r\n    return sectionPropsSets.map(sectionProps => {\r\n        return requiredFields.some(fieldName => {\r\n            return sectionProps.hasOwnProperty(fieldName) && !sectionProps[fieldName]\r\n        });\r\n    });\r\n};\r\n\r\nexport const getPreviewFont = (font, customFont) => {\r\n    if (font !== \"custom\" && isFontAvailable(font)) {\r\n        return font;\r\n    } else if (font === \"custom\" && customFont && isFontAvailable(customFont)) {\r\n        return customFont;\r\n    }\r\n    return `'${DEFAULT_FONT}', 'Roboto', sans-serif`;\r\n}\r\n\r\nexport const fillMissedFields = currentFormState => {\r\n    const { \r\n        font, customFont,\r\n        sideNumberFont, customSideNumberFont,\r\n        lineSpacing, customLineSpacing,\r\n    } = currentFormState;\r\n\r\n    const formStateWithoutMissedFields = { ...currentFormState };\r\n    \r\n    [\r\n        [font, customFont],\r\n        [sideNumberFont, customSideNumberFont], \r\n        [lineSpacing, customLineSpacing],\r\n    ].forEach(([option, customOption]) => {\r\n        if (option === \"custom\" && !customOption) {\r\n            formStateWithoutMissedFields[option] = null;\r\n        }\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    for (let fieldName in autoFillingRequiredFields) {\r\n        if (!currentFormState[fieldName] && autoFillingRequiredFields[fieldName]) {\r\n            formStateWithoutMissedFields[fieldName] = autoFillingRequiredFields[fieldName];\r\n        }\r\n    }\r\n    return formStateWithoutMissedFields;\r\n};","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport LabelWithAsterisk from \"./LabelWithAsterisk\";\r\nimport { focusInput } from \"../helpers\";\r\n\r\nclass NewGroupDialog extends React.PureComponent {\r\n    isXref = this.props.groupType === \"xref\";\r\n\r\n    emptyGroup = {\r\n        nameEn: \"\",\r\n        nameDe: \"\",\r\n        nameRu: \"\",\r\n        nameFr: \"\",\r\n        nameFrCa: \"\",\r\n        nameEs: \"\",\r\n        ...this.isXref && { groupKey: \"\" },\r\n    };\r\n\r\n    getInitialState = () => ({ ...this.emptyGroup, ...this.props.savedGroup });\r\n\r\n    state = this.getInitialState();\r\n\r\n    requiredFieldRef = React.createRef();\r\n\r\n    onInputChange = inputName => e => {\r\n        this.setState({ [inputName]: e.target.value });\r\n    };\r\n\r\n    onClose = () => {\r\n        this.setState(this.getInitialState());\r\n        this.props.hideGroupDialogValidationError();\r\n        this.props.closeGroupDialog();\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        if ((!this.isXref && this.state.nameEn.trim().length) || (this.isXref && this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                nameEn: this.state.nameEn.trim(),\r\n                nameDe: this.state.nameDe.trim(),\r\n                nameRu: this.state.nameRu.trim(),\r\n                nameFr: this.state.nameFr.trim(),\r\n                nameFrCa: this.state.nameFrCa.trim(),\r\n                nameEs: this.state.nameEs.trim(),\r\n            };\r\n            if (this.isXref) {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            this.props.hideGroupDialogValidationError();\r\n            this.props.saveGroup(null, (groupToSave.nameEn || groupToSave.groupKey), groupToSave);\r\n            this.props.closeGroupDialog();\r\n        } else {\r\n            this.props.showGroupDialogValidationError();\r\n            focusInput(this.requiredFieldRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode, hasGroupDialogValidationError } = this.props;\r\n        const { onInputChange, onGroupSave, onClose, isXref } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${isXref ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"paragraphDecorators-dialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        { isXref && (\r\n                            <>\r\n                                <LabelWithAsterisk>Group Key</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state.groupKey}\r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state.groupKey}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { isXref ? (\r\n                            <>\r\n                                <span>Name EN</span>\r\n                                <TextField\r\n                                    value={this.state.nameEn}\r\n                                    onChange={onInputChange(\"nameEn\")}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state.nameEn}\r\n                                    onChange={onInputChange(\"nameEn\")}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state.nameEn}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        <span>Name DE</span>\r\n                        <TextField\r\n                            value={this.state.nameDe}\r\n                            onChange={onInputChange(\"nameDe\")} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                        />                        \r\n                        <span>Name RU</span>\r\n                        <TextField\r\n                            value={this.state.nameRu}\r\n                            onChange={onInputChange(\"nameRu\")} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\"\r\n                        />                        \r\n                        <span>Name FR<br/><span className=\"smallText\">France</span></span>\r\n                        <TextField\r\n                            value={this.state.nameFr}\r\n                            onChange={onInputChange(\"nameFr\")} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                        />\r\n                        <span>Name FR<br/><span className=\"smallText\">Canada</span></span>\r\n                        <TextField \r\n                            value={this.state.nameFrCa}\r\n                            onChange={onInputChange(\"nameFrCa\")} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\"\r\n                        />\r\n                        <span>Name ES</span>\r\n                        <TextField\r\n                            value={this.state.nameEs}\r\n                            onChange={onInputChange(\"nameEs\")} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\"\r\n                        />                  \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isGroupDialogOpen: false,\r\n            hasGroupDialogValidationError: false,\r\n        };\r\n        \r\n        openGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: true });\r\n        };\r\n\r\n        closeGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: false });\r\n        };\r\n\r\n        showGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: true });\r\n        };\r\n\r\n        hideGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: false });\r\n        };\r\n\r\n        render() {\r\n            const { \r\n                openGroupDialog, \r\n                closeGroupDialog, \r\n                showGroupDialogValidationError, \r\n                hideGroupDialogValidationError \r\n            } = this; \r\n\r\n            return ( \r\n                <ViewComponent \r\n                    {...this.props} \r\n                    {...this.state} \r\n                    {...{ openGroupDialog, closeGroupDialog, showGroupDialogValidationError, hideGroupDialogValidationError }} \r\n                /> \r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import { getShortCutUtils } from \"../helpers\";\r\n\r\nexport const UPDATE_DEC_FORM = \"UPDATE_DEC_FORM\";\r\nexport const CLEAR_DEC_FORM = \"CLEAR_DEC_FORM\";\r\nexport const SHOW_DEC_DIALOG = \"SHOW_DEC_DIALOG\";\r\nexport const HIDE_DEC_DIALOG = \"HIDE_DEC_DIALOG\";\r\nexport const SWITCH_DEC_DIALOG_TAB = \"SWITCH_DEC_DIALOG_TAB\";\r\nexport const RESET_DEC_DIALOG_TAB = \"RESET_DEC_DIALOG_TAB\";\r\nexport const SWITCH_ON_DEC_DIALOG_EDIT_MODE = \"SWITCH_ON_DEC_DIALOG_EDIT_MOD\";\r\nexport const SWITCH_OFF_DEC_DIALOG_EDIT_MODE = \"SWITCH_OFF_DEC_DIALOG_EDIT_MODE\";\r\nexport const UPDATE_VALIDATION_ERROR = \"UPDATE_VALIDATION_ERROR\";\r\nexport const REMOVE_VALIDATION_ERROR = \"REMOVE_VALIDATION_ERROR\";\r\n\r\nexport const updateDecoratorForm = payload => {\r\n    return {\r\n        type: UPDATE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearDecoratorForm = payload => {\r\n    return {\r\n        type: CLEAR_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const showDecoratorDialog = () => {\r\n    return {\r\n        type: SHOW_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const hideDecoratorDialog = () => {\r\n    return {\r\n        type: HIDE_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const switchDecDialogTab = payload => {\r\n    return {\r\n        type: SWITCH_DEC_DIALOG_TAB,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const resetDecDialogTab = () => {\r\n    return {\r\n        type: RESET_DEC_DIALOG_TAB,\r\n    };\r\n}\r\n\r\nexport const switchOnDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const updateValidationError = payload => {\r\n    return {\r\n        type: UPDATE_VALIDATION_ERROR,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const removeValidationError = () => {\r\n    return {\r\n        type: REMOVE_VALIDATION_ERROR,\r\n    };\r\n};\r\n\r\nexport const openDialog = dispatch => dec => {\r\n    if (dec) {\r\n        dispatch(updateDecoratorForm(dec));\r\n        dispatch(switchOnDecDialogEditMode());\r\n    } \r\n    dispatch(showDecoratorDialog());\r\n};\r\n\r\nexport const closeDialog = dispatch => () => {\r\n    dispatch(hideDecoratorDialog());\r\n    dispatch(switchOffDecDialogEditMode());\r\n    dispatch(removeValidationError());\r\n    dispatch(resetDecDialogTab());\r\n    dispatch(clearDecoratorForm());\r\n};\r\n\r\nexport const setValue = dispatch => propName => (e, secondArg = \"\") => {\r\n    const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const toggleValue = dispatch => propName => (e, secondArg) => {\r\n    const newValue = e ? e.target.checked : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const setBullet = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const newBullet = input.length > 1 ? input[input.length - 1] : input;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newBullet,\r\n    }));\r\n    return newBullet;\r\n};\r\n\r\nexport const setColor = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n    \r\n    const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                          ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                          : \"\" ;\r\n    \r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setNumber = dispatch => propName => (e, secondArg) => {\r\n    let input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                          ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                          : \"\" ;\r\n\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setShortCut = dispatch => (valuePropName, viewPropName) => e => {\r\n    const systemName = valuePropName.search(/mac/gi) !== -1 ? \"MacOS\" : \"Windows\";\r\n    const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n    if (shortCut && shortCut.deleteKey) {\r\n        setTimeout(() => {\r\n            dispatch(updateDecoratorForm({ \r\n                [valuePropName]: \"\" \r\n            }));\r\n            dispatch(updateDecoratorForm({ \r\n                [viewPropName]: \"\" \r\n            }));\r\n        }, 100);\r\n    } else if (shortCut) {\r\n        dispatch(updateDecoratorForm({ \r\n            [valuePropName]: shortCut.value \r\n        }));\r\n        dispatch(updateDecoratorForm({ \r\n            [viewPropName]: shortCut.stringValue \r\n        }));\r\n    }\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { getNamesSectionErrorState, focusInput } from \"../helpers\";\r\nimport { setValue, toggleValue, updateValidationError } from \"../actions\";\r\n\r\nclass NamesSection extends React.Component {\r\n    decKeyInputRef = React.createRef();\r\n    decNameEnInputRef = React.createRef();\r\n\r\n    focusOnEmptyField = () => {\r\n        if (!this.props.decKey) {\r\n            focusInput(this.decKeyInputRef);\r\n        } else if (!this.props.decNameEn) {\r\n            focusInput(this.decNameEnInputRef);\r\n        }\r\n    };\r\n\r\n    onGroupChange = (e, groupName, group) => {\r\n        if (group) {\r\n            this.props.changeGroupToCreate(null, group);\r\n        }\r\n        this.props.changeGroup(e, groupName);\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationError) {\r\n            this.focusOnEmptyField();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationError && !prevprops.validationError) {\r\n            this.focusOnEmptyField();\r\n        }\r\n        if (this.props.validationError && !getNamesSectionErrorState(this.props.formState)) {\r\n            this.props.updateValidationError({ namesSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            groupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,\r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            validationError,\r\n            decKey, changeDecKey,\r\n            group,\r\n            active, changeActive,\r\n            decNameEn, changeDecNameEn,\r\n            decNameDe, changeDecNameDe,\r\n            decNameRu, changeDecNameRu,\r\n            decNameFr, changeDecNameFr,\r\n            decNameFrCa, changeDecNameFrCa,\r\n            decNameEs, changeDecNameEs,\r\n        } = this.props;\r\n\r\n        const newGroupName = groupToCreate.nameEn;\r\n        const isEditMode = !!newGroupName;\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n                <LabelWithAsterisk>Key</LabelWithAsterisk>\r\n                <TextField \r\n                    value={decKey}\r\n                    onChange={changeDecKey}\r\n                    error={validationError && !decKey}\r\n                    inputRef={this.decKeyInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={group} \r\n                        onChange={this.onGroupChange}\r\n                        input={ <CustomInput /> }  \r\n                    >\r\n                        <option value=\"\">...</option>\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"0\">Text</option>\r\n                        <option value=\"1\">Heading</option>\r\n                        <option value=\"2\">Heading Heading Heading Heading</option>\r\n                    </NativeSelect>\r\n                    { !(isEditMode && group !== newGroupName) && (\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                    ) }\r\n                </div>\r\n\r\n                <span>Active</span>\r\n                <div className=\"unlabeledCheckbox\">\r\n                    <Checkbox\r\n                        checked={active}\r\n                        onChange={changeActive} \r\n                        color=\"primary\" \r\n                    />\r\n                </div>\r\n\r\n                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                <TextField \r\n                    value={decNameEn}\r\n                    onChange={changeDecNameEn}\r\n                    error={validationError && !decNameEn}\r\n                    inputRef={this.decNameEnInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Name DE</span>\r\n                <TextField \r\n                    value={decNameDe}\r\n                    onChange={changeDecNameDe}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Name RU</span>\r\n                <TextField \r\n                    value={decNameRu}\r\n                    onChange={changeDecNameRu}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Name FR<br/><span className=\"smallText\">France</span></span>\r\n                <TextField \r\n                    value={decNameFr}\r\n                    onChange={changeDecNameFr}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Name FR<br/><span className=\"smallText\">Canada</span></span>\r\n                <TextField \r\n                    value={decNameFrCa}\r\n                    onChange={changeDecNameFrCa}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Name ES</span>\r\n                <TextField \r\n                    value={decNameEs}\r\n                    onChange={changeDecNameEs}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <NewGroupDialog \r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onGroupChange}\r\n                    savedGroup={groupToCreate}\r\n                    groupType=\"decorators\"\r\n                    { ...{ \r\n                        isGroupDialogOpen,\r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return { \r\n        validationError: validationError.namesSection,\r\n        formState: form,\r\n        decKey: form.decKey,\r\n        group: form.group,\r\n        active: form.active,\r\n        decNameEn: form.decNameEn,\r\n        decNameDe: form.decNameDe,\r\n        decNameRu: form.decNameRu,\r\n        decNameFr: form.decNameFr,\r\n        decNameFrCa: form.decNameFrCa,\r\n        decNameEs: form.decNameEs,\r\n        groupToCreate: form.groupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeDecKey: setValue(dispatch)(\"decKey\"),\r\n        changeGroup: setValue(dispatch)(\"group\"),\r\n        changeGroupToCreate: setValue(dispatch)(\"groupToCreate\"),\r\n        changeActive: toggleValue(dispatch)(\"active\"),\r\n        changeDecNameEn: setValue(dispatch)(\"decNameEn\"),\r\n        changeDecNameDe: setValue(dispatch)(\"decNameDe\"),\r\n        changeDecNameRu: setValue(dispatch)(\"decNameRu\"),\r\n        changeDecNameFr: setValue(dispatch)(\"decNameFr\"),\r\n        changeDecNameFrCa: setValue(dispatch)(\"decNameFrCa\"),\r\n        changeDecNameEs: setValue(dispatch)(\"decNameEs\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(NamesSection)));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport { getWordExportSectionErrorState } from \"../helpers\";\r\nimport { setValue, toggleValue, updateValidationError } from \"../actions\";\r\n\r\nconst WordExportSection = props => {\r\n    const { \r\n        validationError, updateValidationError,\r\n        formState,\r\n        wordStyleName, changeWordStyleName,\r\n        softReturn, changeSoftReturn,\r\n    } = props;\r\n\r\n    if (validationError && !getWordExportSectionErrorState(formState)) {\r\n        updateValidationError({ wordExportSection: false });\r\n    }\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <LabelWithAsterisk>Style name in WORD</LabelWithAsterisk>\r\n            <TextField \r\n                value={wordStyleName}\r\n                onChange={changeWordStyleName}\r\n                error={validationError && !wordStyleName}\r\n                autoFocus={!wordStyleName}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n            \r\n            <span>Soft return</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={softReturn}\r\n                    onChange={changeSoftReturn}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return { \r\n        validationError: validationError.wordExportSection,\r\n        formState: form,\r\n        wordStyleName: form.wordStyleName, \r\n        softReturn: form.softReturn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeWordStyleName: setValue(dispatch)(\"wordStyleName\"),\r\n        changeSoftReturn: toggleValue(dispatch)(\"softReturn\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(WordExportSection));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst BackSpaceActionInput = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"175px\",\r\n      width: \"175px\",\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default BackSpaceActionInput;","import PositioningSection from \"./PositioningSection\";\r\nexport default PositioningSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport { backSpaceActions, decoratorsList } from \"../../constants\";\r\nimport BackSpaceActionInput from \"./BackSpaceActionInput\";\r\nimport { setValue } from \"../../actions\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst PositioningSection = props => {\r\n    const {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    } = props;\r\n\r\n    const backSpaceActionStyleSettingsState = backspaceActionWithContent === \"apply_other_pd\" ? \"shown\" : \"hidden\";\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={indentationalLevel}\r\n                    onChange={changeIndentationalLevel}\r\n                    id=\"r1c2\" \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <NativeSelect \r\n                        value={backspaceActionWithContent}\r\n                        onChange={changeBackspaceActionWithContent}\r\n                        id=\"r3c2\" \r\n                        input={ <BackSpaceActionInput /> }\r\n                    >\r\n                        {backSpaceActions.map(action => (\r\n                            <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                        ))}\r\n                    </NativeSelect>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${backSpaceActionStyleSettingsState}`}>\r\n                    <NativeSelect\r\n                        value={backspaceActionWithContentStyle}\r\n                        onChange={changeBackspaceActionWithContentStyle}\r\n                        input={ <CustomInput /> }\r\n                    >\r\n                        <option value=\"default\">Global Fallback Style</option>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"r4\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n\r\n            <span id=\"r5c1\">Style of next section</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect\r\n                    value={returnActionNextSection}\r\n                    onChange={changeReturnActionNextSection}\r\n                    id=\"r5c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n\r\n            <span id=\"r6c1\">In empty section change current style to</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect \r\n                    value={returnActionEmptySection}\r\n                    onChange={changeReturnActionEmptySection}\r\n                    id=\"r6c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <div id=\"r7\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n\r\n            <span id=\"r8c1\">TAB – change current style to</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect\r\n                    value={tabAction}\r\n                    onChange={changeTabAction}\r\n                    id=\"r8c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span id=\"r9c1\">SHIFT+TAB – change current style to</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect\r\n                    value={shiftTabAction}\r\n                    onChange={changeShiftTabAction} \r\n                    id=\"r9c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        indentationalLevel: form.indentationalLevel,\r\n        backspaceActionWithContent: form.backspaceActionWithContent,\r\n        backspaceActionWithContentStyle: form.backspaceActionWithContentStyle,\r\n        returnActionNextSection: form.returnActionNextSection,\r\n        returnActionEmptySection: form.returnActionEmptySection,\r\n        tabAction: form.tabAction,\r\n        shiftTabAction: form.shiftTabAction,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeIndentationalLevel: setValue(dispatch)(\"indentationalLevel\"),\r\n        changeBackspaceActionWithContent: setValue(dispatch)(\"backspaceActionWithContent\"),\r\n        changeBackspaceActionWithContentStyle: setValue(dispatch)(\"backspaceActionWithContentStyle\"),\r\n        changeBackspaceActionWithoutContent: setValue(dispatch)(\"backspaceActionWithoutContent\"),\r\n        changeBackspaceActionWithoutContentStyle: setValue(dispatch)(\"backspaceActionWithoutContentStyle\"),\r\n        changeReturnActionNextSection: setValue(dispatch)(\"returnActionNextSection\"),\r\n        changeReturnActionEmptySection: setValue(dispatch)(\"returnActionEmptySectionStyle\"),\r\n        changeTabAction: setValue(dispatch)(\"tabAction\"),\r\n        changeShiftTabAction: setValue(dispatch)(\"shiftTabAction\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(PositioningSection));","import { getOffset, getCorrectColor, getPreviewFont } from \"../../helpers\";\r\nimport { alignmentsMap, DEFAULT_FONT_SIZE, DEFAULT_LINE_SPACING } from \"../../constants\";\r\n\r\nexport const generatePreviewStyle = formState => {\r\n    const {\r\n        font,\r\n        customFont,\r\n        alignment,\r\n        fontSize,\r\n        fontColor,\r\n        bold,\r\n        italic,\r\n        underlined,\r\n        stroke,\r\n        textTransform,\r\n        verticalAlign,\r\n        marginTop,\r\n        marginBottom,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        customLineSpacing,\r\n        wordSpacing,   \r\n        fillingColor,\r\n        fillingConnectToPrevious,\r\n    } = formState;\r\n    \r\n    const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n    const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n    const previewAdditionalFillingColor = fillingConnectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n    const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n    const previewMarginLeft = `${!otherRowsIndent ? 0 : (otherRowsIndent >= 6 ? 6 : otherRowsIndent)}cm`;\r\n    const previewTextIndent = `${!indentsDifference ? 0 : (indentsDifference >= 6 ? 6 : indentsDifference)}cm`;\r\n    const previewLineSpacing = lineSpacing !== \"custom\" ? lineSpacing : (customLineSpacing || DEFAULT_LINE_SPACING);\r\n\r\n    const previewStyle = {\r\n        fontSize: !fontSize ? `${DEFAULT_FONT_SIZE}pt` : `${fontSize <= 120 ? fontSize : 120}pt`,\r\n        color: `#${previewFontColor}`,\r\n        fontFamily: getPreviewFont(font, customFont),\r\n        alignItems: alignmentsMap[alignment],\r\n        textAlign: alignment,\r\n        fontWeight: bold ? \"bold\" : \"normal\",\r\n        fontStyle: italic ? \"italic\" : \"normal\",\r\n        textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n        verticalAlign,\r\n        textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n        fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n        backgroundColor: `#${previewFillingColor}`,\r\n        backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        marginLeft: previewMarginLeft,\r\n        textIndent: previewTextIndent,\r\n        wordSpacing: `${wordSpacing || 0}pt`,\r\n        lineHeight: previewLineSpacing,\r\n        marginTop: `${parseFloat(marginTop) + getOffset(verticalAlign, fontSize)}pt`,\r\n        marginBottom: `${parseFloat(marginBottom) - getOffset(verticalAlign, fontSize)}pt`,\r\n        outline: \"none\",\r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport const generateSideNumberStyle = formState => {\r\n    const { \r\n        listType,\r\n        suffixDistance,\r\n        sideNumber,\r\n        sideNumberFont,\r\n        customSideNumberFont,\r\n        sideNumberAlignment,\r\n        sideNumberFontSize,\r\n        sideNumberFontColor,\r\n        sideNumberFillingColor,\r\n        sideNumberWidth,\r\n        sideNumberRadius,\r\n    } = formState;\r\n\r\n    const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"f5f5f5\");\r\n    const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n    const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n        fontFamily: getPreviewFont(sideNumberFont, customSideNumberFont),\r\n        textAlign: sideNumberAlignment,\r\n        fontSize: !sideNumberFontSize ? `${DEFAULT_FONT_SIZE}pt` : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n        color: `#${previewSideNumberFontColor}`,\r\n        backgroundColor: `#${previewSideNumberFillingColor}`,\r\n        minWidth: `${!sideNumberWidth ? 0 : (sideNumberWidth < 150 ? sideNumberWidth : 150)}pt`,\r\n        borderRadius: `${sideNumberRadius || 0}pt`,\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n    };\r\n\r\n    return sideNumberStyle;\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { generatePreviewStyle, generateSideNumberStyle } from \"./generators\";\r\nimport { getListChars } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = props => {\r\n    const { \r\n        formState,\r\n        prefix, \r\n        suffix, \r\n        suffixDistance,\r\n        listType,\r\n        listItem, \r\n        unicodeChar,\r\n        numberingStyle,\r\n        sideNumber,\r\n    } = props;\r\n\r\n    const isOrderedList = listType === \"ordered\";\r\n\r\n    const listChars = getListChars({ \r\n        isOrderedList, \r\n        numberingStyle, \r\n        listItem, \r\n        unicodeChar \r\n    });\r\n\r\n    const listItemBeginnings = listChars.map(listChar => {\r\n        return (`${prefix}${listChar}${suffix}`);\r\n    });\r\n\r\n    const previewStyle = generatePreviewStyle(formState);\r\n    const sideNumberStyle = isOrderedList && sideNumber ? generateSideNumberStyle(formState) : {};\r\n    const listItemBeginningStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className=\"demonstrationElement\">\r\n                    <div\r\n                        className=\"demonstrationElement-text\"\r\n                        style={previewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n        prefix: form.prefix, \r\n        suffix: form.suffix,\r\n        suffixDistance: form.suffixDistance,\r\n        listType: form.listType,\r\n        listItem: form.listItem, \r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        sideNumber: form.sideNumber,\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps)(ListPreview));","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.PureComponent {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, defaultColorCode, required, bottomAligned } = this.props;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n        const colorPickerClassName = `colorPicker${ bottomAligned ? \" colorPicker_bottomAligned\" : \"\"}`;\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        if (defaultColorCode) {\r\n                            selectAllOnClick(defaultColorCode)(e);\r\n                        }\r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={this.showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className={colorPickerClassName}>\r\n                        <div className=\"colorPicker-chromeBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={this.colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={this.hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport CustomInput from \"./CustomInput\";\r\nimport { fontSet, DEFAULT_FONT } from \"../constants\";\r\nimport { isFontAvailable, focusInput, changeAndScroll } from \"../helpers\";\r\n\r\nclass FontSelectFields extends React.PureComponent {\r\n    customFontInputRef = React.createRef();\r\n\r\n    onFontChange = e => {\r\n        this.props.changeFont(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customFontInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { font, customFont, changeCustomFont } = this.props;\r\n        const availableFonts = fontSet.filter(fontName => fontName === font || isFontAvailable(fontName));\r\n        const optionalFieldState = font === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        return (\r\n            <>\r\n                <span >Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeAndScroll(this.onFontChange, 500)}\r\n                >\r\n                    <option value={DEFAULT_FONT}>Helvetica</option>\r\n                    { availableFonts.map(fontName => <option value={fontName} key={fontName}>{fontName}</option>) }\r\n                    <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                </NativeSelect>\r\n    \r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <span></span>\r\n                </div>\r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <TextField \r\n                        value={customFont}\r\n                        onChange={changeCustomFont}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        placeholder=\"Enter the font name\"\r\n                        inputRef={this.customFontInputRef}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FontSelectFields;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport ListPreview from \"../../common/Preview/ListPreview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport LabelWithAsterisk from \"../../common/LabelWithAsterisk\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport { \r\n    listStyleTypes, \r\n    bulletNamesMap, \r\n    HOLDER, \r\n    DEFAULT_FONT_SIZE,\r\n    DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    DEFAULT_SIDE_NUMBER_WIDTH,\r\n    DEFAULT_SIDE_NUMBER_RADIUS,\r\n } from \"../../constants\";\r\nimport { \r\n    updateValidationError,\r\n    setValue,\r\n    toggleValue,\r\n    setNumber,\r\n    setColor,\r\n    setBullet,\r\n} from \"../../actions\";\r\nimport { \r\n    selectAllOnClick, \r\n    changeAndScroll, \r\n    getListSectionErrorState,\r\n    focusInput,\r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n} from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ListSection extends React.Component {\r\n    listNameInputRef = React.createRef();\r\n    unicodeCharInputRef = React.createRef();\r\n\r\n    onIsListChange = e => {\r\n        const { listName } = this.props;\r\n        if (e.target.checked) {\r\n            if (listName === HOLDER) {\r\n                this.props.changeListName(null, \"\");\r\n            }\r\n        } else if (listName === \"\") {\r\n            setTimeout(() => this.props.changeListName(null, HOLDER), 200);\r\n        }\r\n        this.props.changeIsList(e);\r\n\r\n        if (e.target.checked && listName === HOLDER) {\r\n            focusInput(this.listNameInputRef);\r\n        }       \r\n    };\r\n\r\n    onListTypeChange = e => {\r\n        const { suffix } = this.props;\r\n        const { value } = e.target;\r\n        this.props.changeListType(null, value);\r\n        if (value === \"ordered\" && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        } else if (value === \"unordered\" && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        }\r\n    };\r\n\r\n    onListItemChange = e => {\r\n        this.props.changeListItem(e);\r\n        if (e.target.value === \"custom\" && !this.props.unicodeChar) {\r\n            focusInput(this.unicodeCharInputRef);\r\n        }\r\n    };\r\n\r\n    onUnicodeNumberChange = e => {\r\n        const newUnicodeNumber = this.props.changeUnicodeNumber(e);\r\n        const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n        this.props.changeUnicodeChar(null, newUnicodeChar);\r\n    };\r\n    \r\n    onUnicodeCharChange = e => {\r\n        const newUnicodeChar = this.props.changeUnicodeChar(e);\r\n        const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n        this.props.changeUnicodeNumber(null, newUnicodeNumber);\r\n    };\r\n\r\n    onSideNumberChange = e => {\r\n        const { suffix } = this.props;\r\n        this.props.changeSideNumber(e);\r\n        if (e.target.checked && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        } else if (!e.target.checked && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationError) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationError && !prevprops.validationError) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n        if (this.props.validationError && !getListSectionErrorState(this.props.formState)) {\r\n            this.props.updateValidationError({ listSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            validationError,\r\n            listPreviewProps,\r\n            isList,\r\n            listName, changeListName,\r\n            orderLevel, changeOrderLevel,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listType,\r\n            listItem,\r\n            unicodeNumber,\r\n            unicodeChar,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changeIncludePreviousFrom,\r\n            sideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            customSideNumberFont, changeCustomSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberWidth, changeSideNumberWidth,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n        } = this.props;\r\n        \r\n        const mainListSettingsState = isList ? \"shown\" : \"hidden\";\r\n        const unorderedListSettingsState = (isList && listType === \"unordered\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState = (isList && listType === \"unordered\" && listItem === \"custom\") ? \"shown\" : \"hidden\";\r\n        const orderedListSettingsState = (isList && listType === \"ordered\") ? \"shown\" : \"hidden\";\r\n        const sideNumberSettingsState = (isList && listType === \"ordered\" && sideNumber) ? \"shown\" : \"hidden\";\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"dialogGrid dialogGrid_2cols\">\r\n                    <div>\r\n                        <div>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                                <div className=\"listSection-firstSpan\">\r\n                                    <span>Is it a list?</span>\r\n                                </div>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={isList} \r\n                                        onChange={changeAndScroll(this.onIsListChange)} \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${mainListSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth optionalSettings\">\r\n                                    <LabelWithAsterisk>List name</LabelWithAsterisk>\r\n                                    <TextField\r\n                                        value={listName}\r\n                                        onChange={changeListName} \r\n                                        error={validationError && !listName}\r\n                                        inputRef={this.listNameInputRef}\r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Order level</span>\r\n                                    <div>\r\n                                        <NativeSelect\r\n                                            value={orderLevel}\r\n                                            onChange={changeOrderLevel}\r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"\">...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                    </div>\r\n    \r\n                                    <span>Prefix</span>\r\n                                    <TextField\r\n                                        value={prefix}\r\n                                        onChange={changePrefix} \r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Suffix</span>\r\n                                    <TextField\r\n                                        value={suffix}\r\n                                        onChange={changeSuffix} \r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                        onClick={selectAllOnClick(\".\")}\r\n                                    />\r\n    \r\n                                    <span>Suffix distance</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <NativeSelect\r\n                                            value={suffixDistance}\r\n                                            onChange={changeSuffixDistance} \r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"0.25\">0.25</option>\r\n                                            <option value=\"0.5\">0.5</option>\r\n                                            <option value=\"0.75\">0.75</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"1.25\">1.25</option>\r\n                                            <option value=\"1.5\">1.5</option>\r\n                                            <option value=\"1.75\">1.75</option>\r\n                                            <option value=\"2\">2</option>\r\n                                        </NativeSelect>\r\n                                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                                    </div>\r\n    \r\n                                    <span>Magic Tabs</span>\r\n                                    <div className=\"unlabeledCheckbox\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={magicTabs} \r\n                                            onChange={changeMagicTabs} \r\n                                        />\r\n                                    </div>\r\n    \r\n                                    <span>Type of list</span>\r\n                                    <RadioGroup \r\n                                        value={listType} \r\n                                        onChange={changeAndScroll(this.onListTypeChange)}\r\n                                        row\r\n                                    >\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"unordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Unordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"ordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Ordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                    </RadioGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${orderedListSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {listStyleTypes.map(style => (\r\n                                            <option value={style.value} key={style.value}>{style.name}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changeIncludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Side number</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={changeAndScroll(this.onSideNumberChange)}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                            </div> \r\n    \r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${sideNumberSettingsState}`}>\r\n                                <div className=\"flexibleGrid listTypeSettings\">\r\n                                    <FontSelectFields \r\n                                        font={sideNumberFont}\r\n                                        changeFont={changeSideNumberFont}\r\n                                        customFont={customSideNumberFont}\r\n                                        changeCustomFont={changeCustomSideNumberFont}\r\n                                    />\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFontColor} \r\n                                        changeColorCode={changeSideNumberFontColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FONT_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFillingColor} \r\n                                        changeColorCode={changeSideNumberFillingColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FILLING_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n    \r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_WIDTH)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>    \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_RADIUS)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>    \r\n                                </div> \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className={`listPreviewBox optionalSettings optionalSettings_${mainListSettingsState}`}>\r\n                        <ListPreview {...listPreviewProps} />\r\n                    </div>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${unorderedListSettingsState}`}>\r\n                    <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listSection-firstSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={this.onListItemChange} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Object.entries(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"custom\"} className=\"highlightedOption\">Custom</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${customListItemSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Unicode number</span>\r\n                                    <div>\r\n                                        <TextField  \r\n                                            value={unicodeNumber}\r\n                                            onChange={this.onUnicodeNumberChange}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"unicodeInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Char</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeChar}\r\n                                            onChange={this.onUnicodeCharChange}\r\n                                            onClick={selectAllOnClick()}\r\n                                            inputRef={this.unicodeCharInputRef}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"bulletInput\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return {\r\n        validationError: validationError.listSection,\r\n        formState: form,\r\n        isList: form.isList,\r\n        listName: form.listName, \r\n        orderLevel: form.orderLevel,\r\n        prefix: form.prefix,\r\n        suffix: form.suffix,\r\n        suffixDistance: form.suffixDistance,\r\n        magicTabs: form.magicTabs,\r\n        listType: form.listType,\r\n        listItem: form.listItem,\r\n        unicodeNumber: form.unicodeNumber,\r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        continueNumbering: form.continueNumbering,\r\n        allowRestartNumbering: form.allowRestartNumbering,\r\n        includePreviousFrom: form.includePreviousFrom,\r\n        sideNumber: form.sideNumber,\r\n        sideNumberFont: form.sideNumberFont,\r\n        customSideNumberFont: form.customSideNumberFont,\r\n        sideNumberAlignment: form.sideNumberAlignment,\r\n        sideNumberFontSize: form.sideNumberFontSize,\r\n        sideNumberFontColor: form.sideNumberFontColor,\r\n        sideNumberFillingColor: form.sideNumberFillingColor,\r\n        sideNumberWidth: form.sideNumberWidth,\r\n        sideNumberRadius: form.sideNumberRadius,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeListName: setValue(dispatch)(\"listName\"),\r\n        changeIsList: toggleValue(dispatch)(\"isList\"),\r\n        changeOrderLevel: setValue(dispatch)(\"orderLevel\"),\r\n        changePrefix: setValue(dispatch)(\"prefix\"),\r\n        changeSuffix: setValue(dispatch)(\"suffix\"),\r\n        changeSuffixDistance: setValue(dispatch)(\"suffixDistance\"),\r\n        changeMagicTabs: toggleValue(dispatch)(\"magicTabs\"),\r\n        changeListType: setValue(dispatch)(\"listType\"),\r\n        changeListItem: setValue(dispatch)(\"listItem\"),\r\n        changeUnicodeNumber: setColor(dispatch)(\"unicodeNumber\"),\r\n        changeUnicodeChar: setBullet(dispatch)(\"unicodeChar\"),\r\n        changeNumberingStyle: setValue(dispatch)(\"numberingStyle\"),\r\n        changeContinueNumbering: toggleValue(dispatch)(\"continueNumbering\"),\r\n        changeAllowRestartNumbering: toggleValue(dispatch)(\"allowRestartNumbering\"),\r\n        changeIncludePreviousFrom: setValue(dispatch)(\"includePreviousFrom\"),\r\n        changeSideNumber: toggleValue(dispatch)(\"sideNumber\"),\r\n        changeSideNumberFont: setValue(dispatch)(\"sideNumberFont\"),\r\n        changeCustomSideNumberFont: setValue(dispatch)(\"customSideNumberFont\"),\r\n        changeSideNumberAlignment: setValue(dispatch)(\"sideNumberAlignment\"),\r\n        changeSideNumberFontSize: setNumber(dispatch)(\"sideNumberFontSize\"),\r\n        changeSideNumberFontColor: setColor(dispatch)(\"sideNumberFontColor\"),\r\n        changeSideNumberFillingColor: setColor(dispatch)(\"sideNumberFillingColor\"),\r\n        changeSideNumberWidth: setNumber(dispatch)(\"sideNumberWidth\"),\r\n        changeSideNumberRadius: setNumber(dispatch)(\"sideNumberRadius\"),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListSection);","import ListSection from \"./ListSection\";\r\nexport default ListSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { setValue } from \"../actions\";\r\n\r\nclass ReferencingSection extends React.Component {\r\n    onXrefChange = (e, xrefName, xref) => {\r\n        if (xref) {\r\n            this.props.changeReferenceGroupToCreate(null, xref);\r\n        }\r\n        this.props.changeReferenceGroup(e, xrefName);\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            referenceGroupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,  \r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            referenceGroup,\r\n        } = this.props;\r\n        \r\n        const newGroupName = referenceGroupToCreate.nameEn || referenceGroupToCreate.groupKey;\r\n        const isEditMode = !!newGroupName;\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Reference group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInput /> } \r\n                        value={referenceGroup} \r\n                        onChange={this.onXrefChange} \r\n                    >\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"\">none</option>\r\n                        <option value=\"0\">Reference group 1</option>\r\n                        <option value=\"1\">Reference group 2</option>\r\n                    </NativeSelect>\r\n                    {\r\n                        !(isEditMode && referenceGroup !== newGroupName) &&\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                     }\r\n                </div>\r\n                <NewGroupDialog\r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onXrefChange}\r\n                    savedGroup={referenceGroupToCreate}\r\n                    groupType=\"xref\" \r\n                    { ...{ \r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        referenceGroup: form.referenceGroup,\r\n        referenceGroupToCreate: form.referenceGroupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeReferenceGroup: setValue(dispatch)(\"referenceGroup\"),\r\n        changeReferenceGroupToCreate: setValue(dispatch)(\"referenceGroupToCreate\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(ReferencingSection)));","import * as React from \"react\";\r\nimport deepEqual from \"fast-deep-equal\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \");\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === \"function\" ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== \"function\" ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || \"div\", Object.assign({}, props, { ref: typeof innerRef === \"function\" ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContentEditable from \"../ContentEditable\";\r\nimport { generatePreviewStyle } from \"./generators\";\r\nimport { setValue } from \"../../actions\";\r\nimport { selectAllEditableContent, getUnstyledText } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nclass Preview extends React.Component {\r\n    onPreviewTextChange = e => {\r\n        const { value } = e.target;\r\n        if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n            this.props.changePreviewText(null, getUnstyledText(value));\r\n        } else {\r\n            this.props.changePreviewText(null, `<div><br></div>`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const previewStyle = generatePreviewStyle(this.props.formState);\r\n        const { previewText } = this.props;\r\n    \r\n        return (\r\n            <div className=\"preview\">\r\n                <span className=\"preview-title\">Preview</span>\r\n                <div \r\n                    className=\"preview-content preview-content_withPointer\" \r\n                    onClick={selectAllEditableContent(\"demonstrationElement\")}\r\n                >\r\n                    <div className=\"demonstrationElement\">\r\n                        <ContentEditable\r\n                            className=\"demonstrationElement-text\"\r\n                            onChange={this.onPreviewTextChange} \r\n                            html={previewText}\r\n                            style={previewStyle}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changePreviewText: setValue(dispatch)(\"previewText\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(Preview));","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport Preview from \"../../common/Preview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport {  setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { DEFAULT_FONT_SIZE, DEFAULT_FONT_COLOR, DEFAULT_FONT_COLOR_NAME } from \"../../constants\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = props => {\r\n    const { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColorName, changeFontColorName,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign, \r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"flexibleGrid\">\r\n                <FontSelectFields { ...{ font, changeFont, customFont, changeCustomFont }} />\r\n                \r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                    value={fontColorName}\r\n                    onChange={changeFontColorName}\r\n                    onClick={selectAllOnClick(DEFAULT_FONT_COLOR_NAME)}\r\n                />\r\n\r\n                <span>Font color HEX</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    defaultColorCode={DEFAULT_FONT_COLOR}\r\n                    required\r\n                />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_topIndented\">\r\n            <span>Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Sub/Superscript</span>\r\n            <div>\r\n                <NativeSelect \r\n                value={verticalAlign} \r\n                onChange={changeVerticalAlign}\r\n                    input={ <CustomInput /> } \r\n                >\r\n                    <option value=\"baseline\">None</option>\r\n                    <option value=\"sub\">Subscript</option>\r\n                    <option value=\"super\">Superscript</option>\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        font: form.font,\r\n        customFont: form.customFont,\r\n        alignment: form.alignment,\r\n        fontSize: form.fontSize,\r\n        fontColorName: form.fontColorName,\r\n        fontColor: form.fontColor,\r\n        bold: form.bold,\r\n        italic: form.italic,\r\n        underlined: form.underlined,\r\n        stroke: form.stroke,\r\n        textTransform: form.textTransform,\r\n        verticalAlign: form.verticalAlign,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeFont: setValue(dispatch)(\"font\"),\r\n        changeCustomFont: setValue(dispatch)(\"customFont\"),\r\n        changeAlignment: setValue(dispatch)(\"alignment\"),\r\n        changeFontSize: setNumber(dispatch)(\"fontSize\"),\r\n        changeFontColorName: setValue(dispatch)(\"fontColorName\"),\r\n        changeFontColor: setColor(dispatch)(\"fontColor\"),\r\n        changeBold: toggleValue(dispatch)(\"bold\"),\r\n        changeItalic: toggleValue(dispatch)(\"italic\"),\r\n        changeUnderlined: toggleValue(dispatch)(\"underlined\"),\r\n        changeStroke: toggleValue(dispatch)(\"stroke\"),\r\n        changeTextTransform: setValue(dispatch)(\"textTransform\"),\r\n        changeVerticalAlign: setValue(dispatch)(\"verticalAlign\"),\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TypographySection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport Preview from \"../common/Preview\";\r\nimport { setValue, setNumber } from \"../actions\";\r\nimport { DEFAULT_MARGIN, DEFAULT_WORD_SPACING } from \"../constants\";\r\nimport { selectAllOnClick, focusInput, changeAndScroll } from \"../helpers\";\r\n\r\nclass DistancesSection extends React.Component {\r\n    customLineSpacingInputRef = React.createRef();\r\n\r\n    onLineSpacingChange = e => {\r\n        this.props.changeLineSpacing(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customLineSpacingInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            previewProps,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            firstRowIndent, changeFirstRowIndent,\r\n            otherRowsIndent, changeOtherRowsIndent,\r\n            lineSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n            wordSpacing, changeWordSpacing,\r\n        } = this.props;\r\n\r\n        const optionalFieldState = lineSpacing === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div className=\"flexibleGrid\">\r\n                    <span>Margin top</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginTop}\r\n                            onChange={changeMarginTop}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <span>Margin bottom</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginBottom}\r\n                            onChange={changeMarginBottom}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <span>1st row indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={firstRowIndent}\r\n                            onChange={changeFirstRowIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Other rows indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={otherRowsIndent}\r\n                            onChange={changeOtherRowsIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Line spacing</span>\r\n                    <div>\r\n                        <NativeSelect \r\n                            input={ <CustomInputShort /> } \r\n                            value={lineSpacing} \r\n                            onChange={changeAndScroll(this.onLineSpacingChange, 500)} \r\n                        >\r\n                            <option value=\"1.0\">1.0</option>\r\n                            <option value=\"1.15\">1.15</option>\r\n                            <option value=\"1.5\">1.5</option>\r\n                            <option value=\"2.0\">2.0</option>\r\n                            <option value=\"2.5\">2.5</option>\r\n                            <option value=\"3.0\">3.0</option>\r\n                            <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                        </NativeSelect> \r\n                    </div>\r\n\r\n                    <div className={`optionalField ${optionalFieldState}`}>\r\n                    </div>\r\n                    <div className={`optionalField ${optionalFieldState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                            placeholder=\"Your value\"\r\n                            inputRef={this.customLineSpacingInputRef}\r\n                        />                                            \r\n                    </div>\r\n                        \r\n                    <span>Word spacing</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={wordSpacing}\r\n                            onChange={changeWordSpacing}\r\n                            onClick={selectAllOnClick(DEFAULT_WORD_SPACING)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        marginTop: form.marginTop,\r\n        marginBottom: form.marginBottom,\r\n        firstRowIndent: form.firstRowIndent,\r\n        otherRowsIndent: form.otherRowsIndent,\r\n        lineSpacing: form.lineSpacing,\r\n        customLineSpacing: form.customLineSpacing,\r\n        wordSpacing: form.wordSpacing,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeMarginBottom: setNumber(dispatch)(\"marginBottom\"),\r\n        changeFirstRowIndent: setNumber(dispatch)(\"firstRowIndent\"),\r\n        changeOtherRowsIndent: setNumber(dispatch)(\"otherRowsIndent\"),\r\n        changeLineSpacing: setValue(dispatch)(\"lineSpacing\"),\r\n        changeCustomLineSpacing: setNumber(dispatch)(\"customLineSpacing\"),\r\n        changeWordSpacing: setNumber(dispatch)(\"wordSpacing\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(DistancesSection));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default FrameTypeInput;","import { getCorrectColor } from \"../../helpers\";\r\n\r\nconst generateBorderPreviewStyle = formState => {\r\n    const { \r\n        leftBorder,\r\n        rightBorder,\r\n        topBorder,\r\n        bottomBorder,\r\n        borderColor,\r\n        borderThickness,\r\n        borderType,\r\n    } = formState;\r\n\r\n    const correctColor = getCorrectColor(borderColor);\r\n    const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n    const previewStyle = {\r\n        borderLeft: leftBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginLeft: leftBorder ? \"0\" : previewBorderWidth, \r\n        borderRight: rightBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginRight: rightBorder ? \"0\" : previewBorderWidth, \r\n        borderTop: topBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginTop: topBorder ? \"0\" : previewBorderWidth, \r\n        borderBottom: bottomBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginBottom: bottomBorder ? \"0\" : previewBorderWidth, \r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport default generateBorderPreviewStyle;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport FrameTypeInput from \"../../sections/FramesSection/FrameTypeInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport generateBorderPreviewStyle from \"./generateBorderPreviewStyle\";\r\nimport { setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\nimport { \r\n    DEFAULT_BORDER_COLOR, \r\n    DEFAULT_BORDER_COLOR_NAME,\r\n    DEFAULT_BORDER_THICKNESS,\r\n} from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass FramesSection extends React.Component {\r\n    onBorderTypeChange = e => {\r\n        this.props.changeBorderType(e);\r\n        if (e.target.value === \"double\" && this.props.borderThickness === \"2\") {\r\n            this.props.changeBorderThickness(null, \"3\");\r\n        } else if (e.target.value !== \"double\" && this.props.borderThickness === \"3\") {\r\n            this.props.changeBorderThickness(null, \"2\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            formState,\r\n            leftBorder, changeLeftBorder, \r\n            rightBorder, changeRightBorder,\r\n            topBorder, changeTopBorder, \r\n            bottomBorder, changeBottomBorder, \r\n            borderColorName, changeBorderColorName,\r\n            borderColor, changeBorderColor,\r\n            borderThickness, changeBorderThickness,\r\n            borderType,\r\n            borderConnectToPrevious, changeBorderConnectToPrevious,\r\n         } = this.props;\r\n\r\n        const previewStyle = generateBorderPreviewStyle(formState)\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div className=\"directionControlsContainer\">\r\n                    <div className=\"directionsControls\" style={previewStyle}>\r\n                        <span className=\"directionLabel\">Left</span>\r\n                        <div className=\"centralColumn\">\r\n                            <span className=\"directionLabel\">Top</span>\r\n                            <div className=\"checkboxesKit crossGrid\">\r\n                                <div id=\"r1\" className=\"gridCell\">\r\n                                    <Checkbox \r\n                                        color=\"primary\"\r\n                                        checked={topBorder}  \r\n                                        onChange={changeTopBorder}\r\n                                    />\r\n                                </div>\r\n                                <div id=\"r2c1\" className=\"gridCell\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={leftBorder}  \r\n                                        onChange={changeLeftBorder}\r\n                                    />\r\n                                </div>\r\n                                <div id=\"r2c2\" className=\"gridCell\">\r\n                                </div>\r\n                                <div id=\"r2c3\" className=\"gridCell\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={rightBorder}  \r\n                                        onChange={changeRightBorder}\r\n                                    />\r\n                                </div>\r\n                                <div id=\"r3\" className=\"gridCell\">\r\n                                    <Checkbox \r\n                                        color=\"primary\"\r\n                                        checked={bottomBorder}  \r\n                                        onChange={changeBottomBorder}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <span className=\"directionLabel\">Bottom</span>\r\n                        </div>\r\n                        <span className=\"directionLabel\">Right</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"dialogGrid dialogGrid_2cols\">\r\n                    <span>Frame color name</span>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        value={borderColorName}\r\n                        onChange={changeBorderColorName}\r\n                        onClick={selectAllOnClick(DEFAULT_BORDER_COLOR_NAME)}\r\n                    />\r\n    \r\n                    <span>Frame color HEX</span>\r\n                    <ColorField \r\n                        colorCode={borderColor} \r\n                        changeColorCode={changeBorderColor}\r\n                        defaultColorCode={DEFAULT_BORDER_COLOR}\r\n                        required\r\n                    />\r\n    \r\n                    <span>Frame thickness</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={borderThickness}\r\n                            onChange={changeBorderThickness}\r\n                            onClick={selectAllOnClick(DEFAULT_BORDER_THICKNESS)}\r\n                         />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div>                        \r\n    \r\n                    <span>Type of frame</span>\r\n                    <div >\r\n                        <Select\r\n                          input={<FrameTypeInput />}\r\n                          value={borderType}\r\n                          onChange={this.onBorderTypeChange}\r\n                        >\r\n                            <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                            <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                            <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                            <MenuItem value=\"double\">══════</MenuItem>              \r\n                        </Select>\r\n                    </div>\r\n    \r\n                    <span>Connect to previous</span>\r\n                    <div className=\"unlabeledCheckbox\">\r\n                        <Checkbox \r\n                            checked={borderConnectToPrevious}\r\n                            onChange={changeBorderConnectToPrevious}\r\n                            color=\"primary\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        leftBorder: form.leftBorder,\r\n        rightBorder: form.rightBorder,\r\n        topBorder: form.topBorder,\r\n        bottomBorder: form.bottomBorder,\r\n        borderColorName: form.borderColorName,\r\n        borderColor: form.borderColor,\r\n        borderThickness: form.borderThickness,\r\n        borderType: form.borderType,\r\n        borderConnectToPrevious: form.borderConnectToPrevious,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeLeftBorder: toggleValue(dispatch)(\"leftBorder\"),\r\n        changeRightBorder: toggleValue(dispatch)(\"rightBorder\"),\r\n        changeTopBorder: toggleValue(dispatch)(\"topBorder\"),\r\n        changeBottomBorder: toggleValue(dispatch)(\"bottomBorder\"),\r\n        changeBorderColorName: setValue(dispatch)(\"borderColorName\"),\r\n        changeBorderColor: setColor(dispatch)(\"borderColor\"),\r\n        changeBorderThickness: setNumber(dispatch)(\"borderThickness\"),\r\n        changeBorderType: setValue(dispatch)(\"borderType\"),\r\n        changeBorderConnectToPrevious: toggleValue(dispatch)(\"borderConnectToPrevious\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FramesSection));","import FramesSection from \"./FramesSection\";\r\nexport default FramesSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport Preview from \"../common/Preview\";\r\nimport ColorField from \"../common/ColorField\";\r\nimport { setValue, toggleValue, setColor } from \"../actions\";\r\n\r\nconst  FillingSection = props => {\r\n    const { \r\n        previewProps,\r\n        fillingColorName, changeFillingColorName,\r\n        fillingColor, changeFillingColor,\r\n        fillingConnectToPrevious, changefillingConnectToPrevious,\r\n    } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color name</span>\r\n                <div>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        className=\"mediumTextField\" \r\n                        value={fillingColorName}\r\n                        onChange={changeFillingColorName}\r\n                    />\r\n                </div>\r\n\r\n                <span>Filling color HEX</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n\r\n                <span>Connect to previous</span>\r\n                <div className=\"unlabeledCheckbox\">\r\n                    <Checkbox \r\n                        color=\"primary\" \r\n                        checked={fillingConnectToPrevious} \r\n                        onChange={changefillingConnectToPrevious} \r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        fillingColorName: form.fillingColorName,\r\n        fillingColor: form.fillingColor,\r\n        fillingConnectToPrevious: form.fillingConnectToPrevious,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeFillingColorName: setValue(dispatch)(\"fillingColorName\"),\r\n        changeFillingColor: setColor(dispatch)(\"fillingColor\"),\r\n        changefillingConnectToPrevious: toggleValue(dispatch)(\"fillingConnectToPrevious\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FillingSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport { setValue } from \"../actions\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        tocIndentation: form.tocIndentation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeTocIndentation: setValue(dispatch)(\"tocIndentation\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TocSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { setShortCut } from \"../actions\";\r\n\r\nconst ShortCutSection = ({ shortCutWinView, shortCutMacView, changeShortCutWin, changeShortCutMac }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        shortCutWinView: form.shortCutWinView,\r\n        shortCutMacView: form.shortCutMacView,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeShortCutWin: setShortCut(dispatch)(\"shortCutWin\", \"shortCutWinView\"),\r\n        changeShortCutMac: setShortCut(dispatch)(\"shortCutMac\", \"shortCutMacView\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ShortCutSection));","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomErrorTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n      textDecoration: \"red underline\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n        textDecoration: \"indianred underline\",\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomErrorTab;","import React from \"react\";\r\n\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nclass CustomTabs extends React.Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        return nextProps.value !== this.props.value;\r\n    }\r\n\r\n    render() {\r\n        return (<Tabs {...this.props}/>);\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n    }\r\n};\r\n\r\nexport default withStyles(styles)(CustomTabs);","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        \"&:after\": {\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: \"1280px\",\r\n        maxHeight: \"850px\",\r\n        minHeight: \"550px\",\r\n        width: \"calc(100% - 96px)\",\r\n        height: \"calc(100% - 96px)\",\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        border: \"none\",\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: \"middle\",\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","export const SAVE_DEC_FORM = \"SAVE_DEC_FORM\";\r\nexport const CLEAR_SAVED_DEC_FORM = \"CLEAR_SAVED_DEC_FORM\";\r\n\r\nexport const saveDecoratorForm = payload => {\r\n    return {\r\n        type: SAVE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearSavedDecoratorForm = () => {\r\n    return {\r\n        type: CLEAR_SAVED_DEC_FORM,\r\n    };\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport NamesSection from \"./sections/NamesSection\";\r\nimport WordExportSection from \"./sections/WordExportSection\";\r\nimport PositioningSection from \"./sections/PositioningSection\";\r\nimport ListSection from \"./sections/ListSection\";\r\nimport ReferencingSection from \"./sections/ReferencingSection\";\r\nimport TypographySection from \"./sections/TypographySection\";\r\nimport DistancesSection from \"./sections/DistancesSection\";\r\nimport FramesSection from \"./sections/FramesSection\";\r\nimport FillingSection from \"./sections/FillingSection\";\r\nimport TocSection from \"./sections/TocSection\";\r\nimport ShortCutsSection from \"./sections/ShortCutsSection\";\r\n// import TestSection from \"./sections/TestSection\";\r\n\r\nimport theme from \"./theme\";\r\nimport CustomTab from \"./common/CustomTab\";\r\nimport CustomErrorTab from \"./common/CustomErrorTab\";\r\nimport CustomTabs from \"./common/CustomTabs\";\r\nimport CustomDialog from \"./common/CustomDialog\";\r\nimport { saveDecoratorForm } from \"../../actions\";\r\nimport { \r\n    closeDialog, \r\n    clearDecoratorForm, \r\n    switchDecDialogTab, \r\n    updateValidationError \r\n} from \"./actions\";\r\nimport { \r\n    fillMissedFields, \r\n    DecDataParser, \r\n    getTabsErrorState,\r\n    getTabNumberToSwitch,\r\n} from \"./helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass DecoratorDialog extends React.Component {\r\n    onClose = () => {\r\n        this.props.closeDialog();\r\n        this.props.clearForm();\r\n    };\r\n\r\n    onSaveButtonClick = () => {\r\n        const { formState, updateValidationError, switchTab, sendForm } = this.props;\r\n        const tabsErrorState = getTabsErrorState(formState);\r\n        if (tabsErrorState) {\r\n            updateValidationError(tabsErrorState);\r\n            switchTab(getTabNumberToSwitch(tabsErrorState));\r\n        } else {\r\n            const formToSend = DecDataParser.parseToSend(fillMissedFields(formState));\r\n            sendForm(formToSend);\r\n            this.onClose();\r\n        }\r\n    };\r\n\r\n    onTabSwitch = (e, tabNumber) => {\r\n        this.props.switchTab(tabNumber);\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            isOpen, \r\n            openedTab,\r\n            validationError, \r\n            isEditMode,\r\n        } = this.props;\r\n    \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <CustomDialog\r\n                    open={isOpen}\r\n                    onClose={this.onClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                    scroll=\"body\"\r\n                    className=\"paragraphDecorators-dialog\"\r\n                    fullWidth={true}\r\n                    maxWidth={false}\r\n                    id=\"dialog\"\r\n                >\r\n                    <div className=\"header\">\r\n                        <DialogTitle className=\"header-title\">\r\n                            <p>Create new paragraph decorator</p>\r\n                        </DialogTitle>\r\n                        <div className=\"header-buttons\">\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                onClick={this.onClose}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.onSaveButtonClick}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                {isEditMode ? \"Save\" : \"Create\"}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <DialogContent className=\"content\">\r\n                        <div className=\"content-leftSide\">\r\n                            <CustomTabs \r\n                                className=\"dialogTabs\"\r\n                                value={openedTab} \r\n                                onChange={this.onTabSwitch} \r\n                                orientation=\"vertical\"\r\n                                color=\"primary\"\r\n                                indicatorColor=\"primary\"\r\n                            >\r\n                                { validationError.namesSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"Names\" /> )\r\n                                    :  ( <CustomTab className=\"dialogTab\" label=\"Names\" /> ) }\r\n    \r\n                                { validationError.wordExportSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"WORD export\" /> ) \r\n                                    : ( <CustomTab className=\"dialogTab\" label=\"WORD export\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n    \r\n                                { validationError.listSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"List\" /> ) \r\n                                    : ( <CustomTab className=\"dialogTab\" label=\"List\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                                {/* <CustomTab className=\"dialogTab\" label=\"Test\" /> */}\r\n                            </CustomTabs>\r\n                        </div>\r\n                        <div className=\"content-rightSide\">\r\n                            { openedTab === 0 && <NamesSection /> }\r\n                            { openedTab === 1 && <WordExportSection /> }\r\n                            { openedTab === 2 && <PositioningSection /> }\r\n                            { openedTab === 3 && <ListSection /> }\r\n                            { openedTab === 4 && <ReferencingSection /> }\r\n                            { openedTab === 5 && <TypographySection /> }\r\n                            { openedTab === 6 && <DistancesSection /> }\r\n                            { openedTab === 7 && <FramesSection /> }\r\n                            { openedTab === 8 && <FillingSection /> }\r\n                            { openedTab === 9 && <TocSection /> }\r\n                            { openedTab === 10 && <ShortCutsSection /> }\r\n                            {/* openedTab === 11 && <TestSection /> */}\r\n                        </div>\r\n                    </DialogContent>\r\n                </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, isOpen, openedTab, validationError, isEditMode }}) => {\r\n    return { \r\n        formState: form,\r\n        isOpen,\r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        closeDialog: closeDialog(dispatch),\r\n        clearForm: () => dispatch(clearDecoratorForm()),\r\n        switchTab: payload => dispatch(switchDecDialogTab(payload)),\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecoratorDialog);","import DecoratorDialog from \"./DecoratorDialog\";\r\nexport default DecoratorDialog;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport DecoratorDialog from \"./components/DecoratorDialog\";\nimport { openDialog } from \"./components/DecoratorDialog/actions\";\nimport { clearSavedDecoratorForm,  saveDecoratorForm } from \"./actions\";\nimport { DecDataParser } from \"./components/DecoratorDialog/helpers\";\nimport theme from \"./components/DecoratorDialog/theme\";\n\nimport \"./App.css\";\n\nconst App = props => {\n    const { openDialog, saveForm, clearSavedForm, savedForm } = props;\n\n    const openEditDialog = () => {\n        openDialog(DecDataParser.parseToEdit(savedForm || {}));\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"startButtons\">\n                    { !savedForm ? (\n                        <Button \n                            onClick={() => openDialog()}\n                            color=\"primary\"\n                        >Create new</Button>\n                    ) : (\n                        <>\n                            <Button \n                                onClick={() => openEditDialog()}\n                            >Edit saved</Button>\n                            <Button \n                                onClick={clearSavedForm}\n                                color=\"secondary\"\n                            >Delete saved</Button>\n                        </>\n                    )}\n                </div>\n                <DecoratorDialog sendForm={saveForm} />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = ({ savedForm }) => {\n    return { savedForm };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openDialog: openDialog(dispatch),\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\n        clearSavedForm: () => dispatch(clearSavedDecoratorForm()),\n    };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SHOW_DEC_DIALOG, HIDE_DEC_DIALOG } from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isOpenReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SHOW_DEC_DIALOG:\r\n            return true;\r\n        case HIDE_DEC_DIALOG:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isOpenReducer;","import { UPDATE_DEC_FORM, CLEAR_DEC_FORM } from \"../../components/DecoratorDialog/actions\";\r\nimport { sampleText, emptyDecFormState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst initialState = { \r\n    previewText: sampleText,\r\n    ...emptyDecFormState,\r\n};\r\n\r\nconst decoratorFormReducer = (state = initialState, action) =>  {\r\n    switch (action.type) {\r\n        case UPDATE_DEC_FORM:\r\n            return { ...state, ...action.payload };\r\n        case CLEAR_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default decoratorFormReducer;","import { \r\n    UPDATE_VALIDATION_ERROR, \r\n    REMOVE_VALIDATION_ERROR, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nimport { tabsErrorInitialState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst validationErrorReducer = (state = tabsErrorInitialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_VALIDATION_ERROR:\r\n            return { ...state, ...action.payload };\r\n        case REMOVE_VALIDATION_ERROR:\r\n            return tabsErrorInitialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default validationErrorReducer;","import { \r\n    SWITCH_ON_DEC_DIALOG_EDIT_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_EDIT_MODE, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isEditModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_EDIT_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_EDIT_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isEditModeReducer;","import { \r\n    SWITCH_DEC_DIALOG_TAB,\r\n    RESET_DEC_DIALOG_TAB, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst initialState = 0;\r\n\r\nconst openedTabReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_DEC_DIALOG_TAB:\r\n            return action.payload;\r\n        case RESET_DEC_DIALOG_TAB:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default openedTabReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport isOpenReducer from \"./isOpenReducer\";\r\nimport decoratorFormReducer from \"./decoratorFormReducer\";\r\nimport validationErrorReducer from \"./validationErrorReducer\";\r\nimport isEditModeReducer from \"./isEditModeReducer\";\r\nimport openedTabReducer from \"./openedTabReducer\";\r\n\r\nconst decoratorDialogReducer = combineReducers({\r\n    isOpen: isOpenReducer,\r\n    openedTab: openedTabReducer,\r\n    validationError: validationErrorReducer,\r\n    isEditMode: isEditModeReducer,\r\n    form: decoratorFormReducer,\r\n});\r\n\r\nexport default decoratorDialogReducer;","import { SAVE_DEC_FORM, CLEAR_SAVED_DEC_FORM } from \"../actions\";\r\n\r\nconst initialState = null;\r\n\r\nexport const savedFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_DEC_FORM:\r\n            return action.payload;\r\n        case CLEAR_SAVED_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedFormReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport decoratorDialogReducer from \"./decoratorDialogReducer\";\r\nimport savedFormReducer from \"./savedFormReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    decoratorDialog: decoratorDialogReducer,\r\n    savedForm: savedFormReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}