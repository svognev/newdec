{"version":3,"sources":["components/common/CustomInput.js","components/common/NewGroupDialog.js","components/common/withNewGroupControl.js","components/NewDecDialog/sections/NamesSection.js","components/NewDecDialog/sections/WordExportSection.js","components/common/CustomInputShort.js","constants.js","components/NewDecDialog/sections/PositioningSection/index.js","components/NewDecDialog/sections/PositioningSection/PositioningSection.js","components/NewDecDialog/sections/ListSection.js","components/NewDecDialog/sections/ReferencingSection.js","utils.js","components/common/ContentEditable.js","components/common/Preview/Preview.js","components/common/Preview/index.js","components/NewDecDialog/sections/TypographySection/index.js","components/NewDecDialog/sections/TypographySection/TypographySection.js","components/NewDecDialog/sections/DistancesSection.js","components/NewDecDialog/sections/FramesSection/FrameTypeInput.js","components/NewDecDialog/sections/FramesSection/index.js","components/NewDecDialog/sections/FramesSection/FramesSection.js","components/NewDecDialog/sections/FillingSection.js","components/NewDecDialog/sections/TocSection.js","components/NewDecDialog/sections/ShortCutsSection.js","components/NewDecDialog/sections/TestSection.js","theme.js","components/common/CustomTab.js","components/common/CustomTabs.js","components/common/CustomDialog.js","components/NewDecDialog/index.js","App.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","NewGroupDialog","state","props","groupType","nameEN","nameDE","nameRU","nameFR","groupKey","onInputChange","inputName","e","setState","target","value","onClose","currentGroup","hideDialog","onSave","changeGroupSelect","trim","length","groupToSave","this","isOpen","isEditMode","titleText","buttonText","Dialog","className","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","variant","margin","onChange","DialogActions","Button","onClick","color","React","Component","withNewGroupControl","View","groupSelect","newGroup","handleClick","newValue","newGroupName","NativeSelect","Checkbox","WordExportSection","CustomInputShort","listStyleType","name","backSpaceActions","key","returnOnEmptySectionActions","decoratorsList","alignmentsMap","center","left","right","justify","PositioningSection","id","map","action","dec","ListSection","isList","listType","changeIsList","changeListType","bulletField","changeBulletField","Fragment","checked","InputAdornment","charCodeAt","toString","style","getCorrectColor","hex","correctColor","selectAllOnClick","defaultValue","focus","select","getOffset","alignType","parseFloat","slice","unicodeCharToNumber","unicodeChar","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","q","propertyIsEnumerable","normalizeHtml","str","replace","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","children","childNodes","textNode","isTargetFocused","document","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","current","getEl","emitChange","originalEvt","innerHTML","evt","assign","_a","tagName","ref","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","previewText","changePreviewText","previewStyle","verticalAlign","console","log","editableContentStyle","outline","marginBottom","selectAllChildren","TypographySection","previewProps","changeFontSize","fontColor","changeFontColor","fontColorName","changeFontColorName","font","changeFont","alignment","changeAlignment","bold","changeBold","italic","changeItalic","underlined","changeUnderlined","stroke","changeStroke","changeVerticalAlign","textTransform","changeTextTransform","colorSampleStyle","InputProps","startAdornment","FormControlLabel","control","label","labelPlacement","RadioGroup","row","Radio","DistancesSection","firstRowIndent","otherRowsIndent","lineSpacing","changeFirstRowIndent","changeOtherRowsIndent","changeLineSpacing","changeMarginTop","changeMarginBottom","wordSpacing","changeWordSpacing","customLineSpacing","changeCustomLineSpacing","FrameTypeInput","width","FramesSection","leftBorder","rightBorder","topBorder","bottomBorder","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColor","borderThickness","changeBorderThickness","borderType","changeBorderType","borderColorName","changeBorderColorName","previewBorderWidth","isNaN","borderLeft","marginLeft","borderRight","marginRight","borderTop","borderBottom","Select","MenuItem","FillingSection","fillingColor","changeFillingColor","fillingColorName","changeFillingColorName","connectToPrevious","changeConnectToPrevious","TocSection","ShortCutSection","TestSection","listName","changeListName","prefix","changePrefix","suffix","changeSuffix","orderLevel","changeOrderLevel","suffixDistance","changeSuffixDistance","magicTabs","changeMagicTabs","listItem","changeListItem","unicodeNumber","changeUnicodeNumber","changeUnicodeChar","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomTabs","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","container","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","NewDecDialog","openedTab","toggleStateProperty","propName","setStateProperty","secondArg","undefined","setBullet","newBullet","setColor","filteredInput","match","setNumber","changeOpenedTab","previewFontColor","previewFillingColor","previewAdditionalFillingColor","indentsDifference","previewMarginLeft","previewTextIndent","styledText","unstyledText","getUnstyledText","alignItems","textAlign","fontWeight","fontStyle","textDecoration","fontVariant","backgroundImage","textIndent","lineHeight","listSectionProps","newUnicodeNumber","newUnicodeChar","String","fromCharCode","parseInt","unicodeNumberToChar","typographySectionProps","distancesSectionProps","framesSectionProps","fillingSectionProps","ThemeProvider","aria-labelledby","scroll","orientation","indicatorColor","ShortCutsSection","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"odAoCiBA,EAjCGC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,YAAa,CACXC,UAAWF,EAAMG,QAAQ,KAG7BC,MAAO,CACLC,aAAc,EACdC,SAAU,QACVC,SAAU,WACVC,gBAAiBR,EAAMS,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,GACVC,QAAS,sBACTC,WAAYf,EAAMgB,YAAYC,OAAO,CAAC,eAAgB,eACtDC,WAAY,CACV,SACA,mBACA,QACA,cACAC,KAAK,KACP,UAAW,CACTd,aAAc,EACde,YAAa,WAEf,UAAW,CACTf,aAAc,EACde,YAAa,UACbC,UAAW,0BA5BCtB,CA+BduB,K,kPCoFSC,E,2MA3GXC,MAAiC,SAAzB,EAAKC,MAAMC,UACX,CAAEC,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,IAC9C,CAAEH,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,GAAIC,OAAQ,GAAIC,SAAU,I,EAEpEC,cAAgB,SAAAC,GAAS,OAAI,SAAAC,GACzB,EAAKC,SAAL,eACKF,EAAYC,EAAEE,OAAOC,U,EAI9BC,QAAU,WAAO,IAAD,EACwB,EAAKb,MAAlCc,EADK,EACLA,aAAcC,EADT,EACSA,WACrB,EAAKL,S,qVAAL,IAAmBI,IACnBC,K,EAGJC,OAAS,WAAO,IAAD,EACkD,EAAKhB,MAA1DgB,EADG,EACHA,OAAQC,EADL,EACKA,kBAAmBF,EADxB,EACwBA,WAAYd,EADpC,EACoCA,UAC/C,GAAI,EAAKF,MAAMG,OAAOgB,OAAOC,SAAyB,SAAdlB,GAAwB,EAAKF,MAAMO,SAASY,OAAOC,QAAS,CAChG,IAAMC,EAAc,CAChBlB,OAAQ,EAAKH,MAAMG,OAAOgB,OAC1Bf,OAAQ,EAAKJ,MAAMI,OAAOe,OAC1Bd,OAAQ,EAAKL,MAAMK,OAAOc,OAC1Bb,OAAQ,EAAKN,MAAMM,OAAOa,QAEZ,SAAdjB,IACAmB,EAAYd,SAAW,EAAKP,MAAMO,SAASY,QAE/CF,EAAOI,GACPH,EAAkB,EAAKlB,MAAMG,OAAOgB,QACpCH,M,wEAIE,IAAD,EAC0BM,KAAKrB,MAA5BsB,EADH,EACGA,OAAQC,EADX,EACWA,WACRhB,EAAmCc,KAAnCd,cAAeS,EAAoBK,KAApBL,OAAQH,EAAYQ,KAAZR,QACzBW,EAAS,UAAMD,EAAa,OAAS,SAA5B,gBAAqE,SAAzBF,KAAKrB,MAAMC,UAAuB,aAAe,GAA7F,SACTwB,EAAaF,EAAa,OAAS,SAEzC,OACI,kBAACG,EAAA,EAAD,CACIC,UAAU,6BACVC,KAAMN,EACNT,QAASA,EACTgB,WAAW,EACXC,SAAS,MAET,kBAACC,EAAA,EAAD,KAAcP,GACd,kBAACQ,EAAA,EAAD,KACI,yBAAKL,UAAU,+BAEkB,SAAzBN,KAAKrB,MAAMC,WAEX,oCACI,2CACA,kBAACgC,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPC,SAAU7B,EAAc,YACxBK,MAAOS,KAAKtB,MAAMO,YAI9B,yCACA,kBAAC2B,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPC,SAAU7B,EAAc,UACxBK,MAAOS,KAAKtB,MAAMG,SAEtB,yCACA,kBAAC+B,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPC,SAAU7B,EAAc,UACxBK,MAAOS,KAAKtB,MAAMI,SAEtB,yCACA,kBAAC8B,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPC,SAAU7B,EAAc,UACxBK,MAAOS,KAAKtB,MAAMK,SAEtB,yCACA,kBAAC6B,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPC,SAAU7B,EAAc,UACxBK,MAAOS,KAAKtB,MAAMM,WAI9B,kBAACgC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAS1B,EAAS2B,MAAM,WAAhC,UAGA,kBAACF,EAAA,EAAD,CAAQC,QAASvB,EAAQwB,MAAM,WAC1Bf,S,GArGIgB,IAAMC,WCkCpBC,EAzCa,SAACC,GACzB,kNACI7C,MAAQ,CACJuB,QAAQ,EACRuB,YAAa,GACbC,SAAU,IAJlB,EAOIC,YAAc,WACV,EAAKrC,SAAS,YACV,MAAO,CACHY,QAFsB,EAAbA,WARzB,EAeIN,OAAS,SAAA8B,GACL,EAAKpC,SAAS,CAAEoC,cAhBxB,EAmBI7B,kBAAoB,SAAC+B,GACjB,EAAKtC,SAAS,CACVmC,YAAaG,KArBzB,EAyBIjC,WAAa,WACT,EAAKL,SAAS,CAAEY,QAAQ,KA1BhC,wEA6Bc,IACEyB,EAAuD1B,KAAvD0B,YAAa/B,EAA0CK,KAA1CL,OAAQC,EAAkCI,KAAlCJ,kBAAmBF,EAAeM,KAAfN,WAChD,OAAO,kBAAC6B,EAAD,iBACCvB,KAAKrB,MACLqB,KAAKtB,MACL,CAAEgD,cAAa/B,SAAQC,oBAAmBF,oBAlC1D,GAAqB0B,IAAMC,YCsEhBC,IA9DM,SAAC3C,GAClB,IAAMiD,EAAejD,EAAM8C,SAAS5C,OAC9BqB,IAAe0B,EACbJ,EAAsF7C,EAAtF6C,YAAaC,EAAyE9C,EAAzE8C,SAAUxB,EAA+DtB,EAA/DsB,OAAQP,EAAuDf,EAAvDe,WAAYgC,EAA2C/C,EAA3C+C,YAAa/B,EAA8BhB,EAA9BgB,OAAQC,EAAsBjB,EAAtBiB,kBAExE,OACI,yBAAKU,UAAU,6DACX,qCACA,kBAACM,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,UAErC,uCACA,6BACI,kBAACe,EAAA,EAAD,CACIvE,MAAQ,kBAAC,EAAD,MACRiC,MAAOiC,EACPT,SAAU,SAAC3B,GACPQ,EAAkBR,EAAEE,OAAOC,SAG/B,4BAAQA,MAAM,IAAd,OACEW,GAAc,4BAAQI,UAAU,oBAAoBf,MAAOqC,GAAeA,GAC5E,4BAAQrC,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,sCAGEW,GAAcsB,IAAgBI,IAChC,kBAACX,EAAA,EAAD,CAAQE,MAAM,UAAUb,UAAU,aAAaY,QAASQ,GAClDxB,EAAa,iBAAmB,SAK9C,wCACA,6BACI,kBAAC4B,EAAA,EAAD,CAAUX,MAAM,aAEpB,sDACA,kBAACP,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,UAErC,qDACA,kBAACF,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,UAErC,sDACA,kBAACF,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,UAErC,qDACA,kBAACF,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,UAErC,kBAAC,EAAD,CACIb,OAAQA,EACRP,WAAYA,EACZC,OAAQA,EACRO,WAAYA,EACZT,aAAcgC,EACd7B,kBAAmBA,EACnBhB,UAAU,kBChDXmD,EAdW,SAACpD,GACvB,OACI,yBAAK2B,UAAU,+BACX,oDACA,kBAACM,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,UAErC,6CACA,6BACI,kBAACgB,EAAA,EAAD,CAAUX,MAAM,eCuBfa,EAjCQ/E,YAAW,SAAAC,GAAK,MAAK,CAC1CC,KAAM,CACJK,SAAU,QACV,YAAa,CACXJ,UAAWF,EAAMG,QAAQ,KAG7BC,MAAO,CACLC,aAAc,EACdE,SAAU,WACVC,gBAAiBR,EAAMS,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,GACVC,QAAS,sBACTC,WAAYf,EAAMgB,YAAYC,OAAO,CAAC,eAAgB,eACtDC,WAAY,CACV,SACA,mBACA,QACA,cACAC,KAAK,KACP,UAAW,CACTd,aAAc,EACde,YAAa,WAEf,UAAW,CACTf,aAAc,EACde,YAAa,UACbC,UAAW,0BA5BMtB,CA+BnBuB,KClCOyD,EAAgB,CAC3B,CACEC,KAAM,UACN3C,MAAO,WAET,CACE2C,KAAM,uBACN3C,MAAO,wBAET,CACE2C,KAAM,cACN3C,MAAO,eAET,CACE2C,KAAM,cACN3C,MAAO,eAET,CACE2C,KAAM,cACN3C,MAAO,eAET,CACE2C,KAAM,cACN3C,MAAO,eAET,CACE2C,KAAM,cACN3C,MAAO,eAET,CACE2C,KAAM,cACN3C,MAAO,eAET,CACE2C,KAAM,cACN3C,MAAO,eAET,CACE2C,KAAM,cACN3C,MAAO,gBAIE4C,EAAmB,CAC9B,CAAEC,IAAK,QAAS7C,MAAO,SACvB,CAAE6C,IAAK,iBAAkB7C,MAAO,kBAChC,CAAE6C,IAAK,YAAa7C,MAAO,aAC3B,CAAE6C,IAAK,UAAW7C,MAAO,YAGd8C,EAA8B,CACzC,CAAED,IAAK,iBAAkB7C,MAAO,kBAChC,CAAE6C,IAAK,qBAAsB7C,MAAO,sBACpC,CAAE6C,IAAK,mBAAoB7C,MAAO,oBAClC,CAAE6C,IAAK,UAAW7C,MAAO,YAGd+C,EAAiB,CAC1B,CAAEJ,KAAM,MAAO3C,MAAO,MACtB,CAAE2C,KAAM,SAAU3C,MAAO,gBACzB,CAAE2C,KAAM,SAAU3C,MAAO,gBACzB,CAAE2C,KAAM,SAAU3C,MAAO,gBACzB,CAAE2C,KAAM,SAAU3C,MAAO,gBACzB,CAAE2C,KAAM,SAAU3C,MAAO,gBACzB,CAAE2C,KAAM,SAAU3C,MAAO,iBAGhBgD,EAAgB,CAC3BC,OAAQ,SACRC,KAAM,aACNC,MAAO,WACPC,QAAS,cCtEIC,G,MCUY,SAACjE,GACxB,OACI,yBAAK2B,UAAU,qCACX,0BAAMuC,GAAG,QAAT,sBACA,kBAAChB,EAAA,EAAD,CAAcgB,GAAG,OAAOvF,MAAQ,kBAAC,EAAD,OAC5B,4BAAQiC,MAAO,MAAf,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,MAGJ,yBAAKsD,GAAG,KAAKvC,UAAU,gBACnB,4CAEJ,0BAAMuC,GAAG,QAAT,8CACA,kBAAChB,EAAA,EAAD,CAAcgB,GAAG,OAAOvF,MAAQ,kBAAC,EAAD,OAC3B6E,EAAiBW,IAAI,SAAAC,GAAM,OACxB,4BAAQxD,MAAOwD,EAAOX,IAAKA,IAAG,oBAAeW,EAAOX,MAAQW,EAAOxD,UAG3E,0BAAMsD,GAAG,QAAT,iDACA,kBAAChB,EAAA,EAAD,CAAcgB,GAAG,OAAOvF,MAAQ,kBAAC,EAAD,OAC3B+E,EAA4BS,IAAI,SAAAC,GAAM,OACnC,4BAAQxD,MAAOwD,EAAOX,IAAKA,IAAG,oBAAeW,EAAOX,MAAQW,EAAOxD,UAI3E,yBAAKsD,GAAG,KAAKvC,UAAU,gBACnB,yCAEJ,0BAAMuC,GAAG,QAAT,yBACA,kBAAChB,EAAA,EAAD,CAAcgB,GAAG,OAAOvF,MAAQ,kBAAC,EAAD,OAC5B,4BAAQiC,MAAM,WAAd,yBACE+C,EAAeQ,IAAI,SAAAE,GAAG,OAAI,4BAAQzD,MAAOyD,EAAIzD,MAAO6C,IAAKY,EAAIzD,OAAQyD,EAAId,SAE/E,0BAAMW,GAAG,QAAT,4CACA,kBAAChB,EAAA,EAAD,CAAegB,GAAG,OAAOvF,MAAQ,kBAAC,EAAD,OAC7B,4BAAQiC,MAAM,WAAd,yBACE+C,EAAeQ,IAAI,SAAAE,GAAG,OAAI,4BAAQzD,MAAOyD,EAAIzD,MAAO6C,IAAKY,EAAIzD,OAAQyD,EAAId,SAG/E,yBAAKW,GAAG,KAAKvC,UAAU,gBACnB,kDAEJ,0BAAMuC,GAAG,QAAT,sCACA,kBAAChB,EAAA,EAAD,CAAegB,GAAG,OAAOvF,MAAQ,kBAAC,EAAD,OAC3BgF,EAAeQ,IAAI,SAAAE,GAAG,OAAI,4BAAQzD,MAAOyD,EAAIzD,MAAO6C,IAAKY,EAAIzD,OAAQyD,EAAId,SAE/E,0BAAMW,GAAG,SAAT,4CACA,kBAAChB,EAAA,EAAD,CAAegB,GAAG,QAAQvF,MAAQ,kBAAC,EAAD,OAC5BgF,EAAeQ,IAAI,SAAAE,GAAG,OAAI,4BAAQzD,MAAOyD,EAAIzD,MAAO6C,IAAKY,EAAIzD,OAAQyD,EAAId,Y,SCgF5Ee,EArIK,SAAC,GAAwF,IAAtFC,EAAqF,EAArFA,OAAQC,EAA6E,EAA7EA,SAAUC,EAAmE,EAAnEA,aAAcC,EAAqD,EAArDA,eAAgBC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,kBAChF,OACI,0BAAMjD,UAAU,oCACZ,wBAAIA,UAAU,0CACV,yBAAKA,UAAU,mCACX,4BAAI,yBAAKA,UAAU,yBAAwB,iDACzC4C,GACE,kBAAC,IAAMM,SAAP,KACI,4BAAI,4CACJ,4BAAI,8CACJ,4BAAI,yCACJ,4BAAI,yCACJ,4BAAI,kDACJ,4BAAI,6CACJ,4BAAI,iDAIhB,yBAAKlD,UAAU,mCACX,4BAAI,kBAACwB,EAAA,EAAD,CAAUX,MAAM,UAAUsC,QAASP,EAAQnC,SAAUqC,KACvDF,GACE,kBAAC,IAAMM,SAAP,KACI,4BAAI,kBAAC5C,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,WACzC,4BACI,kBAACe,EAAA,EAAD,CAAcvE,MAAQ,kBAAC,EAAD,OAClB,4BAAQiC,MAAO,MAAf,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAGR,4BAAI,kBAACqB,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,WACzC,4BAAI,kBAACF,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,WACzC,4BACI,kBAACe,EAAA,EAAD,CAAcvE,MAAQ,kBAAC,EAAD,OAClB,4BAAQiC,MAAM,OAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,MAEJ,kBAACmE,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAEJ,4BAAI,kBAACqE,EAAA,EAAD,CAAUX,MAAM,aACpB,4BACI,kBAACU,EAAA,EAAD,CAActC,MAAO4D,EAAUpC,SAAUsC,EAAgB/F,MAAQ,kBAAC,EAAD,OAC7D,4BAAQiC,MAAO,aAAf,aACA,4BAAQA,MAAO,WAAf,aAGO,cAAb4D,EACE,kBAAC,IAAMK,SAAP,KACI,wBAAIlD,UAAU,8CAA6C,oDAG/D,kBAAC,IAAMkD,SAAP,KACI,wBAAIlD,UAAU,8CAA6C,kDAC3D,4BAAI,wEACJ,4BAAI,0DACJ,4BAAI,kEAMxB,yBAAKA,UAAU,oCACf,6BACM4C,GACE,kBAAC,IAAMM,SAAP,KACI,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACe,cAAbL,EACE,kBAAC,IAAMK,SAAP,KACI,wBAAIlD,UAAU,8CACV,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,2CACVS,SAAUwC,EACVhE,MAAO+D,IAEX,0BAAMhD,UAAU,yCACVgD,EAAW,mBAAeA,EAAYK,WAAW,GAAGC,SAAS,KAAQ,MAKnF,kBAAC,IAAMJ,SAAP,KACI,wBAAIlD,UAAU,8CACV,kBAACuB,EAAA,EAAD,CAAcvE,MAAQ,kBAAC,EAAD,OACjB2E,EAAca,IAAI,SAAAe,GAAK,OACtB,4BAAQtE,MAAOsE,EAAMtE,MAAO6C,IAAKyB,EAAMtE,OAAQsE,EAAM3B,UAI/D,4BAAI,kBAACJ,EAAA,EAAD,CAAUX,MAAM,aACpB,4BAAI,kBAACW,EAAA,EAAD,CAAUX,MAAM,UAAUsC,SAAS,KACvC,4BACI,kBAAC5B,EAAA,EAAD,CAAcvE,MAAQ,kBAAC,EAAD,OAClB,4BAAQiC,MAAO,MAAf,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,MAEJ,0BAAMe,UAAU,yCAAhB,8BC/EzBgB,IAzCY,SAAC3C,GACxB,IAAMiD,EAAejD,EAAM8C,SAAS5C,OAC9BqB,IAAe0B,EACbJ,EAAsF7C,EAAtF6C,YAAaC,EAAyE9C,EAAzE8C,SAAUxB,EAA+DtB,EAA/DsB,OAAQP,EAAuDf,EAAvDe,WAAYgC,EAA2C/C,EAA3C+C,YAAa/B,EAA8BhB,EAA9BgB,OAAQC,EAAsBjB,EAAtBiB,kBAExE,OACI,yBAAKU,UAAU,+BACX,iDACA,6BACI,kBAACuB,EAAA,EAAD,CACIvE,MAAQ,kBAAC,EAAD,MACRiC,MAAOiC,EACPT,SAAU,SAAC3B,GACPQ,EAAkBR,EAAEE,OAAOC,SAG7BW,GAAc,4BAAQI,UAAU,oBAAoBf,MAAOqC,GAAeA,GAC5E,4BAAQrC,MAAM,IAAd,QACA,4BAAQA,MAAM,KAAd,qBACA,4BAAQA,MAAM,KAAd,wBAGEW,GAAcsB,IAAgBI,IAChC,kBAACX,EAAA,EAAD,CAAQE,MAAM,UAAUb,UAAU,aAAaY,QAASQ,GAClDxB,EAAa,iBAAmB,SAI9C,kBAAC,EAAD,CACID,OAAQA,EACRP,WAAYA,EACZC,OAAQA,EACRO,WAAYA,EACZT,aAAcgC,EACd7B,kBAAmBA,EACnBhB,UAAU,Y,2BC5CbkF,EAAkB,SAACC,GAAkC,IAA7BrG,EAA4B,uDAAV,MAC7CsG,EAA8B,kBAARD,GAAoC,IAAfA,EAAIjE,QAA+B,IAAfiE,EAAIjE,OAAsBpC,EAANqG,EACzF,OAAOC,GAGEC,EAAmB,SAAAC,GAAY,OAAI,SAAA9E,GACvC8E,GAAgB9E,EAAEE,OAAOC,QAAU2E,IACpC9E,EAAEE,OAAO6E,QACT/E,EAAEE,OAAO8E,YAIJC,EAAY,SAACC,EAAWvG,GACjC,MAAkB,aAAduG,EACO,EAEHC,WAAWxG,EAASyG,SAAW,GAAoB,QAAdF,EAAsB,GAAK,IAY/DG,EAAsB,SAAAC,GAC/B,OAAOA,EAAYf,WAAW,GAAGC,SAAS,K,yBCzB1Ce,EAAkC,SAAUC,EAAGxF,GACjD,IAAIyF,EAAI,GACR,IAAK,IAAIC,KAAKF,EAAOG,OAAOC,UAAUC,eAAeC,KAAKN,EAAGE,IAAM1F,EAAE+F,QAAQL,GAAK,IAC9ED,EAAEC,GAAKF,EAAEE,IACb,GAAS,MAALF,GAAqD,oBAAjCG,OAAOK,sBAC3B,IAAK,IAAIC,EAAI,EAAGC,EAAIP,OAAOK,sBAAsBR,GAAIS,EAAIP,EAAEhF,OAAQuF,IAC3DjG,EAAE+F,QAAQG,EAAED,IAAM,GAAKN,OAAOC,UAAUO,qBAAqBL,KAAKN,EAAGU,EAAED,MACvER,EAAES,EAAED,IAAMT,EAAEU,EAAED,KAE1B,OAAOR,GAGT,SAASW,EAAcC,GACrB,OAAOA,GAAOA,EAAIC,QAAQ,wBAAyB,KAarD,SAASC,EAAaC,GAEpB,IAAMtG,EAbR,SAASuG,EAAiBC,GACxB,GAAIA,EAAKC,WAAaC,KAAKC,UACvB,OAAOH,EAEX,IADA,IAAII,EAAWJ,EAAKK,WACXd,EAAIa,EAASpG,OAAS,EAAGuF,GAAK,EAAGA,IAAK,CAC3C,IAAIe,EAAWP,EAAiBK,EAASb,IACzC,GAAiB,OAAbe,EACA,OAAOA,EAEf,OAAO,KAIQP,CAAiBD,GAE1BS,EAAkBC,SAASC,gBAAkBX,EACnD,GAAe,OAAXtG,GAAwC,OAArBA,EAAOkH,WAAsBH,EAAiB,CACjE,IAAII,EAAMC,OAAOC,eACjB,GAAY,OAARF,EAAc,CACd,IAAIG,EAAQN,SAASO,cACrBD,EAAME,SAASxH,EAAQA,EAAOkH,UAAU1G,QACxC8G,EAAMG,UAAS,GACfN,EAAIO,kBACJP,EAAIQ,SAASL,GAEbhB,aAAcsB,aACdtB,EAAGzB,S,IAMQgD,E,YACnB,aAAe,IAAD,8BACV,6CAASC,aACJC,SAAW,EAAK1I,MAAM2I,KAC3B,EAAK1B,GAAoC,oBAAxB,EAAKjH,MAAM4I,SAA0B,CAAEC,QAAS,MAASpG,cAC1E,EAAKqG,MAAQ,kBAAO,EAAK9I,MAAM4I,UAA2C,oBAAxB,EAAK5I,MAAM4I,SAA0B,EAAK5I,MAAM4I,SAAW,EAAK3B,IAAI4B,SACtH,EAAKE,WAAa,SAACC,GACf,IAAM/B,EAAK,EAAK6B,QAChB,GAAK7B,EAAL,CAEA,IAAM0B,EAAO1B,EAAGgC,UAChB,GAAI,EAAKjJ,MAAMoC,UAAYuG,IAAS,EAAKD,SAAU,CAG/C,IAAMQ,EAAM9C,OAAO+C,OAAO,GAAIH,EAAa,CACvCrI,OAAQ,CACJC,MAAO+H,KAGf,EAAK3I,MAAMoC,SAAS8G,GAExB,EAAKR,SAAWC,IApBV,E,sEAuBJ,IAAD,OACCS,EAAK/H,KAAKrB,MAASqJ,EAA4BD,EAA5BC,QAASV,EAAmBS,EAAnBT,KAAMC,EAAaQ,EAAbR,SAAiB5I,EAAQgG,EAAOoD,EAAI,CAAC,UAAW,OAAQ,aAChG,OAAO3G,gBAAoB4G,GAAW,MAAOjD,OAAO+C,OAAO,GAAInJ,EAAO,CAAEsJ,IAAyB,oBAAbV,EAA0B,SAACC,GACvGD,EAASC,GACT,EAAK5B,GAAG4B,QAAUA,GAClBD,GAAYvH,KAAK4F,GAAIsC,QAASlI,KAAK0H,WAAYS,OAAQnI,KAAKrB,MAAMwJ,QAAUnI,KAAK0H,WAAYU,QAASpI,KAAKrB,MAAMyJ,SAAWpI,KAAK0H,WAAYW,UAAWrI,KAAKrB,MAAM0J,WAAarI,KAAK0H,WAAYY,iBAAkBtI,KAAKrB,MAAM4J,SAAUC,wBAAyB,CAAEC,OAAQnB,KAAWtH,KAAKrB,MAAMuH,Y,4CAEvRwC,GAAY,IACtB/J,EAAUqB,KAAVrB,MACFiH,EAAK5F,KAAKyH,QAIhB,OAAK7B,IAGDJ,EAAckD,EAAUpB,QAAU9B,EAAcI,EAAGgC,aAIhDjJ,EAAM4J,WAAaG,EAAUH,UAChC5J,EAAMqJ,UAAYU,EAAUV,SAC5BrJ,EAAM2B,YAAcoI,EAAUpI,WAC9B3B,EAAM4I,WAAamB,EAAUnB,WAC5BoB,IAAUhK,EAAMkF,MAAO6E,EAAU7E,W,2CAGtC,IAAM+B,EAAK5F,KAAKyH,QACX7B,IAID5F,KAAKrB,MAAM2I,OAAS1B,EAAGgC,YACvBhC,EAAGgC,UAAY5H,KAAKqH,SAAWrH,KAAKrB,MAAM2I,MAE9C3B,EAAaC,Q,GA3D0BxE,a,4NC9C7C,ICJewH,GDIC,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,aACtCC,EAA4BD,EAA5BC,cAAejL,EAAagL,EAAbhL,SACvBkL,QAAQC,IAAI3E,WAAWwE,EAAa3L,YACpC,IAAM+L,E,qVAAoB,IACnBJ,EADmB,CAEtBK,QAAS,OACThM,UAAU,GAAD,OAAKmH,WAAWwE,EAAa3L,WAAaiH,EAAU2E,EAAejL,GAAnE,MACTsL,aAAa,GAAD,OAAK9E,WAAWwE,EAAaM,cAAgBhF,EAAU2E,EAAejL,GAAtE,QAGhBkL,QAAQC,IAAIC,GASZ,OACI,yBAAK7I,UAAU,WACX,0BAAMA,UAAU,iBAAhB,WACA,yBAAKA,UAAU,kBAAkBY,QATT,SAAA9B,GADM,yBAE9BA,EAAEE,OAAOgB,WACToG,OAAOC,eAAe2C,kBAAkBlK,EAAEE,OAAO4G,SAAS,MAQtD,yBAAK5F,UAXqB,wBAYtB,kBAAC,EAAD,CACIA,UAAS,UAbS,uBAaT,SACTS,SAAU+H,EACVxB,KAAMuB,EACNhF,MAAOsF,QEhChBI,I,MCeW,SAAC5K,GAAW,IAC1B6K,EAUkC7K,EAVlC6K,aAAczL,EAUoBY,EAVpBZ,SAAU0L,EAUU9K,EAVV8K,eAAgBC,EAUN/K,EAVM+K,UAAWC,EAUjBhL,EAViBgL,gBAAiBC,EAUlCjL,EAVkCiL,cACxEC,EASsClL,EATtCkL,oBACAC,EAQsCnL,EARtCmL,KACAC,EAOsCpL,EAPtCoL,WACAC,EAMsCrL,EANtCqL,UAAWC,EAM2BtL,EAN3BsL,gBACXC,EAKsCvL,EALtCuL,KAAMC,EAKgCxL,EALhCwL,WACNC,EAIsCzL,EAJtCyL,OAAQC,EAI8B1L,EAJ9B0L,aACRC,EAGsC3L,EAHtC2L,WAAYC,EAG0B5L,EAH1B4L,iBACZC,EAEsC7L,EAFtC6L,OAAQC,EAE8B9L,EAF9B8L,aACRzB,EACsCrK,EADtCqK,cAAe0B,EACuB/L,EADvB+L,oBACfC,EAAsChM,EAAtCgM,cAAeC,EAAuBjM,EAAvBiM,oBAET5G,EAAeF,EAAgB4F,GAE/BmB,EAAmB,CACrBnN,gBAAgB,IAAD,OAAMsG,IAG7B,OACI,oCACA,yBAAK1D,UAAU,+BACX,yBAAKA,UAAU,kCACX,sCACA,kBAACuB,EAAA,EAAD,CACIvE,MAAQ,kBAAC,EAAD,MACRiC,MAAOuK,EACP/I,SAAUgJ,GAEV,4BAAQxK,MAAO,sBAAf,UACA,4BAAQA,MAAO,6BAAf,iBAGJ,2CACA,kBAACsC,EAAA,EAAD,CACIvE,MAAQ,kBAAC,EAAD,MACRiC,MAAOyK,EACPjJ,SAAUkJ,GAEV,4BAAQ1K,MAAO,QAAf,QACA,4BAAQA,MAAO,UAAf,UACA,4BAAQA,MAAO,SAAf,SACA,4BAAQA,MAAO,WAAf,cAGJ,2CACA,yBAAKe,UAAU,sBACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAOxB,EACPgD,SAAU0I,EACVvI,QAAS+C,EAAiB,QAE9B,kBAACP,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAGJ,iDACA,kBAACmD,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPvB,MAAOqK,EACP7I,SAAU8I,EACV3I,QAAS+C,EAAiB,WAG9B,gDACA,yBAAK3D,UAAU,cACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVwK,WAAY,CACRC,eAAgB,kBAACrH,EAAA,EAAD,CAAgBjG,SAAS,SAAzB,MAEpB8B,MAAOmK,EACP3I,SAAU4I,EACVzI,QAAS+C,EAAiB,SAE9B,yBAAK3D,UAAU,cAAcuD,MAAOgH,MAG5C,yBAAKvK,UAAU,eACX,kBAAC,GAAYkJ,KAGrB,yBAAKlJ,UAAU,mDACX,0CACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,wCACX,kBAAC0K,EAAA,EAAD,CACIC,QAAS,kBAACnJ,EAAA,EAAD,CAAUX,MAAM,YACzB+J,MAAM,OACNC,eAAe,MACf1H,QAASyG,EACTnJ,SAAUoJ,KAGlB,yBAAK7J,UAAU,0CACX,kBAAC0K,EAAA,EAAD,CACIC,QAAS,kBAACnJ,EAAA,EAAD,CAAUX,MAAM,YACzB+J,MAAM,SACNC,eAAe,MACf1H,QAAS2G,EACTrJ,SAAUsJ,KAGlB,yBAAK/J,UAAU,8CACX,kBAAC0K,EAAA,EAAD,CACIC,QAAS,kBAACnJ,EAAA,EAAD,CAAUX,MAAM,YACzB+J,MAAM,aACNC,eAAe,MACf1H,QAAS6G,EACTvJ,SAAUwJ,KAGlB,yBAAKjK,UAAU,0CACX,kBAAC0K,EAAA,EAAD,CACIC,QAAS,kBAACnJ,EAAA,EAAD,CAAUX,MAAM,YACzB+J,MAAM,SACNC,eAAe,MACf1H,QAAS+G,EACTzJ,SAAU0J,MAKtB,gDACA,kBAACW,EAAA,EAAD,CACI7L,MAAOoL,EACP5J,SAAU6J,EACVS,KAAG,GAEH,yBAAK/K,UAAU,+CACX,kBAAC0K,EAAA,EAAD,CACIzL,MAAM,OACN0L,QAAS,kBAACK,EAAA,EAAD,CAAOnK,MAAM,YACtB+J,MAAM,OACNC,eAAe,SAGvB,yBAAK7K,UAAU,6CACX,kBAAC0K,EAAA,EAAD,CACIzL,MAAM,YACN0L,QAAS,kBAACK,EAAA,EAAD,CAAOnK,MAAM,YACtB+J,MAAM,YACNC,eAAe,SAGvB,yBAAK7K,UAAU,6CACX,kBAAC0K,EAAA,EAAD,CACIzL,MAAM,YACN0L,QAAS,kBAACK,EAAA,EAAD,CAAOnK,MAAM,YACtB+J,MAAM,YACNC,eAAe,SAGvB,yBAAK7K,UAAU,6CACX,kBAAC0K,EAAA,EAAD,CACIzL,MAAM,aACN0L,QAAS,kBAACK,EAAA,EAAD,CAAOnK,MAAM,YACtB+J,MAAM,aACNC,eAAe,UAK3B,iDACA,6BACI,kBAACtJ,EAAA,EAAD,CACIvE,MAAQ,kBAAC,EAAD,MACRiC,MAAOyJ,EACPjI,SAAU2J,GAEV,4BAAQnL,MAAM,YAAd,QACA,4BAAQA,MAAM,OAAd,aACA,4BAAQA,MAAM,SAAd,qBCjELgM,GAtHU,SAAC5M,GAAW,IAE7B6K,EAWA7K,EAXA6K,aACAgC,EAUA7M,EAVA6M,eACAC,EASA9M,EATA8M,gBACAC,EAQA/M,EARA+M,YACAC,EAOAhN,EAPAgN,qBACAC,EAMAjN,EANAiN,sBACAC,EAKAlN,EALAkN,kBACAzO,EAIAuB,EAJAvB,UAAW0O,EAIXnN,EAJWmN,gBACXzC,EAGA1K,EAHA0K,aAAc0C,EAGdpN,EAHcoN,mBACdC,EAEArN,EAFAqN,YAAaC,EAEbtN,EAFasN,kBACbC,EACAvN,EADAuN,kBAAmBC,EACnBxN,EADmBwN,wBAGvB,OACI,yBAAK7L,UAAU,2DACX,yBAAKA,UAAU,kCACX,4CACA,yBAAKA,UAAU,sBACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAOnC,EACP2D,SAAU+K,EACV5K,QAAS+C,EAAiB,OAE9B,kBAACP,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAGJ,+CACA,yBAAK6C,UAAU,sBACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAO8J,EACPtI,SAAUgL,EACV7K,QAAS+C,EAAiB,OAE9B,kBAACP,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAGJ,gDACA,yBAAK6C,UAAU,sBACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAOiM,EACPzK,SAAU4K,IAEd,kBAACjI,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAGJ,mDACA,yBAAK6C,UAAU,sBACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAOkM,EACP1K,SAAU6K,IAEd,kBAAClI,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAGJ,8CACA,6BACI,kBAACoE,EAAA,EAAD,CACIvE,MAAQ,kBAAC,EAAD,MACRiC,MAAOmM,EACP3K,SAAU8K,GAEV,4BAAQtM,MAAM,OAAd,OACA,4BAAQe,UAAU,oBAAoBf,MAAM,QAA5C,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,WAGY,WAAhBmM,GAEI,kBAAC9K,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAO2M,EACPnL,SAAUoL,KAOtB,8CACA,yBAAK7L,UAAU,sBACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAOyM,EACPjL,SAAUkL,EACV/K,QAAS+C,EAAiB,OAE9B,kBAACP,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,QAGR,yBAAK6C,UAAU,eACX,kBAAC,GAAYkJ,M,oBCxFZ4C,GA/BMnP,YAAW,SAAAC,GAAK,MAAK,CACxCC,KAAM,CACJkP,MAAO,QACP,YAAa,CACXjP,UAAWF,EAAMG,QAAQ,KAG7BC,MAAO,CACLC,aAAc,EACdE,SAAU,WACVC,gBAAiBR,EAAMS,QAAQC,WAAWC,MAC1CC,OAAQ,oBACRC,SAAU,GACVC,QAAS,sBACTC,WAAYf,EAAMgB,YAAYC,OAAO,CAAC,eAAgB,eACtDC,WAAY,CACV,QACA,cACAC,KAAK,KACP,UAAW,CACTd,aAAc,EACde,YAAa,WAEf,UAAW,CACTf,aAAc,EACde,YAAa,UACbC,UAAW,0BA1BItB,CA6BjBuB,KC/BS8N,I,MCYO,SAAC3N,GAAW,IAE1B4N,EAgBC5N,EAhBD4N,WACAC,EAeC7N,EAfD6N,YACAC,EAcC9N,EAdD8N,UACAC,EAaC/N,EAbD+N,aACAC,EAYChO,EAZDgO,iBACAC,EAWCjO,EAXDiO,kBACAC,EAUClO,EAVDkO,gBACAC,EASCnO,EATDmO,mBACAxO,EAQCK,EARDL,YACAyO,EAOCpO,EAPDoO,kBACAC,EAMCrO,EANDqO,gBACAC,EAKCtO,EALDsO,sBACAC,EAICvO,EAJDuO,WACAC,EAGCxO,EAHDwO,iBACAC,EAECzO,EAFDyO,gBACAC,EACC1O,EADD0O,sBAGGrJ,EAAeF,EAAgBxF,GAC/BuM,EAAmB,CACrBnN,gBAAgB,IAAD,OAAMsG,IAEnBsJ,EAAqBN,IAAoBO,MAAMhJ,WAAWyI,IAArC,UACKA,GAAmB,GAAKA,EAAkB,GAD/C,MAEE,IAEvBjE,EAAe,CACjByE,WAAYjB,EAAU,UAAMe,EAAN,YAA4BJ,EAA5B,aAA2ClJ,GAAiB,OAClFyJ,WAAYlB,EAAa,IAAMe,EAC/BI,YAAalB,EAAW,UAAMc,EAAN,YAA4BJ,EAA5B,aAA2ClJ,GAAiB,OACpF2J,YAAanB,EAAc,IAAMc,EACjCM,UAAWnB,EAAS,UAAMa,EAAN,YAA4BJ,EAA5B,aAA2ClJ,GAAiB,OAChF5G,UAAWqP,EAAY,IAAMa,EAC7BO,aAAcnB,EAAY,UAAMY,EAAN,YAA4BJ,EAA5B,aAA2ClJ,GAAiB,OACtFqF,aAAcqD,EAAe,IAAMY,GAGxC,OACI,yBAAKhN,UAAU,+BACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,qBAAqBuD,MAAOkF,GACvC,0BAAMzI,UAAU,kBAAhB,QACA,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,kBAAhB,OACA,yBAAKA,UAAU,2BACX,yBAAKuC,GAAG,KAAKvC,UAAU,YACnB,kBAACwB,EAAA,EAAD,CACIX,MAAM,UACNsC,QAASgJ,EACT1L,SAAU8L,KAGlB,yBAAKhK,GAAG,OAAOvC,UAAU,YACrB,kBAACwB,EAAA,EAAD,CACIX,MAAM,UACNsC,QAAS8I,EACTxL,SAAU4L,KAGlB,yBAAK9J,GAAG,OAAOvC,UAAU,aAEzB,yBAAKuC,GAAG,OAAOvC,UAAU,YACrB,kBAACwB,EAAA,EAAD,CACIX,MAAM,UACNsC,QAAS+I,EACTzL,SAAU6L,KAGlB,yBAAK/J,GAAG,KAAKvC,UAAU,YACnB,kBAACwB,EAAA,EAAD,CACIX,MAAM,UACNsC,QAASiJ,EACT3L,SAAU+L,MAItB,0BAAMxM,UAAU,kBAAhB,WAEJ,0BAAMA,UAAU,kBAAhB,WAGR,yBAAKA,UAAU,+BACX,kDACA,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPvB,MAAO6N,EACPrM,SAAUsM,EACVnM,QAAS+C,EAAiB,SAG9B,iDACA,yBAAK3D,UAAU,cACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVwK,WAAY,CACTC,eAAgB,kBAACrH,EAAA,EAAD,CAAgBjG,SAAS,SAAzB,MAEnB8B,MAAOjB,EACPyC,SAAUgM,EACV7L,QAAS+C,EAAiB,SAE9B,yBAAK3D,UAAU,cAAcuD,MAAOgH,KAIxC,iDACA,yBAAKvK,UAAU,sBACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVf,MAAOyN,EACPjM,SAAUkM,EACV/L,QAAS+C,EAAiB,OAE9B,kBAACP,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAGJ,+CACA,6BACI,kBAACqQ,GAAA,EAAD,CACExQ,MAAO,kBAAC,GAAD,MACPiC,MAAO2N,EACPnM,SAAUoM,GAER,kBAACY,GAAA,EAAD,CAAUxO,MAAM,SAAQ,wDACxB,kBAACwO,GAAA,EAAD,CAAUxO,MAAM,UAAhB,oDACA,kBAACwO,GAAA,EAAD,CAAUxO,MAAM,UAAS,kEACzB,kBAACwO,GAAA,EAAD,CAAUxO,MAAM,UAAhB,0CAIR,qDACA,6BACI,kBAACuC,EAAA,EAAD,CAAUX,MAAM,iBCpFrB6M,GA3DS,SAACrP,GAAW,IAE5B6K,EAIC7K,EAJD6K,aACAyE,EAGCtP,EAHDsP,aAAcC,EAGbvP,EAHauP,mBACdC,EAECxP,EAFDwP,iBAAkBC,EAEjBzP,EAFiByP,uBAClBC,EACC1P,EADD0P,kBAAmBC,EAClB3P,EADkB2P,wBAEbtK,EAAeF,EAAgBmK,GAC/BpD,EAAmB,CACrBnN,gBAAgB,IAAD,OAAMsG,IAG7B,OACI,yBAAK1D,UAAU,2DACX,yBAAKA,UAAU,kCACX,oDACA,6BACI,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,sBACVf,MAAO4O,EACPpN,SAAUqN,KAIlB,mDACA,yBAAK9N,UAAU,cACX,kBAACM,EAAA,EAAD,CACIC,QAAQ,WACRC,OAAO,QACPR,UAAU,cACVwK,WAAY,CACRC,eAAgB,kBAACrH,EAAA,EAAD,CAAgBjG,SAAS,SAAzB,MAEpB8B,MAAO0O,EACPlN,SAAUmN,EACVhN,QAAS+C,MAEb,yBAAK3D,UAAU,cAAcuD,MAAOgH,KAGxC,qDACA,6BACI,kBAAC/I,EAAA,EAAD,CACIX,MAAM,UACNsC,QAAS4K,EACTtN,SAAUuN,MAItB,yBAAKhO,UAAU,eACX,kBAAC,GAAYkJ,MC5Bd+E,GA5BI,SAAC5P,GAChB,OACI,0BAAM2B,UAAU,oCACZ,wBAAIA,UAAU,0CACV,yBAAKA,UAAU,mCACf,4BAAI,mDAEJ,yBAAKA,UAAU,mCACX,4BACI,kBAACuB,EAAA,EAAD,CAAcvE,MAAQ,kBAAC,EAAD,OAClB,4BAAQiC,MAAO,MAAf,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,QAIZ,yBAAKe,UAAU,wCCDhBkO,GApBS,SAAC7P,GACrB,OACI,0BAAM2B,UAAU,oCACZ,wBAAIA,UAAU,0CACV,yBAAKA,UAAU,mCACX,4BAAI,0CACJ,4BAAI,uCAER,yBAAKA,UAAU,mCACX,4BAAI,kBAACM,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,WACzC,4BAAI,kBAACF,EAAA,EAAD,CAAWC,QAAQ,WAAWC,OAAO,YAE7C,yBAAKR,UAAU,wCC8KhBmO,GAhLK,SAAC9P,GAAW,IAExBuE,EAWAvE,EAXAuE,OAAQE,EAWRzE,EAXQyE,aACRD,EAUAxE,EAVAwE,SAAUE,EAUV1E,EAVU0E,eACVqL,EASA/P,EATA+P,SAAUC,EASVhQ,EATUgQ,eACVC,EAQAjQ,EARAiQ,OAAQC,EAQRlQ,EARQkQ,aACRC,EAOAnQ,EAPAmQ,OAAQC,EAORpQ,EAPQoQ,aACRC,EAMArQ,EANAqQ,WAAYC,EAMZtQ,EANYsQ,iBACZC,EAKAvQ,EALAuQ,eAAgBC,EAKhBxQ,EALgBwQ,qBAChBC,EAIAzQ,EAJAyQ,UAAWC,EAIX1Q,EAJW0Q,gBACXC,EAGA3Q,EAHA2Q,SAAUC,EAGV5Q,EAHU4Q,eACVC,EAEA7Q,EAFA6Q,cAAeC,EAEf9Q,EAFe8Q,oBACf/K,EACA/F,EADA+F,YAAagL,EACb/Q,EADa+Q,kBAIjB,OADAzG,QAAQC,IAAIzE,EAAoBC,IAE5B,oCACI,yBAAKpE,UAAU,+BACX,yBAAKA,UAAU,yBACX,gDAEJ,6BACI,kBAACwB,EAAA,EAAD,CACIX,MAAM,UACNsC,QAASP,EACTnC,SAAUqC,KAGhBF,GACE,oCACI,2CACA,kBAACtC,EAAA,EAAD,CACIrB,MAAOmP,EACP3N,SAAU4N,EACV9N,QAAQ,WACRC,OAAO,UAGX,6CACA,6BACI,kBAACe,EAAA,EAAD,CACItC,MAAOyP,EACPjO,SAAUkO,EACV3R,MAAQ,kBAAC,EAAD,OAER,4BAAQiC,MAAM,IAAd,OACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAIR,wCACA,kBAACqB,EAAA,EAAD,CACIrB,MAAOqP,EACP7N,SAAU8N,EACVhO,QAAQ,WACRC,OAAO,UAGX,wCACA,kBAACF,EAAA,EAAD,CACIrB,MAAOuP,EACP/N,SAAUgO,EACVlO,QAAQ,WACRC,OAAO,UAGX,iDACA,yBAAKR,UAAU,sBACX,kBAACuB,EAAA,EAAD,CACItC,MAAO2P,EACPnO,SAAUoO,EACV7R,MAAQ,kBAAC,EAAD,OAER,4BAAQiC,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,MAEJ,kBAACmE,EAAA,EAAD,CAAgB7C,QAAQ,SAASpD,SAAS,OAA1C,OAGJ,4CACA,6BACI,kBAACqE,EAAA,EAAD,CACIX,MAAM,UACNsC,QAAS2L,EACTrO,SAAUsO,KAIlB,8CACA,6BACI,kBAACxN,EAAA,EAAD,CACItC,MAAO4D,EACPpC,SAAUsC,EACV/F,MAAQ,kBAAC,EAAD,OAER,4BAAQiC,MAAO,aAAf,aACA,4BAAQA,MAAO,WAAf,WACA,4BAAQA,MAAO,cAAf,mBAOhB2D,GAAuB,cAAbC,GACN,oCACI,yBAAK7C,UAAU,+BACX,yBAAKA,UAAU,+BACX,0BAAMA,UAAU,yBAAhB,aACA,yBAAKA,UAAU,kBACX,kBAACuB,EAAA,EAAD,CACItC,MAAO+P,EACPvO,SAAUwO,EACVjS,MAAQ,kBAAC,EAAD,OAER,4BAASiC,MAAO,eAAhB,UACA,4BAAQA,MAAO,QAAf,UACA,4BAAQA,MAAO,QAAf,UACA,4BAAQA,MAAO,cAAf,YAIK,eAAb+P,GACA,yBAAKhP,UAAU,uDACX,yBAAKA,UAAU,uDACX,gDACA,6BACI,kBAACM,EAAA,EAAD,CACIrB,MAAOiQ,EACPzO,SAAU0O,EACV5O,QAAQ,WACRC,OAAO,QACPR,UAAU,eACVwK,WAAY,CACRC,eAAgB,kBAACrH,EAAA,EAAD,CAAgBjG,SAAS,SAAzB,WAKhC,yBAAK6C,UAAU,uDACX,sCACA,6BACI,kBAACM,EAAA,EAAD,CACIrB,MAAOmF,EACP3D,SAAU2O,EACVxO,QAAS+C,IACTpD,QAAQ,WACRC,OAAO,QACPR,UAAU,uB,iDCnK3CpD,GAPDyS,aAAe,CACzBhS,QAAS,CACPiS,QAASC,KACTC,UAAWC,Q,UC4BAC,GA9BC/S,YAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACJ8S,SAAU,UACVvS,gBAAiB,QACjBO,WAAY,OAEZ,WAAY,CACVA,WAAY,QAGd,UAAW,CACTkD,MAAO,QAET,aAAc,CACZzD,gBAAiB,UACjByD,MAAO,QACP+O,QAAS,GAEX,iBAAkB,CAChBxS,gBAAiB,QACjBO,WAAY,QAEd,0BAA2B,CACzBP,gBAAiB,YAGrByS,SAAU,KA1BIlT,CA4BZ,SAAA0B,GAAK,OAAI,kBAACyR,GAAA,EAAQzR,K,UCpBP0R,GAVEpT,YAAW,SAAAC,GAAK,MAAK,CACpCoT,UAAW,CACP5S,gBAAiB,UACjBwS,QAAS,GACT7D,MAAO,QACPkE,OAAQ,EACRC,QAAS,UANEvT,CAQbwT,MCsBWC,GA9BIzT,YAAW,SAAAC,GAAK,MAAK,CACtCC,KAAM,CACFK,SAAU,SACVmT,UAAW,oBACXC,OAAQ,QAEZC,UAAW,CACPD,OAAQ,QACRJ,QAAS,SAEbM,WAAY,CACR,UAAW,CACPF,OAAQ,SAGhBG,eAAgB,CACZtQ,SAAU,SACVuQ,UAAW,QACXL,UAAW,QACXtE,MAAO,oBACPuE,OAAQ,oBACRJ,QAAS,cACTS,cAAe,SACfnT,OAAQ,QAEZoT,gBAAiB,CACblI,cAAe,YA1BF/L,CA4BfoD,KCoZS8Q,I,iNArZXzS,MAAQ,CACJ0S,UAAW,GACXlO,QAAQ,EACRC,SAAU,YACVG,YAAa,GACb0F,cAAe,WACf2B,cAAe,OACf4B,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,cAAc,EACdQ,WAAY,QACZ5O,YAAa,MACb8O,gBAAiB,MACjBJ,gBAAiB,IACjBjP,SAAU,KACV2L,UAAW,MACXE,cAAe,QACfI,UAAW,OACXF,KAAM,SACNmE,aAAc,GACdE,iBAAkB,GAClB3C,eAAgB,IAChBC,gBAAiB,IACjBC,YAAa,OACbQ,kBAAmB,GACnBrD,YAAY,8MACZqB,MAAM,EACNE,QAAQ,EACRE,YAAY,EACZE,QAAQ,EACR6D,mBAAmB,EACnBjR,UAAW,IACXiM,aAAc,IACd2C,YAAa,IACb0C,SAAU,GACVE,OAAQ,GACRE,OAAQ,GACRE,WAAY,GACZE,eAAgB,OAChBE,WAAW,EACXE,SAAU,aACVE,cAAe,GACf9K,YAAa,I,EAGjB2M,oBAAsB,SAACC,GAAD,OAAc,SAAClS,GACjC,EAAKC,SAAL,eACKiS,EAAWlS,EAAEE,OAAOmE,Y,EAI7B8N,iBAAmB,SAACD,GAAD,OAAc,SAAClS,GAAuB,IAApBoS,EAAmB,uDAAP,GACvC7P,EAAYvC,GAAwB,KAAnBA,EAAEE,OAAOC,YAAmCkS,IAAnBrS,EAAEE,OAAOC,MAAuBH,EAAEE,OAAOC,MAAQiS,EACjG,EAAKnS,SAAL,eACKiS,EAAW3P,M,EAIpB+P,UAAY,SAACJ,GAAD,OAAc,SAAClS,GACvB,IAAMuS,EAAYvS,EAAEE,OAAOC,MAAMO,OAAS,EAAIV,EAAEE,OAAOC,MAAMH,EAAEE,OAAOC,MAAMO,OAAS,GAAKV,EAAEE,OAAOC,MAInG,OAHA,EAAKF,SAAL,eACKiS,EAAWK,IAETA,I,EAGXC,SAAW,SAACN,GAAD,OAAc,SAAClS,GACtB,IAAI9B,EAAQ8B,EAAEE,OAAOC,OAAS,GAExBsS,EAAgBvU,EAAMoI,QAAQ,IAAK,IAAI7F,OAAOiS,MAAM,cAClCxU,EAAMoI,QAAQ,IAAK,IAAI7F,OAAOiS,MAAM,cAAc,GAAGtN,MAAM,EAAG,GAC9D,GAOxB,OALIqN,IAAkB,EAAKnT,MAAM4S,IAC7B,EAAKjS,SAAL,eACKiS,EAAWO,IAGbA,I,EAGXE,UAAY,SAACT,GAAD,OAAc,SAAClS,GACvB,IAAI9B,EAAQ8B,EAAEE,OAAOC,OAAS,GAExBsS,EAAgBvU,EAAMoI,QAAQ,IAAK,KAAK7F,OAAOiS,MAAM,WACnCxU,EAAMoI,QAAQ,IAAK,KAAK7F,OAAOiS,MAAM,eAAe,GACpD,GAOxB,OALID,IAAkB,EAAKnT,MAAM4S,IAC/B,EAAKjS,SAAL,eACKiS,EAAWO,IAGXA,I,wEAGD,IAAD,EACuB7R,KAAKrB,MAAzBsB,EADH,EACGA,OAAQT,EADX,EACWA,QACR+R,EAA0EvR,KAA1EuR,iBAAkBF,EAAwDrR,KAAxDqR,oBAAqBU,EAAmC/R,KAAnC+R,UAAWH,EAAwB5R,KAAxB4R,SAAUF,EAAc1R,KAAd0R,UAF/D,EA6CG1R,KAAKtB,MA1CL0S,EAHH,EAGGA,UACAlO,EAJH,EAIGA,OACAC,EALH,EAKGA,SACA6F,EANH,EAMGA,cACA2B,EAPH,EAOGA,cACA4B,EARH,EAQGA,WACAC,EATH,EASGA,YACAC,EAVH,EAUGA,UACAC,EAXH,EAWGA,aACAQ,EAZH,EAYGA,WACA5O,EAbH,EAaGA,YACA8O,EAdH,EAcGA,gBACA1D,EAfH,EAeGA,UACAuE,EAhBH,EAgBGA,aACAjB,EAjBH,EAiBGA,gBACAxB,EAlBH,EAkBGA,eACAC,EAnBH,EAmBGA,gBACAC,EApBH,EAoBGA,YACAQ,EArBH,EAqBGA,kBACArD,EAtBH,EAsBGA,YACA9K,EAvBH,EAuBGA,SACA6L,EAxBH,EAwBGA,cACAE,EAzBH,EAyBGA,KACAE,EA1BH,EA0BGA,UACAE,EA3BH,EA2BGA,KACAE,EA5BH,EA4BGA,OACAE,EA7BH,EA6BGA,WACAE,EA9BH,EA8BGA,OACA2D,EA/BH,EA+BGA,iBACAE,EAhCH,EAgCGA,kBACAjR,EAjCH,EAiCGA,UACAiM,EAlCH,EAkCGA,aACA2C,GAnCH,EAmCGA,YACA0C,GApCH,EAoCGA,SACAE,GArCH,EAqCGA,OACAE,GAtCH,EAsCGA,OACAE,GAvCH,EAuCGA,WACAE,GAxCH,EAwCGA,eACAE,GAzCH,EAyCGA,UACAE,GA1CH,EA0CGA,SACAE,GA3CH,EA2CGA,cACA9K,GA5CH,EA4CGA,YAGFsN,GAAkBT,EAAiB,aACnCnO,GAAeiO,EAAoB,UACnChO,GAAiBkO,EAAiB,YAClC7G,GAAsB6G,EAAiB,iBACvC3G,GAAsB2G,EAAiB,iBACvC5E,GAAmB0E,EAAoB,cACvCzE,GAAoByE,EAAoB,eACxCxE,GAAkBwE,EAAoB,aACtCvE,GAAqBuE,EAAoB,gBACzCtE,GAAoB6E,EAAS,eAC7BjI,GAAkBiI,EAAS,aAC3B1D,GAAqB0D,EAAS,gBAC9B3E,GAAwB8E,EAAU,mBAClCpG,GAAuBoG,EAAU,kBACjCnG,GAAwBmG,EAAU,mBAClClG,GAAoB0F,EAAiB,eACrCpF,GAA0B4F,EAAU,qBACpC1E,GAAwBkE,EAAiB,mBACzC9H,GAAiBsI,EAAU,YAC3BlI,GAAsB0H,EAAiB,iBACvCxH,GAAawH,EAAiB,QAC9BtH,GAAkBsH,EAAiB,aACnCpH,GAAakH,EAAoB,QACjChH,GAAegH,EAAoB,UACnC9G,GAAmB8G,EAAoB,cACvC5G,GAAe4G,EAAoB,UACnCjD,GAAyBmD,EAAiB,oBAC1CjD,GAA0B+C,EAAoB,qBAC9CvF,GAAkBiG,EAAU,aAC5BhG,GAAqBgG,EAAU,gBAC/B9F,GAAoB8F,EAAU,eAC9BpD,GAAiB4C,EAAiB,YAClC1C,GAAe0C,EAAiB,UAChCxC,GAAewC,EAAiB,UAChCtC,GAAmBsC,EAAiB,cACpCpC,GAAuBoC,EAAiB,kBACxClC,GAAkBgC,EAAoB,aACtC9B,GAAiBgC,EAAiB,YAiClCU,GAAmBnO,EAAgB4F,EAAW,UAC9CwI,GAAsBpO,EAAgBmK,EAAc,UACpDkE,GAAgC9D,EAAoB6D,GAAsB,SAC1EE,IAAqB5G,GAAkB,IAAMC,GAAmB,GAChE4G,GAAoB5G,EAAe,UAAMA,GAAmB,GAAK,GAAKA,EAAnC,MAAyD,EAC5F6G,GAAoBF,GAAiB,UAAMA,IAAqB,GAAK,GAAKA,GAArC,MAA6D,EAwBlG5I,GAAe,CAAEX,cAAaC,kBAhDV,SAAC1J,GAAO,IACtBG,EAAUH,EAAEE,OAAZC,MACJA,GAAmB,gBAAVA,GAAqC,SAAVA,EACpCgS,EAAiB,cAAjBA,CAAgC,KlBjNjB,SAAAgB,GAC3B,IAAMC,EAAeD,EAAW7M,QAAQ,cAAe,UAAUA,QAAQ,wCAAyC,SAClH,MAA2B,MAApB8M,EAAa,GAAb,eAAkCA,EAAlC,UAAyDA,EkB+MdC,CAAgBlT,IAEtDgS,EAAiB,cAAjBA,CAAgC,KAAhC,oBA2C+CxI,aAtBlC,CACjBhL,SAAWA,EAAD,UAAqBA,GAAY,IAAMA,EAAW,IAAlD,MAAY,IACtBoD,MAAM,IAAD,OAAM8Q,IACX7T,WAAY0L,EACZ4I,WAAYnQ,EAAcyH,GAC1B2I,UAAW3I,EACX4I,WAAY1I,EAAO,OAAS,SAC5B2I,UAAWzI,EAAS,SAAW,SAC/B0I,eAAgB,UAAGxI,EAAa,YAAc,IAA9B,OAAmCE,EAAS,gBAAkB,IAAK3K,QAAU,OAC7FmJ,gBACA2B,cAAiC,eAAlBA,EAAiCA,EAAgB,OAChEoI,YAA+B,eAAlBpI,EAAiCA,EAAgB,SAC9DjN,gBAAgB,IAAD,OAAMwU,IACrBc,gBAAgB,oBAAD,OAAuBb,GAAvB,cAA0DA,GAA1D,KACf1E,WAAY4E,GACZY,WAAYX,GACZtG,YAAY,GAAD,OAAKA,IAAe,EAApB,MACXkH,WAA6B,WAAhBxH,EAA2BA,EAAgBQ,EAAD,UAAiCA,GAAqB,GAAjC,OAC5E7C,aAAa,GAAD,OAAKA,GAAgB,EAArB,MACZjM,UAAU,GAAD,OAAKA,GAAa,EAAlB,QAKP+V,GAAmB,CACrBjQ,SACAC,WACAC,gBACAC,kBACAqL,YAAUC,kBACVC,UAAQC,gBACRC,UAAQC,gBACRC,cAAYC,oBACZC,kBAAgBC,wBAChBC,aAAWC,mBACXC,YAAUC,kBACVC,iBAAeC,oBApES,SAACrQ,GACzB,IAAMgU,EAAmBxB,EAAS,gBAATA,CAA0BxS,GAC7CiU,EAAsC,KAArBD,ElBrMA,SAAA5D,GAC/B,OAAO8D,OAAOC,aAAaC,SAAShE,EAAe,KkBoMMiE,CAAoBL,GAAoB,GACzF7B,EAAiB,cAAjBA,CAAgC,KAAM8B,IAkEtC3O,eAAagL,kBA3ES,SAACtQ,GACvB,IAAMiU,EAAiB3B,EAAU,cAAVA,CAAyBtS,GAC1CgU,EAAsC,KAAnBC,EAAwB5O,EAAoB4O,GAAkB,GACvF9B,EAAiB,gBAAjBA,CAAkC,KAAM6B,KA2EtCM,GAAyB,CAC3B1K,gBACA2B,gBACAD,uBACAE,uBACAlB,YACAC,mBACAH,gBACAzL,WACA0L,kBACAG,gBACAC,uBACAC,OACAC,cACAC,YAAWC,mBACXC,OAAMC,cACNC,SAAQC,gBACRC,aAAYC,oBACZC,SAAQC,iBAGNkJ,GAAwB,CAC1BnK,gBACAgC,iBACAC,kBACAC,cACAC,wBACAC,yBACAC,qBACAzO,YAAW0O,mBACXzC,eAAc0C,sBACdC,eAAaC,qBACbC,oBAAmBC,4BAGjByH,GAAqB,CACvBrH,aACAC,cACAC,YACAC,eACAC,oBACAC,qBACAC,mBACAC,sBACAxO,cACAyO,qBACAC,kBACAC,yBACAC,aACAC,iBA1GqB,SAAC/N,GACtBmS,EAAiB,aAAjBA,CAA+BnS,GACR,WAAnBA,EAAEE,OAAOC,OAA0C,MAApByN,GAC/BuE,EAAiB,kBAAjBA,CAAoC,KAAM,KAEvB,WAAnBnS,EAAEE,OAAOC,OAA0C,MAApByN,GAC/BuE,EAAiB,kBAAjBA,CAAoC,KAAM,MAqG9CnE,kBACAC,0BAGEwG,GAAsB,CACxB5F,eACAC,sBACAC,mBACAC,0BACA5E,gBACA6E,oBACAC,4BAGJ,OACI,kBAACwF,EAAA,EAAD,CAAe5W,MAAOA,IACtB,kBAAC,GAAD,CACIqD,KAAMN,EACNT,QAASA,EACTuU,kBAAgB,oBAChBC,OAAO,OACP1T,UAAU,6BACVE,WAAW,EACXC,UAAU,GAEV,yBAAKH,UAAU,UACX,kBAACI,EAAA,EAAD,CAAaJ,UAAU,gBACnB,8DAEJ,yBAAKA,UAAU,kBACX,kBAACW,EAAA,EAAD,CACIJ,QAAQ,YACRM,MAAM,UACND,QAAS1B,EACTc,UAAU,gBAJd,UAQA,kBAACW,EAAA,EAAD,CACIJ,QAAQ,YACRM,MAAM,UACND,QAAS,aACTZ,UAAU,gBAJd,YAWR,kBAACK,EAAA,EAAD,CAAeL,UAAU,WACrB,yBAAKA,UAAU,oBACX,kBAAC,GAAD,CACIA,UAAU,aACVf,MAAO6R,EACPrQ,SAAUiR,GACViC,YAAY,WACZ9S,MAAM,UACN+S,eAAe,WAEf,kBAAC,GAAD,CAAW5T,UAAU,YAAY4K,MAAM,UACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,gBACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,gBACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,SACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,gBACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,eACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,cACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,WACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,YACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,QACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,eACvC,kBAAC,GAAD,CAAW5K,UAAU,YAAY4K,MAAM,WAG/C,yBAAK5K,UAAU,qBACK,IAAd8Q,GAAmB,kBAAC,EAAD,MACL,IAAdA,GAAmB,kBAAC,EAAD,MACL,IAAdA,GAAmB,kBAAC,EAAD,MACL,IAAdA,GAAmB,kBAAC,EAAgB+B,IACtB,IAAd/B,GAAmB,kBAAC,EAAD,MACL,IAAdA,GAAmB,kBAAC,GAAsBsC,IAC5B,IAAdtC,GAAmB,kBAAC,GAAqBuC,IAC3B,IAAdvC,GAAmB,kBAAC,GAAkBwC,IACxB,IAAdxC,GAAmB,kBAAC,GAAmByC,IACzB,IAAdzC,GAAmB,kBAAC,GAAD,MACL,KAAdA,GAAoB,kBAAC+C,GAAD,MACN,KAAd/C,GAAoB,kBAAC,GAAgB+B,Y,GA7YpC/R,IAAMC,YCKlB+S,G,2MA5Bb1V,MAAQ,CACNuB,QAAQ,G,EAGVyB,YAAc,WACZ,EAAKrC,SAAS,YACZ,MAAO,CACLY,QAF0B,EAAbA,W,wEAOT,IAAD,OAEP,OACE,yBAAKK,UAAU,OACb,4BAAQY,QAASlB,KAAK0B,aAAtB,QACA,kBAAC,GAAD,CACEzB,OAAQD,KAAKtB,MAAMuB,OACnBT,QAAS,WACP,EAAKH,SAAS,CAAEY,QAAQ,Y,GArBlBmB,IAAMC,WCOJgT,QACW,cAA7B3N,OAAO4N,SAASC,UAEe,UAA7B7N,OAAO4N,SAASC,UAEhB7N,OAAO4N,SAASC,SAASzC,MACvB,2DCZN0C,IAASC,OAAO,kBAAC,GAAD,MAASnO,SAASoO,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a167a797.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: '183px',\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass NewGroupDialog extends React.Component {\r\n\r\n    state = this.props.groupType !== \"xref\" \r\n          ? { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\" }\r\n          : { nameEN: \"\", nameDE: \"\", nameRU: \"\", nameFR: \"\", groupKey: \"\" };\r\n    \r\n    onInputChange = inputName => e => {\r\n        this.setState({ \r\n            [inputName]: e.target.value \r\n        });\r\n    };\r\n\r\n    onClose = () => {\r\n        const {currentGroup, hideDialog } = this.props;\r\n        this.setState({ ...currentGroup });\r\n        hideDialog()\r\n    };\r\n\r\n    onSave = () => {\r\n        const { onSave, changeGroupSelect, hideDialog, groupType } = this.props;\r\n        if (this.state.nameEN.trim().length && (groupType !== \"xref\" || this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                nameEN: this.state.nameEN.trim(),\r\n                nameDE: this.state.nameDE.trim(),\r\n                nameRU: this.state.nameRU.trim(),\r\n                nameFR: this.state.nameFR.trim(),\r\n            };\r\n            if (groupType === \"xref\") {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            onSave(groupToSave);\r\n            changeGroupSelect(this.state.nameEN.trim());\r\n            hideDialog();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode } = this.props;\r\n        const { onInputChange, onSave, onClose } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${this.props.groupType === \"xref\" ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"paragraphDecorators-dialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        {\r\n                            this.props.groupType === \"xref\" \r\n                            &&\r\n                            <>\r\n                                <span>Group Key</span>\r\n                                <TextField \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    value={this.state.groupKey}\r\n                                />\r\n                            </>\r\n                        }\r\n                        <span>Name EN</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameEN\")}\r\n                            value={this.state.nameEN}\r\n                        />\r\n                        <span>Name DE</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameDE\")} \r\n                            value={this.state.nameDE}\r\n                        />                        \r\n                        <span>Name RU</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameRU\")} \r\n                            value={this.state.nameRU}\r\n                        />                        \r\n                        <span>Name FR</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameFR\")} \r\n                            value={this.state.nameFR}\r\n                        />                    \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (View) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isOpen: false,\r\n            groupSelect: \"\",\r\n            newGroup: {},\r\n        }\r\n        \r\n        handleClick = () => {\r\n            this.setState(({ isOpen }) => {\r\n                return {\r\n                    isOpen: !isOpen\r\n                };\r\n            })\r\n        }\r\n    \r\n        onSave = newGroup => {\r\n            this.setState({ newGroup });\r\n        }\r\n    \r\n        changeGroupSelect = (newValue) => {\r\n            this.setState({\r\n                groupSelect: newValue,\r\n            });\r\n        }\r\n\r\n        hideDialog = () => {\r\n            this.setState({ isOpen: false });\r\n        }\r\n        \r\n        render() {\r\n            const { handleClick, onSave, changeGroupSelect, hideDialog } = this; \r\n            return <View \r\n                {...this.props} \r\n                {...this.state}\r\n                {...{ handleClick, onSave, changeGroupSelect, hideDialog }}\r\n                />\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport CustomInput from '../../common/CustomInput';\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from '../../common/withNewGroupControl';\r\n\r\nconst NamesSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Key</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    <option value=\"\">...</option>\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"0\">Text</option>\r\n                    <option value=\"1\">Heading</option>\r\n                    <option value=\"2\">Heading Heading Heading Heading</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n\r\n            <span>Active</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n            <span>Style name (English)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (German)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (Russian)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <span>Style name (French)</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"decorators\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(NamesSection);","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst WordExportSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Style name in WORD</span>\r\n            <TextField variant=\"outlined\" margin=\"dense\" />\r\n            \r\n            <span>Soft return</span>\r\n            <div>\r\n                <Checkbox color=\"primary\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","export const listStyleType = [\r\n  {\r\n    name: 'Decimal',\r\n    value: 'decimal',\r\n  },\r\n  {\r\n    name: 'Decimal leading zero',\r\n    value: 'decimal-leading-zero',\r\n  },\r\n  {\r\n    name: 'Lower alpha',\r\n    value: 'lower-alpha',\r\n  },\r\n  {\r\n    name: 'Lower greek',\r\n    value: 'lower-greek',\r\n  },\r\n  {\r\n    name: 'Lower latin',\r\n    value: 'lower-latin',\r\n  },\r\n  {\r\n    name: 'Lower roman',\r\n    value: 'lower-roman',\r\n  },\r\n  {\r\n    name: 'Upper alpha',\r\n    value: 'upper-alpha',\r\n  },\r\n  {\r\n    name: 'Upper greek',\r\n    value: 'upper-greek',\r\n  },\r\n  {\r\n    name: 'Upper latin',\r\n    value: 'upper-latin',\r\n  },\r\n  {\r\n    name: 'Upper roman',\r\n    value: 'upper-roman',\r\n  },\r\n];\r\n\r\nexport const backSpaceActions = [\r\n  { key: 'merge', value: 'Merge' },\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'remove_pd', value: 'Remove PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const returnOnEmptySectionActions = [\r\n  { key: 'apply_other_pd', value: 'Apply other PD' },\r\n  { key: 'create_new_section', value: 'Create new section' },\r\n  { key: 'apply_default_pd', value: 'Apply default PD' },\r\n  { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const decoratorsList = [\r\n    { name: \"...\", value: null },\r\n    { name: \"Text 0\", value: \"quick_text_0\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n];\r\n\r\nexport const alignmentsMap = {\r\n  center: \"center\",\r\n  left: \"flex-start\",\r\n  right: \"flex-end\",\r\n  justify: \"flex-start\",\r\n};","import PositioningSection from \"./PositioningSection.js\";\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport CustomInput from 'components/common/CustomInput';\r\nimport CustomInputShort from 'components/common/CustomInputShort';\r\n\r\nimport { backSpaceActions, returnOnEmptySectionActions, decoratorsList } from 'constants.js'\r\n\r\nimport './style.css';\r\n\r\nconst PositioningSection = (props) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <NativeSelect id=\"r1c2\" input={ <CustomInputShort /> }>\r\n                <option value={null}>...</option>\r\n                <option value=\"0\">0</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n            </NativeSelect>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <NativeSelect id=\"r3c2\" input={ <CustomInput /> }>\r\n                {backSpaceActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n            <span id=\"r4c1\">At the beginning of a section WITHOUT content</span>\r\n            <NativeSelect id=\"r4c2\" input={ <CustomInput /> }>\r\n                {returnOnEmptySectionActions.map(action => (\r\n                    <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                ))}\r\n            </NativeSelect>\r\n\r\n            <div id=\"r5\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n            <span id=\"r6c1\">Style of next section</span>\r\n            <NativeSelect id=\"r6c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r7c1\">In empty section change current style to</span>\r\n            <NativeSelect  id=\"r7c2\" input={ <CustomInput /> }>\r\n                <option value=\"default\">Global Fallback Style</option>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n\r\n            <div id=\"r8\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n            <span id=\"r9c1\">TAB – change current style to</span>\r\n            <NativeSelect  id=\"r9c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n            <span id=\"r10c1\">SHIFT+TAB – change current style to</span>\r\n            <NativeSelect  id=\"r10c2\" input={ <CustomInput /> }>\r\n                { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n            </NativeSelect>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PositioningSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { listStyleType } from '../../../constants'\r\n\r\nconst ListSection = ({ isList, listType, changeIsList, changeListType, bulletField, changeBulletField }) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><div className=\"listSection-firstSpan\"><span>Is it a list?</span></div></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><span>List name</span></li>\r\n                            <li><span>Order level</span></li>\r\n                            <li><span>Prefix</span></li>\r\n                            <li><span>Suffix</span></li>\r\n                            <li><span>Suffix distance</span></li>\r\n                            <li><span>Magic Tabs</span></li>\r\n                            <li><span>Type of list</span></li>\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><Checkbox color=\"primary\" checked={isList} onChange={changeIsList} /></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value={null}>...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                            <li>\r\n                                <NativeSelect input={ <CustomInputShort /> }>\r\n                                    <option value=\"0.5\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </li>\r\n                            <li><Checkbox color=\"primary\" /></li>\r\n                            <li>\r\n                                <NativeSelect value={listType} onChange={changeListType} input={ <CustomInput /> }>\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Bullet character</span></li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\"><span>Numbering style</span></li>\r\n                                    <li><span>Continue numbering after interruption</span></li>\r\n                                    <li><span>Allow restart numbering</span></li>\r\n                                    <li><span>Include previous levels from</span></li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                <li></li>\r\n                    { isList && (\r\n                        <React.Fragment>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            <li></li>\r\n                            { listType === \"unordered\" ? (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <TextField \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"paragraphDecorators-dialog__bullet-input\" \r\n                                            onChange={changeBulletField}\r\n                                            value={bulletField}\r\n                                         />                                            \r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            { bulletField ? `Unicode: ${bulletField.charCodeAt(0).toString(16)}` : \"\"}\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            ) : (\r\n                                <React.Fragment>\r\n                                    <li className=\"paragraphDecorators-dialog__fraction-title\">\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            {listStyleType.map(style => (\r\n                                              <option value={style.value} key={style.value}>{style.name}</option>\r\n                                            ))}                                    \r\n                                        </NativeSelect>\r\n                                    </li>\r\n                                    <li><Checkbox color=\"primary\" /></li>\r\n                                    <li><Checkbox color=\"primary\" checked={true} /></li>\r\n                                    <li>\r\n                                        <NativeSelect input={ <CustomInputShort /> }>\r\n                                            <option value={null}>...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                        <span className=\"paragraphDecorators-dialog__grey-text\">\r\n                                            Preview: А.1.1\r\n                                        </span>\r\n                                    </li>\r\n                                </React.Fragment>\r\n                            )}\r\n                        </React.Fragment>\r\n                    ) }\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ListSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInput from '../../common/CustomInput';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport NewGroupDialog from '../../common/NewGroupDialog';\r\nimport withNewGroupControl from \"../../common/withNewGroupControl\";\r\n\r\nconst ReferencingSection = (props) => {\r\n    const newGroupName = props.newGroup.nameEN;\r\n    const isEditMode = !!newGroupName;\r\n    const { groupSelect, newGroup, isOpen, hideDialog, handleClick, onSave, changeGroupSelect } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Reference group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={groupSelect} \r\n                    onChange={(e) => {\r\n                        changeGroupSelect(e.target.value)\r\n                    }} \r\n                >\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"\">none</option>\r\n                    <option value=\"0\">Reference group 1</option>\r\n                    <option value=\"1\">Reference group 2</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && groupSelect !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={changeGroupSelect}\r\n                groupType=\"xref\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(ReferencingSection);","export const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n}\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n}\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n}\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n}","import * as React from 'react';\r\nimport deepEqual from 'fast-deep-equal';\r\nimport * as PropTypes from 'prop-types';\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, ' ');\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === 'function' ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== 'function' ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || 'div', Object.assign({}, props, { ref: typeof innerRef === 'function' ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport ContentEditable from \"components/common/ContentEditable\";\r\nimport { getOffset } from \"utils.js\"\r\n\r\nconst Preview = ({previewText, changePreviewText, previewStyle}) => {\r\n    const { verticalAlign, fontSize } = previewStyle;\r\n    console.log(parseFloat(previewStyle.marginTop));\r\n    const editableContentStyle = {\r\n        ...previewStyle, \r\n        outline: \"none\",\r\n        marginTop: `${parseFloat(previewStyle.marginTop) + getOffset(verticalAlign, fontSize)}pt`,\r\n        marginBottom: `${parseFloat(previewStyle.marginBottom) - getOffset(verticalAlign, fontSize)}pt`,\r\n    };\r\n\r\n    console.log(editableContentStyle);\r\n\r\n    const demonstrationElementClassName = \"demonstrationElement\";\r\n    const selectAllPreviewContent = e => {\r\n        if (e.target.className === demonstrationElementClassName) {\r\n            window.getSelection().selectAllChildren(e.target.children[0]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\" onClick={selectAllPreviewContent}>\r\n                <div className={demonstrationElementClassName}>\r\n                    <ContentEditable\r\n                        className={`${demonstrationElementClassName}-text`}\r\n                        onChange={changePreviewText} \r\n                        html={previewText}\r\n                        style={editableContentStyle}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preview;","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"utils.js\";\r\nimport Preview from \"components/common/Preview\";\r\nimport CustomInput from \"components/common/CustomInput\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = (props) => {\r\n    const { previewProps, fontSize, changeFontSize, fontColor, changeFontColor, fontColorName,\r\n        changeFontColorName,\r\n        font, \r\n        changeFont,\r\n        alignment, changeAlignment,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,\r\n        stroke, changeStroke, \r\n        verticalAlign, changeVerticalAlign,\r\n        textTransform, changeTextTransform} = props;\r\n\r\n        const correctColor = getCorrectColor(fontColor);\r\n\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeFont}\r\n                >\r\n                    <option value={\"Roboto, slab-serif\"}>Roboto</option>\r\n                    <option value={\"'Source Serif Pro', serif\"}>Source Serif</option>\r\n                </NativeSelect>\r\n\r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(\"12\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                    value={fontColorName}\r\n                    onChange={changeFontColorName}\r\n                    onClick={selectAllOnClick(\"Black\")}\r\n                />\r\n\r\n                <span>Font color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\" \r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={fontColor}\r\n                        onChange={changeFontColor}\r\n                        onClick={selectAllOnClick(\"000\")}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_indented\">\r\n            <span>Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox labeledCheckbox_topIndented\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Sub/Superscript</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={verticalAlign} \r\n                    onChange={changeVerticalAlign} \r\n                >\r\n                    <option value=\"baseline\">None</option>\r\n                    <option value=\"sub\">Subscript</option>\r\n                    <option value=\"super\">Superscript</option>\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TypographySection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { selectAllOnClick } from \"utils.js\";\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\nimport Preview from \"components/common/Preview\";\r\n\r\nconst DistancesSection = (props) => {\r\n    const {\r\n        previewProps,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        changeFirstRowIndent,\r\n        changeOtherRowsIndent,\r\n        changeLineSpacing,\r\n        marginTop, changeMarginTop,\r\n        marginBottom, changeMarginBottom,\r\n        wordSpacing, changeWordSpacing,\r\n        customLineSpacing, changeCustomLineSpacing,\r\n    } = props;\r\n    \r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Margin top</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginTop}\r\n                        onChange={changeMarginTop}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>Margin bottom</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginBottom}\r\n                        onChange={changeMarginBottom}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>1st row indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={firstRowIndent}\r\n                        onChange={changeFirstRowIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Other rows indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={otherRowsIndent}\r\n                        onChange={changeOtherRowsIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Line spacing</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInputShort /> } \r\n                        value={lineSpacing} \r\n                        onChange={changeLineSpacing} \r\n                    >\r\n                        <option value=\"1.0\">1.0</option>\r\n                        <option className=\"highlightedOption\" value=\"1.15\">1.15</option>\r\n                        <option value=\"1.5\">1.5</option>\r\n                        <option value=\"2.0\">2.0</option>\r\n                        <option value=\"2.5\">2.5</option>\r\n                        <option value=\"3.0\">3.0</option>\r\n                        <option value=\"custom\">Custom</option>\r\n                    </NativeSelect> \r\n                    {\r\n                    lineSpacing === \"custom\" && \r\n                    (\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                        />                                            \r\n                    )\r\n                }\r\n                </div>\r\n                   \r\n                    \r\n                <span>Word spacing</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={wordSpacing}\r\n                        onChange={changeWordSpacing}\r\n                        onClick={selectAllOnClick(\"0\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DistancesSection;","import { withStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      'label + &': {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: 'relative',\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '1px solid #ced4da',\r\n      fontSize: 16,\r\n      padding: '10px 26px 10px 12px',\r\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n      fontFamily: [\r\n        'Arial',\r\n        'sans-serif',\r\n      ].join(','),\r\n      '&:hover': {\r\n        borderRadius: 4,\r\n        borderColor: '#212121',\r\n      },\r\n      '&:focus': {\r\n        borderRadius: 4,\r\n        borderColor: '#2f9aef',\r\n        boxShadow: '0 0 0 0.5px #2f9aef',\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default FrameTypeInput;","import FramesSection from \"./FramesSection.js\";\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport { getCorrectColor, selectAllOnClick } from 'utils.js';\r\nimport FrameTypeInput from 'components/NewDecDialog/sections/FramesSection/FrameTypeInput';\r\n\r\nimport \"./style.css\";\r\n\r\nconst FramesSection = (props) => {\r\n    const { \r\n        leftBorder, \r\n        rightBorder, \r\n        topBorder, \r\n        bottomBorder, \r\n        changeLeftBorder,\r\n        changeRightBorder,\r\n        changeTopBorder,\r\n        changeBottomBorder,\r\n        borderColor,\r\n        changeBorderColor,\r\n        borderThickness,\r\n        changeBorderThickness,\r\n        borderType,\r\n        changeBorderType,\r\n        borderColorName,\r\n        changeBorderColorName,\r\n     } = props;\r\n\r\n     const correctColor = getCorrectColor(borderColor);\r\n     const colorSampleStyle = {\r\n         backgroundColor: `#${correctColor}`,\r\n     };\r\n     const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n     const previewStyle = {\r\n         borderLeft: leftBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginLeft: leftBorder ? \"0\" : previewBorderWidth, \r\n         borderRight: rightBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginRight: rightBorder ? \"0\" : previewBorderWidth, \r\n         borderTop: topBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginTop: topBorder ? \"0\" : previewBorderWidth, \r\n         borderBottom: bottomBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginBottom: bottomBorder ? \"0\" : previewBorderWidth, \r\n     };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"directionControlsContainer\">\r\n                <div className=\"directionsControls\" style={previewStyle}>\r\n                    <span className=\"directionLabel\">Left</span>\r\n                    <div className=\"centralColumn\">\r\n                        <span className=\"directionLabel\">Top</span>\r\n                        <div className=\"checkboxesKit crossGrid\">\r\n                            <div id=\"r1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={topBorder}  \r\n                                    onChange={changeTopBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={leftBorder}  \r\n                                    onChange={changeLeftBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c2\" className=\"gridCell\">\r\n                            </div>\r\n                            <div id=\"r2c3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={rightBorder}  \r\n                                    onChange={changeRightBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={bottomBorder}  \r\n                                    onChange={changeBottomBorder}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"directionLabel\">Bottom</span>\r\n                    </div>\r\n                    <span className=\"directionLabel\">Right</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Frame color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    value={borderColorName}\r\n                    onChange={changeBorderColorName}\r\n                    onClick={selectAllOnClick(\"Red\")}\r\n                />\r\n\r\n                <span>Frame color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\" \r\n                        InputProps={{\r\n                           startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={borderColor}\r\n                        onChange={changeBorderColor}\r\n                        onClick={selectAllOnClick(\"f00\")}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n                \r\n\r\n                <span>Frame thickness</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={borderThickness}\r\n                        onChange={changeBorderThickness}\r\n                        onClick={selectAllOnClick(\"2\")}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>                        \r\n\r\n                <span>Type of frame</span>\r\n                <div >\r\n                    <Select\r\n                      input={<FrameTypeInput />}\r\n                      value={borderType}\r\n                      onChange={changeBorderType}\r\n                    >\r\n                        <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                        <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                        <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                        <MenuItem value=\"double\">══════</MenuItem>              \r\n                    </Select>\r\n                </div>\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox color=\"primary\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FramesSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { getCorrectColor, selectAllOnClick } from 'utils.js';\r\nimport Preview from \"components/common/Preview\";\r\n\r\nconst  FillingSection = (props) => {\r\n    const { \r\n        previewProps, \r\n        fillingColor, changeFillingColor, \r\n        fillingColorName, changeFillingColorName,\r\n        connectToPrevious, changeConnectToPrevious,\r\n     } = props;\r\n        const correctColor = getCorrectColor(fillingColor);\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color name</span>\r\n                <div>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        className=\"middleSizeTextInput\" \r\n                        value={fillingColorName}\r\n                        onChange={changeFillingColorName}\r\n                    />\r\n                </div>\r\n\r\n                <span>Filling color HEX</span>\r\n                <div className=\"colorField\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\" \r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                        }}\r\n                        value={fillingColor}\r\n                        onChange={changeFillingColor}\r\n                        onClick={selectAllOnClick()}\r\n                    />\r\n                    <div className=\"colorSample\" style={colorSampleStyle}></div>\r\n                </div>\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox \r\n                        color=\"primary\" \r\n                        checked={connectToPrevious} \r\n                        onChange={changeConnectToPrevious} \r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FillingSection;","import React from 'react';\r\n\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport CustomInputShort from '../../common/CustomInputShort';\r\n\r\nconst TocSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                <li><span>ToC indentation</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li>                    \r\n                        <NativeSelect input={ <CustomInputShort /> }>\r\n                            <option value={null}>...</option>\r\n                            <option value=\"0\">0</option>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"2\">2</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"4\">4</option>\r\n                            <option value=\"5\">5</option>\r\n                        </NativeSelect>\r\n                    </li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TocSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst ShortCutSection = (props) => {\r\n    return (\r\n        <form className=\"paragraphDecorators-dialog__form\">\r\n            <ul className=\"paragraphDecorators-dialog__field-list\">\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><span>Windows</span></li>\r\n                    <li><span>Mac</span></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col\">\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                    <li><TextField variant=\"outlined\" margin=\"dense\" /></li>\r\n                </div>\r\n                <div className=\"paragraphDecorators-dialog__col \">\r\n                </div>\r\n            </ul>\r\n                \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ShortCutSection;","import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\n\r\nimport CustomInput from 'components/common/CustomInput';\r\nimport CustomInputShort from 'components/common/CustomInputShort';\r\nimport { listStyleType } from 'constants.js'\r\nimport { selectAllOnClick } from 'utils';\r\nimport { unicodeNumberToChar, unicodeCharToNumber } from 'utils.js';\r\n\r\n\r\nconst TestSection = (props) => {\r\n    const {\r\n        isList, changeIsList, \r\n        listType, changeListType, \r\n        listName, changeListName,\r\n        prefix, changePrefix,\r\n        suffix, changeSuffix,\r\n        orderLevel, changeOrderLevel,\r\n        suffixDistance, changeSuffixDistance,\r\n        magicTabs, changeMagicTabs,\r\n        listItem, changeListItem,\r\n        unicodeNumber, changeUnicodeNumber,\r\n        unicodeChar, changeUnicodeChar,\r\n    } = props;\r\n    \r\n    console.log(unicodeCharToNumber(unicodeChar));\r\n    return (\r\n        <>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div className=\"listSection-firstSpan\">\r\n                    <span>Is it a list?</span>\r\n                </div>\r\n                <div>\r\n                    <Checkbox \r\n                        color=\"primary\" \r\n                        checked={isList} \r\n                        onChange={changeIsList} \r\n                    />\r\n                </div>\r\n                { isList && (\r\n                    <>\r\n                        <span>List name</span>\r\n                        <TextField\r\n                            value={listName}\r\n                            onChange={changeListName} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                        />\r\n\r\n                        <span>Order level</span>\r\n                        <div>\r\n                            <NativeSelect\r\n                                value={orderLevel}\r\n                                onChange={changeOrderLevel}\r\n                                input={ <CustomInputShort /> }\r\n                            >\r\n                                <option value=\"\">...</option>\r\n                                <option value=\"0\">0</option>\r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"2\">2</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                            </NativeSelect>\r\n                        </div>\r\n\r\n                        <span>Prefix</span>\r\n                        <TextField\r\n                            value={prefix}\r\n                            onChange={changePrefix} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                        />\r\n\r\n                        <span>Suffix</span>\r\n                        <TextField\r\n                            value={suffix}\r\n                            onChange={changeSuffix} \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                        />\r\n\r\n                        <span>Suffix distance</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <NativeSelect\r\n                                value={suffixDistance}\r\n                                onChange={changeSuffixDistance} \r\n                                input={ <CustomInputShort /> }\r\n                            >\r\n                                <option value=\"0.25\">0.25</option>\r\n                                <option value=\"0.5\">0.5</option>\r\n                                <option value=\"0.75\">0.75</option>\r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"1.25\">1.25</option>\r\n                                <option value=\"1.5\">1.5</option>\r\n                                <option value=\"1.75\">1.75</option>\r\n                                <option value=\"2\">2</option>\r\n                            </NativeSelect>\r\n                            <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                        </div>\r\n\r\n                        <span>Magic Tabs</span>\r\n                        <div>\r\n                            <Checkbox \r\n                                color=\"primary\" \r\n                                checked={magicTabs} \r\n                                onChange={changeMagicTabs} \r\n                            />\r\n                        </div>\r\n\r\n                        <span>Type of list</span>\r\n                        <div>\r\n                            <NativeSelect \r\n                                value={listType} \r\n                                onChange={changeListType} \r\n                                input={ <CustomInput /> }\r\n                            >\r\n                                <option value={\"unordered\"}>Unordered</option>\r\n                                <option value={\"ordered\"}>Ordered</option>\r\n                                <option value={\"sideNumber\"}>Side number</option>\r\n                            </NativeSelect>\r\n                        </div>\r\n                    </>\r\n                ) }\r\n            </div>\r\n            {\r\n                isList && listType === \"unordered\" && (\r\n                    <>\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                                <span className=\"listSection-firstSpan\">List item</span>\r\n                                <div className=\"listItemSelect\">\r\n                                    <NativeSelect \r\n                                        value={listItem} \r\n                                        onChange={changeListItem} \r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option  value={\"bulletpoint\"}>•</option>\r\n                                        <option value={\"dash\"}>–</option>\r\n                                        <option value={\"star\"}>⋆</option>\r\n                                        <option value={\"individual\"}>Other</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                            </div>\r\n                            {   listItem === \"individual\" && (\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Unicode number</span>\r\n                                        <div>\r\n                                            <TextField \r\n                                                value={unicodeNumber}\r\n                                                onChange={changeUnicodeNumber}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"unicodeInput\" \r\n                                                InputProps={{\r\n                                                    startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Char</span>\r\n                                        <div>\r\n                                            <TextField \r\n                                                value={unicodeChar}\r\n                                                onChange={changeUnicodeChar}\r\n                                                onClick={selectAllOnClick()}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"bulletInput\" \r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div> )\r\n                            }\r\n                        </div>\r\n                        \r\n                        \r\n                    </>\r\n                ) \r\n            } \r\n        </>\r\n    );\r\n};\r\n\r\nexport default TestSection;","import { createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport pink from '@material-ui/core/colors/pink';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\r\n\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: 'initial',\r\n      backgroundColor: 'white',\r\n      transition: '0.2s',\r\n\r\n      '&:before': {\r\n        transition: '0.2s',\r\n      },\r\n\r\n      '&:hover': {\r\n        color: '#000',\r\n      },\r\n      '&$selected': {\r\n        backgroundColor: '#2196f3',\r\n        color: 'white',\r\n        opacity: 1,\r\n      },\r\n      '&:hover:active': {\r\n        backgroundColor: 'white',\r\n        transition: '0.2s',\r\n      },\r\n      '&$selected:hover:active': {\r\n        backgroundColor: '#2ca4ff',\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import Tabs from '@material-ui/core/Tabs';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTabs = withStyles(theme => ({\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n      }\r\n  }))(Tabs);\r\n\r\n  export default CustomTabs;","import { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1150px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        '&:after': {\r\n            height: '100%',\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: '1280px',\r\n        maxHeight: '850px',\r\n        minHeight: '550px',\r\n        width: 'calc(100% - 96px)',\r\n        height: 'calc(100% - 96px)',\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        border: 'none',\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: 'middle',\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","import React from 'react';\r\n\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport NamesSection from './sections/NamesSection';\r\nimport WordExportSection from './sections/WordExportSection';\r\nimport PositioningSection from './sections/PositioningSection';\r\nimport ListSection from './sections/ListSection';\r\nimport ReferencingSection from './sections/ReferencingSection';\r\nimport TypographySection from './sections/TypographySection';\r\nimport DistancesSection from './sections/DistancesSection';\r\nimport FramesSection from './sections/FramesSection';\r\nimport FillingSection from './sections/FillingSection';\r\nimport TocSection from './sections/TocSection';\r\nimport ShortCutsSection from './sections/ShortCutsSection';\r\nimport TestSection from './sections/TestSection';\r\n\r\nimport theme from '../../theme';\r\nimport CustomTab from '../common/CustomTab';\r\nimport CustomTabs from '../common/CustomTabs';\r\nimport CustomDialog from '../common/CustomDialog';\r\nimport { getCorrectColor, getUnstyledText, unicodeNumberToChar, unicodeCharToNumber } from 'utils.js';\r\nimport { alignmentsMap } from 'constants.js';\r\n\r\nimport \"./style.css\";\r\n\r\nclass NewDecDialog extends React.Component {\r\n    state = { \r\n        openedTab: 11,\r\n        isList: true,\r\n        listType: \"unordered\",\r\n        bulletField: \"\",\r\n        verticalAlign: \"baseline\",\r\n        textTransform: \"none\",\r\n        leftBorder: false,\r\n        rightBorder: false,\r\n        topBorder: false,\r\n        bottomBorder: false,\r\n        borderType: \"solid\",\r\n        borderColor: \"f00\",\r\n        borderColorName: \"Red\",\r\n        borderThickness: \"2\",\r\n        fontSize: \"12\",\r\n        fontColor: \"000\",\r\n        fontColorName: \"Black\",\r\n        alignment: \"left\",\r\n        font: \"Roboto\",\r\n        fillingColor: \"\",\r\n        fillingColorName: \"\",\r\n        firstRowIndent: \"0\",\r\n        otherRowsIndent: \"0\",\r\n        lineSpacing: \"1.15\",\r\n        customLineSpacing: \"\",\r\n        previewText: `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`,\r\n        bold: false,\r\n        italic: false,\r\n        underlined: false,\r\n        stroke: false,\r\n        connectToPrevious: false,\r\n        marginTop: \"6\",\r\n        marginBottom: \"6\",\r\n        wordSpacing: \"0\",   \r\n        listName: \"\",\r\n        prefix: \"\",\r\n        suffix: \"\",\r\n        orderLevel: \"\",\r\n        suffixDistance: \"0.25\",\r\n        magicTabs: false,\r\n        listItem: \"individual\",\r\n        unicodeNumber: \"\",\r\n        unicodeChar: \"\",\r\n    };\r\n\r\n    toggleStateProperty = (propName) => (e) => {\r\n        this.setState({\r\n            [propName]: e.target.checked\r\n        });\r\n    };\r\n\r\n    setStateProperty = (propName) => (e, secondArg = \"\") => {\r\n        const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n        this.setState({\r\n            [propName]: newValue,\r\n        });\r\n    };\r\n\r\n    setBullet = (propName) => (e) => {\r\n        const newBullet = e.target.value.length > 1 ? e.target.value[e.target.value.length - 1] : e.target.value;\r\n        this.setState({\r\n            [propName]: newBullet,\r\n        });\r\n        return newBullet;\r\n    };\r\n\r\n    setColor = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n        \r\n        const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                              : \"\" ;\r\n        \r\n        if (filteredInput !== this.state[propName]) {\r\n            this.setState({\r\n                [propName]: filteredInput,\r\n            });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    setNumber = (propName) => (e) => {\r\n        let input = e.target.value || \"\";\r\n\r\n        const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                              ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                              : \"\" ;\r\n\r\n        if (filteredInput !== this.state[propName]) {\r\n          this.setState({\r\n              [propName]: filteredInput,\r\n          });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, onClose } = this.props;\r\n        const { setStateProperty, toggleStateProperty, setNumber, setColor, setBullet } = this;\r\n        const { openedTab, \r\n                isList, \r\n                listType, \r\n                verticalAlign, \r\n                textTransform,\r\n                leftBorder, \r\n                rightBorder,\r\n                topBorder,\r\n                bottomBorder, \r\n                borderType,\r\n                borderColor,\r\n                borderColorName,\r\n                fontColor,\r\n                fillingColor,\r\n                borderThickness,\r\n                firstRowIndent,\r\n                otherRowsIndent,\r\n                lineSpacing,\r\n                customLineSpacing,\r\n                previewText,\r\n                fontSize,\r\n                fontColorName,\r\n                font,\r\n                alignment,\r\n                bold,\r\n                italic,\r\n                underlined,\r\n                stroke,\r\n                fillingColorName,\r\n                connectToPrevious,\r\n                marginTop,\r\n                marginBottom,\r\n                wordSpacing,\r\n                listName,\r\n                prefix,\r\n                suffix,\r\n                orderLevel,\r\n                suffixDistance,\r\n                magicTabs,\r\n                listItem,\r\n                unicodeNumber,\r\n                unicodeChar,\r\n            } = this.state;\r\n\r\n        const changeOpenedTab = setStateProperty(\"openedTab\");\r\n        const changeIsList = toggleStateProperty(\"isList\");\r\n        const changeListType = setStateProperty(\"listType\");\r\n        const changeVerticalAlign = setStateProperty(\"verticalAlign\");\r\n        const changeTextTransform = setStateProperty(\"textTransform\");\r\n        const changeLeftBorder = toggleStateProperty(\"leftBorder\");\r\n        const changeRightBorder = toggleStateProperty(\"rightBorder\");\r\n        const changeTopBorder = toggleStateProperty(\"topBorder\");\r\n        const changeBottomBorder = toggleStateProperty(\"bottomBorder\");\r\n        const changeBorderColor = setColor(\"borderColor\");\r\n        const changeFontColor = setColor(\"fontColor\");\r\n        const changeFillingColor = setColor(\"fillingColor\");\r\n        const changeBorderThickness = setNumber(\"borderThickness\");\r\n        const changeFirstRowIndent = setNumber(\"firstRowIndent\");\r\n        const changeOtherRowsIndent = setNumber(\"otherRowsIndent\");\r\n        const changeLineSpacing = setStateProperty(\"lineSpacing\");\r\n        const changeCustomLineSpacing = setNumber(\"customLineSpacing\");\r\n        const changeBorderColorName = setStateProperty(\"borderColorName\");\r\n        const changeFontSize = setNumber(\"fontSize\");\r\n        const changeFontColorName = setStateProperty(\"fontColorName\");\r\n        const changeFont = setStateProperty(\"font\");\r\n        const changeAlignment = setStateProperty(\"alignment\");\r\n        const changeBold = toggleStateProperty(\"bold\");\r\n        const changeItalic = toggleStateProperty(\"italic\");\r\n        const changeUnderlined = toggleStateProperty(\"underlined\");\r\n        const changeStroke = toggleStateProperty(\"stroke\");\r\n        const changeFillingColorName = setStateProperty(\"fillingColorName\");\r\n        const changeConnectToPrevious = toggleStateProperty(\"connectToPrevious\");\r\n        const changeMarginTop = setNumber(\"marginTop\");\r\n        const changeMarginBottom = setNumber(\"marginBottom\");\r\n        const changeWordSpacing = setNumber(\"wordSpacing\");\r\n        const changeListName = setStateProperty(\"listName\");\r\n        const changePrefix = setStateProperty(\"prefix\");\r\n        const changeSuffix = setStateProperty(\"suffix\");\r\n        const changeOrderLevel = setStateProperty(\"orderLevel\");\r\n        const changeSuffixDistance = setStateProperty(\"suffixDistance\");\r\n        const changeMagicTabs = toggleStateProperty(\"magicTabs\");\r\n        const changeListItem = setStateProperty(\"listItem\");\r\n        \r\n        const changeUnicodeChar = (e) => {\r\n            const newUnicodeChar = setBullet(\"unicodeChar\")(e);\r\n            const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n            setStateProperty(\"unicodeNumber\")(null, newUnicodeNumber);\r\n        };\r\n\r\n        const changeUnicodeNumber = (e) => {\r\n            const newUnicodeNumber = setColor(\"unicodeNumber\")(e);\r\n            const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n            setStateProperty(\"unicodeChar\")(null, newUnicodeChar);\r\n        };\r\n\r\n        const changePreviewText = (e) => {\r\n            const { value } = e.target;\r\n            if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n                setStateProperty(\"previewText\")(null, getUnstyledText(value));\r\n            } else {\r\n                setStateProperty(\"previewText\")(null, `<div><br></div>`);\r\n            }\r\n        };\r\n\r\n        const changeBorderType = (e) => {\r\n            setStateProperty(\"borderType\")(e);\r\n            if (e.target.value === \"double\" && borderThickness === \"2\") {\r\n                setStateProperty(\"borderThickness\")(null, \"3\");\r\n            }\r\n            if (e.target.value !== \"double\" && borderThickness === \"3\") {\r\n                setStateProperty(\"borderThickness\")(null, \"2\");\r\n            }\r\n         };\r\n\r\n        const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n        const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n        const previewAdditionalFillingColor = connectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n        const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n        const previewMarginLeft = otherRowsIndent ? `${otherRowsIndent >= 12 ? 12 : otherRowsIndent}cm` : 0;\r\n        const previewTextIndent = indentsDifference ? `${indentsDifference >= 12 ? 12 : indentsDifference}cm` : 0;\r\n\r\n        const previewStyle = {\r\n            fontSize: !fontSize ? \"0\" : `${fontSize <= 120 ? fontSize : 120}pt`,\r\n            color: `#${previewFontColor}`,\r\n            fontFamily: font,\r\n            alignItems: alignmentsMap[alignment],\r\n            textAlign: alignment,\r\n            fontWeight: bold ? \"bold\" : \"normal\",\r\n            fontStyle: italic ? \"italic\" : \"normal\",\r\n            textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n            verticalAlign,\r\n            textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n            fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n            backgroundColor: `#${previewFillingColor}`,\r\n            backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n            marginLeft: previewMarginLeft,\r\n            textIndent: previewTextIndent,\r\n            wordSpacing: `${wordSpacing || 0}pt`,\r\n            lineHeight: (lineSpacing !== \"custom\" ? lineSpacing : (!customLineSpacing ? \"1.15\" : `${customLineSpacing || 0}`)),\r\n            marginBottom: `${marginBottom || 0}pt`,\r\n            marginTop: `${marginTop || 0}pt`,\r\n        };\r\n\r\n        const previewProps = { previewText, changePreviewText, previewStyle };\r\n\r\n        const listSectionProps = { \r\n            isList, \r\n            listType, \r\n            changeIsList, \r\n            changeListType, \r\n            listName, changeListName,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            orderLevel, changeOrderLevel,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listItem, changeListItem,\r\n            unicodeNumber, changeUnicodeNumber,\r\n            unicodeChar, changeUnicodeChar,\r\n        };\r\n\r\n        const typographySectionProps = { \r\n            verticalAlign, \r\n            textTransform, \r\n            changeVerticalAlign, \r\n            changeTextTransform,\r\n            fontColor,\r\n            changeFontColor,\r\n            previewProps,\r\n            fontSize,\r\n            changeFontSize,\r\n            fontColorName,\r\n            changeFontColorName,\r\n            font, \r\n            changeFont,\r\n            alignment, changeAlignment,\r\n            bold, changeBold,\r\n            italic, changeItalic,\r\n            underlined, changeUnderlined,\r\n            stroke, changeStroke,\r\n        };\r\n\r\n        const distancesSectionProps = {\r\n            previewProps,\r\n            firstRowIndent,\r\n            otherRowsIndent,\r\n            lineSpacing,\r\n            changeFirstRowIndent,\r\n            changeOtherRowsIndent,\r\n            changeLineSpacing,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            wordSpacing, changeWordSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n        };\r\n\r\n        const framesSectionProps = { \r\n            leftBorder, \r\n            rightBorder, \r\n            topBorder, \r\n            bottomBorder, \r\n            changeLeftBorder, \r\n            changeRightBorder, \r\n            changeTopBorder, \r\n            changeBottomBorder, \r\n            borderColor,\r\n            changeBorderColor,\r\n            borderThickness,\r\n            changeBorderThickness,\r\n            borderType,\r\n            changeBorderType,\r\n            borderColorName,\r\n            changeBorderColorName,\r\n        };\r\n\r\n        const fillingSectionProps = { \r\n            fillingColor, \r\n            changeFillingColor,\r\n            fillingColorName,\r\n            changeFillingColorName,\r\n            previewProps,\r\n            connectToPrevious,\r\n            changeConnectToPrevious,\r\n        };\r\n        \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n            <CustomDialog\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"body\"\r\n                className=\"paragraphDecorators-dialog\"\r\n                fullWidth={true}\r\n                maxWidth={false}\r\n            >\r\n                <div className=\"header\">\r\n                    <DialogTitle className=\"header-title\">\r\n                        <p>Create new paragraph decorator</p>\r\n                    </DialogTitle>\r\n                    <div className=\"header-buttons\">\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick={onClose}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {}}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                    \r\n                <DialogContent className=\"content\">\r\n                    <div className=\"content-leftSide\">\r\n                        <CustomTabs \r\n                            className=\"dialogTabs\"\r\n                            value={openedTab} \r\n                            onChange={changeOpenedTab} \r\n                            orientation=\"vertical\"\r\n                            color=\"primary\"\r\n                            indicatorColor=\"primary\"\r\n                        >\r\n                            <CustomTab className=\"dialogTab\" label=\"Names\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"WORD export\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"List\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Test\" />\r\n                        </CustomTabs>\r\n                    </div>\r\n                    <div className=\"content-rightSide\">\r\n                        { openedTab === 0 && <NamesSection /> }\r\n                        { openedTab === 1 && <WordExportSection /> }\r\n                        { openedTab === 2 && <PositioningSection /> }\r\n                        { openedTab === 3 && <ListSection {...listSectionProps} />}\r\n                        { openedTab === 4 && <ReferencingSection /> }\r\n                        { openedTab === 5 && <TypographySection {...typographySectionProps} /> }\r\n                        { openedTab === 6 && <DistancesSection {...distancesSectionProps} /> }\r\n                        { openedTab === 7 && <FramesSection {...framesSectionProps} /> }\r\n                        { openedTab === 8 && <FillingSection {...fillingSectionProps} /> }\r\n                        { openedTab === 9 && <TocSection /> }\r\n                        { openedTab === 10 && <ShortCutsSection /> }\r\n                        { openedTab === 11 && <TestSection {...listSectionProps} /> }\r\n                    </div>\r\n                </DialogContent>\r\n            </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewDecDialog;","import React from 'react';\nimport './App.css';\n\nimport NewDecDialog from './components/NewDecDialog';\n\nclass App extends React.Component {\n  state = {\n    isOpen: true,\n  }\n\n  handleClick = () => {\n    this.setState(({ isOpen }) => {\n      return {\n        isOpen: !isOpen\n      };\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <button onClick={this.handleClick}>Open</button>\n        <NewDecDialog \n          isOpen={this.state.isOpen}\n          onClose={() => {\n            this.setState({ isOpen: false });\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}