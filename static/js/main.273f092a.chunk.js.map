{"version":3,"sources":["components/DecoratorDialog/common/CustomInput.js","components/DecoratorDialog/common/LabelWithAsterisk.js","components/DecoratorDialog/helpers/DecDataParser.js","components/DecoratorDialog/helpers/isFontAvailable.js","components/DecoratorDialog/helpers/getShortCutUtils.js","components/DecoratorDialog/constants/decoratorsList.js","components/DecoratorDialog/constants/fontsSet.js","components/DecoratorDialog/constants/localeConstants.js","components/DecoratorDialog/constants/validationData.js","components/DecoratorDialog/constants/constants.js","components/DecoratorDialog/constants/initialFormState.js","components/DecoratorDialog/helpers/validationFunctions.js","components/DecoratorDialog/helpers/helpers.js","components/DecoratorDialog/common/NewGroupDialog.js","components/DecoratorDialog/hoc/withNewGroupControl.js","components/DecoratorDialog/actions/index.js","components/DecoratorDialog/sections/NamesSection.js","components/DecoratorDialog/common/CustomInputShort.js","components/DecoratorDialog/common/SectionTitle/index.js","components/DecoratorDialog/common/SectionTitle/SectionTitle.js","components/DecoratorDialog/sections/PositioningSection/BackSpaceActionInput.js","components/DecoratorDialog/sections/PositioningSection/index.js","components/DecoratorDialog/sections/PositioningSection/PositioningSection.js","components/DecoratorDialog/common/Preview/generators.js","components/DecoratorDialog/common/Preview/ListPreview.js","components/DecoratorDialog/common/ColorField/index.js","components/DecoratorDialog/common/ColorField/ColorField.js","components/DecoratorDialog/common/FontSelectFields.js","components/DecoratorDialog/sections/ListSection/ListSection.js","components/DecoratorDialog/sections/ListSection/index.js","components/DecoratorDialog/sections/ReferencingSection.js","components/DecoratorDialog/common/ContentEditable.js","components/DecoratorDialog/common/Preview/Preview.js","components/DecoratorDialog/common/Preview/index.js","components/DecoratorDialog/sections/TypographySection/index.js","components/DecoratorDialog/sections/TypographySection/TypographySection.js","components/DecoratorDialog/common/ConnectToPreviousField.js","components/DecoratorDialog/sections/DistancesSection.js","components/DecoratorDialog/sections/FramesSection/FrameTypeInput.js","components/DecoratorDialog/sections/FramesSection/generateBorderPreviewStyle.js","components/DecoratorDialog/sections/FramesSection/FramesSection.js","components/DecoratorDialog/sections/FramesSection/index.js","components/DecoratorDialog/sections/FillingSection.js","components/DecoratorDialog/sections/TocSection.js","components/DecoratorDialog/sections/ShortCutsSection.js","components/DecoratorDialog/theme.js","components/DecoratorDialog/common/CustomTab.js","components/DecoratorDialog/common/CustomErrorTab.js","components/DecoratorDialog/common/CustomTabs.js","components/DecoratorDialog/common/CustomDialog.js","actions.js","components/DecoratorDialog/DecoratorDialog.js","components/DecoratorDialog/index.js","App.js","reducers/decoratorDialogReducer/isOpenReducer.js","reducers/decoratorDialogReducer/decoratorFormReducer.js","reducers/decoratorDialogReducer/validationErrorReducer.js","reducers/decoratorDialogReducer/isEditModeReducer.js","reducers/decoratorDialogReducer/openedTabReducer.js","reducers/decoratorDialogReducer/index.js","reducers/savedFormReducer.js","reducers/rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","LabelWithAsterisk","children","className","DecDataParser","dec","mapDecFields","width","getShortCutUtils","systemName","e","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","indexOf","isCmdPressed","value","stringValue","Object","keys","CMD_KEYS","forEach","key","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","item_type","isEqual","keyboard_shortcut","childItems","child_items","itemKey","style","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","body","document","container","createElement","innerHTML","Array","cssText","getWidth","appendChild","clientWidth","removeChild","monoWidth","serifWidth","sansWidth","isFontAvailable","font","decoratorsList","name","fontSet","LANGS","langKey","langName","langFullName","regionName","regionFullName","ADDITIONAL_LANGS","slice","MAIN_LANG_KEY","tabsErrorInitialState","namesSection","listSection","sectionsTabNumbers","tabName","tabNumber","alignmentsMap","center","left","right","justify","backSpaceActions","bulletNamesMap","bulletpoint","dash","star","listStyleTypes","numberingSets","decimal","HOLDER","autoFillingRequiredFields","sideNumberFont","sideNumberFontSize","sideNumberFontColor","sideNumberFillingColor","sideNumberWidth","sideNumberRadius","fontColor","marginBottom","firstRowIndent","otherRowsIndent","wordSpacing","lineSpacing","borderThickness","initialFormState","decKey","group","groupToCreate","active","reduce","acc","indentationalLevel","fixedIndentation","softReturn","backspaceActionWithContent","backspaceActionWithContentStyle","returnActionNextSection","returnActionEmptySection","tabAction","shiftTabAction","isList","listName","orderLevel","prefix","suffix","suffixDistance","magicTabs","listType","listItem","unicodeNumber","unicodeChar","numberingStyle","continueNumbering","allowRestartNumbering","includePreviousFrom","sideNumber","customSideNumberFont","sideNumberAlignment","sideNumberBold","sideNumberItalic","sideNumberUnderlined","sideNumberLineHeight","referenceGroup","referenceGroupToCreate","customFont","alignment","bold","italic","underlined","stroke","textTransform","readOnly","connectToPrevious","verticalAlign","customLineSpacing","borderLeft","borderRight","borderTop","borderBottom","borderType","fillingColor","tocIndentation","shortCutWin","shortCutWinView","shortCutMac","shortCutMacView","getTabsErrorState","form","tabsErrorState","getTabNumberToSwitch","getCorrectColor","hex","correctColor","length","selectAllOnClick","defaultValue","target","focus","select","getUnstyledText","styledText","unstyledText","replace","unicodeNumberToChar","String","fromCharCode","parseInt","unicodeCharToNumber","charCodeAt","toString","scrollToBottom","setTimeout","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","changeAndScroll","changeFunction","timeOut","focusInput","inputRef","timeout","current","focusOnEmptyField","refs","i","getPreviewFont","fillMissedFields","currentFormState","formStateWithoutMissedFields","fieldName","option","customOption","NewGroupDialog","isXref","props","groupType","emptyGroup","groupKey","getInitialState","savedGroup","state","requiredFieldRef","React","createRef","onInputChange","inputName","setState","onClose","hideGroupDialogValidationError","closeGroupDialog","onGroupSave","trim","groupToSave","saveGroup","showGroupDialogValidationError","this","isOpen","isEditMode","hasGroupDialogValidationError","titleText","buttonText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","onChange","error","variant","margin","map","Fragment","DialogActions","Button","onClick","color","PureComponent","withNewGroupControl","ViewComponent","isGroupDialogOpen","openGroupDialog","Component","updateDecoratorForm","payload","type","clearDecoratorForm","updateValidationError","openDialog","dispatch","closeDialog","setValue","propName","secondArg","newValue","undefined","toggleValue","checked","setBullet","newBullet","setColor","filteredInput","match","setNumber","setShortCut","valuePropName","viewPropName","search","convertEventToShortCut","NamesSection","decKeyInputRef","decNameEnInputRef","inputRefs","onGroupChange","groupName","changeGroupToCreate","changeGroup","onNameChange","changeName","validationErrorInSection","prevprops","every","ref","changeDecKey","changeActive","newGroupName","NativeSelect","Checkbox","connect","decoratorDialog","validationError","formState","CustomInputShort","SectionTitle","text","BackSpaceActionInput","PositioningSection","changeIndentationalLevel","changeBackspaceActionWithContent","changeBackspaceActionWithContentStyle","changeBackspaceActionWithoutContent","changeBackspaceActionWithoutContentStyle","changeReturnActionNextSection","changeReturnActionEmptySection","changeTabAction","changeShiftTabAction","changeisFixedIndentation","changeSoftReturn","backSpaceActionStyleSettingsState","action","generatePreviewStyle","fillingConnectToPrevious","previewFontColor","previewFillingColor","previewAdditionalFillingColor","indentsDifference","previewMarginLeft","previewTextIndent","previewLineSpacing","offset","alignType","parseFloat","getOffset","previewMarginTop","previewMarginBottom","previewBorderLeft","previewBorderRight","previewBorderTop","previewBorderBottom","correctFontSize","alignItems","textAlign","fontWeight","fontStyle","textDecoration","fontVariant","backgroundImage","borderImage","marginLeft","textIndent","lineHeight","outline","paddingLeft","paddingRight","paddingTop","paddingBottom","previewText","isOrderedList","listItemBeginnings","fill","getListChars","listChar","previewStyle","isSideNumber","sideNumberStyle","previewSideNumberFontColor","previewSideNumberFillingColor","marginRight","generateSideNumberStyle","listItemBeginningStyle","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","defaultColorCode","required","bottomAligned","colorError","inputError","pickerColor","colorSampleStyle","colorPickerClassName","InputProps","startAdornment","InputAdornment","onChangeComplete","disableAlpha","FontSelectFields","customFontInputRef","onFontChange","changeFont","changeCustomFont","availableFonts","filter","fontName","optionalFieldState","placeholder","ListSection","listNameInputRef","unicodeCharInputRef","onIsListChange","changeListName","changeIsList","onListTypeChange","changeListType","changeSuffix","onListItemChange","changeListItem","onUnicodeNumberChange","newUnicodeNumber","changeUnicodeNumber","newUnicodeChar","changeUnicodeChar","onUnicodeCharChange","onSideNumberChange","changeSideNumber","listPreviewProps","changeOrderLevel","changePrefix","changeSuffixDistance","changeMagicTabs","changeNumberingStyle","changeContinueNumbering","changeAllowRestartNumbering","changeIncludePreviousFrom","changeSideNumberFont","changeCustomSideNumberFont","changeSideNumberAlignment","changeSideNumberFontSize","changeSideNumberFontColor","changeSideNumberFillingColor","changeSideNumberWidth","changeSideNumberRadius","changeSideNumberBold","changeSideNumberItalic","changeSideNumberUnderlined","changeSideNumberLineHeight","mainListSettingsState","unorderedListSettingsState","customListItemSettingsState","orderedListSettingsState","sideNumberSettingsState","RadioGroup","row","FormControlLabel","control","Radio","label","labelPlacement","entries","ReferencingSection","onXrefChange","xrefName","xref","changeReferenceGroupToCreate","changeReferenceGroup","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","q","propertyIsEnumerable","normalizeHtml","str","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","getEl","emitChange","originalEvt","evt","assign","_a","tagName","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","onPreviewTextChange","changePreviewText","selectAllChildren","TypographySection","changeAlignment","changeFontSize","changeFontColor","changeBold","changeItalic","changeUnderlined","changeStroke","changeTextTransform","changeVerticalAlign","changeMarginTop","changeReadOnly","previewProps","changeConnectToPrevious","DistancesSection","customLineSpacingInputRef","onLineSpacingChange","changeLineSpacing","changeMarginBottom","changeFirstRowIndent","changeOtherRowsIndent","changeCustomLineSpacing","changeWordSpacing","customLineSpacingFieldState","marginFieldsState","FrameTypeInput","generateBorderPreviewStyle","previewBorderWidth","isNaN","FramesSection","onBorderTypeChange","changeBorderType","changeBorderThickness","changeBorderLeft","changeBorderRight","changeBorderTop","changeBorderBottom","changeBorderColor","id","Select","MenuItem","changeFillingColor","changeTocIndentation","changeShortCutWin","changeShortCutMac","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomErrorTab","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","saveDecoratorForm","DecoratorDialog","clearForm","onSaveButtonClick","switchTab","sendForm","parseToSend","onTabSwitch","openedTab","ThemeProvider","aria-labelledby","scroll","CustomTabs","orientation","indicatorColor","ShortCutsSection","switchDecDialogTab","saveForm","savedForm","clearSavedForm","parseToEdit","isOpenReducer","initialState","decoratorFormReducer","validationErrorReducer","isEditModeReducer","openedTabReducer","decoratorDialogReducer","combineReducers","savedFormReducer","rootReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.273f092a.chunk.js","sourcesContent":["import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: \"183px\",\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from \"react\";\r\n\r\nconst LabelWithAsterisk = ({ children }) => {\r\n    return (\r\n        <div className=\"labelWithAsterisk\">\r\n            <div className=\"labelWithAsterisk-labelBox\">\r\n                <span>{children}</span>\r\n            </div>\r\n            <div className=\"labelWithAsterisk-asteriskBox\">\r\n                <span className=\"labelWithAsterisk-asteriskMark\">*</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabelWithAsterisk;","class DecDataParser {\r\n    static parseToSend(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static parseToEdit(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static mapDecFields = {};\r\n}\r\n\r\nexport default DecDataParser;","const { body } = document;\r\nlet width;\r\n\r\nconst container = document.createElement('span');\r\ncontainer.innerHTML = Array(100).join('wi');\r\ncontainer.style.cssText = [\r\n    'position:absolute',\r\n    'width:auto',\r\n    'font-size:128px',\r\n    'left:-99999px'\r\n].join(' !important;');\r\n\r\nconst getWidth = fontFamily => {\r\n    container.style.fontFamily = fontFamily;\r\n\r\n    body.appendChild(container);\r\n    width = container.clientWidth;\r\n    body.removeChild(container);\r\n\r\n    return width;\r\n};\r\n\r\nconst monoWidth  = getWidth('monospace');\r\nconst serifWidth = getWidth('serif');\r\nconst sansWidth  = getWidth('sans-serif');\r\n\r\nconst isFontAvailable = font => {\r\n    return monoWidth !== getWidth(font + ',monospace') ||\r\n    sansWidth !== getWidth(font + ',sans-serif') ||\r\n    serifWidth !== getWidth(font + ',serif');\r\n};\r\n\r\nexport default isFontAvailable;","import keycode from \"keycode\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === \"MacOS\" ? \"Option\" : \"Alt\",\r\n      ctrlKey: systemName === \"MacOS\" ? \"Control\" : \"Ctrl\",\r\n      shiftKey: \"Shift\",\r\n      metaKey: \"Command\",\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = \"\";\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === \"style\") {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","const decoratorsList = [\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n    { name: \"Heading 1\", value: \"quick_heading_1\" },\r\n    { name: \"Heading 2\", value: \"quick_heading_2\" },\r\n    { name: \"Heading 3\", value: \"quick_heading_3\" },\r\n    { name: \"Heading 4\", value: \"quick_heading_4\" },\r\n    { name: \"Heading 5\", value: \"quick_heading_5\" },\r\n];\r\n\r\nexport default decoratorsList;","const fontSet = [ \r\n    \"Source Sans Pro\",\r\n    \"Dejavu Sans\",\r\n    \"Dejavu Serif\",\r\n    \"Open Sans\",\r\n    \"Montserrat\",\r\n    \"Arial\",\r\n    \"Georgia\",\r\n    \"Verdana\",\r\n    \"Times New Roman\",\r\n];\r\n\r\nexport default fontSet;","export const LANGS = [\n  { \n    langKey: \"en_EN\", \n    langName: \"EN\", \n    langFullName: \"English\", \n  },\n  { \n    langKey: \"de_DE\", \n    langName: \"DE\", \n    langFullName: \"German\", \n  },\n  { \n    langKey: \"ru_RU\", \n    langName: \"RU\", \n    langFullName: \"Russian\", \n  },\n  { \n    langKey: \"fr_FR\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"FR\",\n    regionFullName: \"France\"\n  },\n  { \n    langKey: \"fr_CA\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"CA\",\n    regionFullName: \"Canada\",\n  },\n  { \n    langKey: \"es_ES\", \n    langName: \"ES\", \n    langFullName: \"Spanish\", \n  },\n  { \n    langKey: \"fr_BE\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"BE\",\n    regionFullName: \"Belgium\",\n  },\n  { \n    langKey: \"nl_BE\", \n    langName: \"NL\", \n    langFullName: \"Dutch\",\n    regionName: \"BE\",\n    regionFullName: \"Belgium\"\n  },\n];\n\nexport const ADDITIONAL_LANGS = LANGS.slice(1);\n\nexport const MAIN_LANG_KEY = LANGS[0].langKey;","export const tabsErrorInitialState = {\r\n    namesSection: false,\r\n    listSection: false,\r\n};\r\n\r\nexport const sectionsTabNumbers = [\r\n    { tabName: \"namesSection\", tabNumber: 0 },\r\n    { tabName: \"listSection\", tabNumber: 2 },\r\n];","export const alignmentsMap = {\r\n    center: \"center\",\r\n    left: \"flex-start\",\r\n    right: \"flex-end\",\r\n    justify: \"flex-start\",\r\n};\r\n\r\nexport const backSpaceActions = [\r\n    { key: 'merge', value: 'Merge' },\r\n    { key: 'apply_other_pd', value: 'Apply other PD' },\r\n    { key: 'remove_pd', value: 'Remove PD' },\r\n    { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const bulletNamesMap = {\r\n    bulletpoint: \"•\",\r\n    dash: \"—\",\r\n    star: \"★\",\r\n};\r\n\r\nexport const listStyleTypes = [\r\n    { name: '1, 2, 3', value: 'decimal' },\r\n    {  name: 'A, B, C', value: 'upper-alpha' },\r\n    {  name: 'a, b, c', value: 'lower-alpha' },\r\n    {  name: 'I, II, III', value: 'upper-roman' },\r\n    {  name: 'i, ii, iii', value: 'lower-roman' },\r\n];\r\n\r\nexport const numberingSets = {\r\n    decimal: [\"1\", \"2\", \"3\", \"88\", \"888\"],\r\n    \"upper-alpha\": [\"A\", \"B\", \"C\", \"XX\", \"XXX\"],\r\n    \"lower-alpha\": [\"a\", \"b\", \"c\", \"xx\", \"xxx\"],\r\n    \"upper-roman\": [\"I\", \"II\", \"III\", \"XX\", \"XXX\"],\r\n    \"lower-roman\": [\"i\", \"ii\", \"iii\", \"xx\", \"xxx\"],\r\n};\r\n\r\nexport const sampleText = `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`;\r\n","import { LANGS } from \"./localeConstants\";\r\n\r\nexport const HOLDER = \"HOLDER-POLDER\";\r\nexport const DEFAULT_FONT = \"Helvetica\";\r\nexport const DEFAULT_FONT_SIZE = \"11\";\r\nexport const DEFAULT_SIDE_NUMBER_FONT_COLOR = \"FFF\";\r\nexport const DEFAULT_SIDE_NUMBER_FILLING_COLOR = \"1E88E5\";\r\nexport const DEFAULT_SIDE_NUMBER_WIDTH = \"20\";\r\nexport const DEFAULT_SIDE_NUMBER_RADIUS = \"10\";\r\nexport const DEFAULT_FONT_COLOR = \"000\";\r\nexport const DEFAULT_ROW_INDENT = \"0\";\r\nexport const DEFAULT_MARGIN = \"6\";\r\nexport const DEFAULT_WORD_SPACING = \"0\";\r\nexport const DEFAULT_LINE_SPACING = \"1.5\";\r\nexport const DEFAULT_BORDER_COLOR = \"F00\";\r\nexport const DEFAULT_BORDER_THICKNESS = \"2\";\r\n\r\nexport const autoFillingRequiredFields = {\r\n    sideNumberFont: DEFAULT_FONT,\r\n    sideNumberFontSize: DEFAULT_FONT_SIZE,\r\n    sideNumberFontColor: DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    sideNumberFillingColor: DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    sideNumberWidth: DEFAULT_SIDE_NUMBER_WIDTH,\r\n    sideNumberRadius: DEFAULT_SIDE_NUMBER_RADIUS,\r\n    font: DEFAULT_FONT,\r\n    fontSize: DEFAULT_FONT_SIZE,\r\n    fontColor: DEFAULT_FONT_COLOR,\r\n    marginTop: DEFAULT_MARGIN,\r\n    marginBottom: DEFAULT_MARGIN,\r\n    firstRowIndent: DEFAULT_ROW_INDENT,\r\n    otherRowsIndent: DEFAULT_ROW_INDENT,\r\n    wordSpacing: DEFAULT_WORD_SPACING,   \r\n    lineSpacing: DEFAULT_LINE_SPACING,\r\n    borderColor: DEFAULT_BORDER_COLOR,\r\n    borderThickness: DEFAULT_BORDER_THICKNESS,\r\n};\r\n\r\nexport const initialFormState = {\r\n    ...autoFillingRequiredFields,\r\n    decKey: \"\",\r\n    group: \"\",\r\n    groupToCreate: \"\",\r\n    active: true,\r\n    name: { ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}) },\r\n    indentationalLevel: \"\",\r\n    fixedIndentation: true,\r\n    softReturn: false,\r\n    backspaceActionWithContent: \"merge\",\r\n    backspaceActionWithContentStyle: \"default\",\r\n    returnActionNextSection: \"default\",\r\n    returnActionEmptySection: \"default\",\r\n    tabAction: \"\",\r\n    shiftTabAction: \"\",\r\n    isList: false,\r\n    listName: HOLDER,\r\n    orderLevel: \"\",\r\n    prefix: \"\",\r\n    suffix: \"\",\r\n    suffixDistance: \"0.25\",\r\n    magicTabs: false,\r\n    listType: \"unordered\",\r\n    listItem: \"bulletpoint\",\r\n    unicodeNumber: \"\",\r\n    unicodeChar: \"\",\r\n    numberingStyle: \"decimal\",\r\n    continueNumbering: false,\r\n    allowRestartNumbering: false,\r\n    includePreviousFrom: \"\",\r\n    sideNumber: false,\r\n    customSideNumberFont: \"\",\r\n    sideNumberAlignment: \"center\",\r\n    sideNumberBold: false,\r\n    sideNumberItalic: false,\r\n    sideNumberUnderlined: false,\r\n    sideNumberLineHeight: \"\",\r\n    referenceGroup: \"\",\r\n    referenceGroupToCreate: \"\",\r\n    customFont: \"\",\r\n    alignment: \"left\",\r\n    bold: false,\r\n    italic: false,\r\n    underlined: false,\r\n    stroke: false,\r\n    textTransform: \"none\",\r\n    readOnly: false,\r\n    connectToPrevious: false,\r\n    verticalAlign: \"baseline\",\r\n    customLineSpacing: \"\",\r\n    borderLeft: false,\r\n    borderRight: false,\r\n    borderTop: false,\r\n    borderBottom: false,\r\n    borderType: \"solid\",\r\n    fillingColor: \"\",\r\n    tocIndentation: \"\",\r\n    shortCutWin: \"\",\r\n    shortCutWinView: \"\",\r\n    shortCutMac: \"\",\r\n    shortCutMacView: \"\",\r\n};","import { tabsErrorInitialState, sectionsTabNumbers, MAIN_LANG_KEY } from \"../constants\";\r\n\r\nexport const hasErrorInSection = refs => !refs.every(ref => ref.current.value);\r\n\r\nexport const getTabsErrorState = form => {\r\n    const tabsErrorState = { ...tabsErrorInitialState };\r\n    const { name, decKey, listName } = form;\r\n\r\n    if (!name[MAIN_LANG_KEY] || !decKey) {\r\n        tabsErrorState.namesSection = true;\r\n    }\r\n    if (!listName) {\r\n        tabsErrorState.listSection = true;\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let tabName in tabsErrorState) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabsErrorState;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const getTabNumberToSwitch = tabsErrorState => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const { tabName, tabNumber } of sectionsTabNumbers) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabNumber;\r\n        }\r\n    }\r\n};","import { \r\n    numberingSets, \r\n    bulletNamesMap, \r\n    autoFillingRequiredFields, \r\n    DEFAULT_FONT, \r\n} from \"../constants\";\r\nimport isFontAvailable from \"./isFontAvailable\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const changeAndScroll = (changeFunction, timeOut) => (...args) => {\r\n    changeFunction(...args);\r\n    if (!timeOut) {\r\n        scrollToBottom(\"content-rightSide\");\r\n    } else {\r\n        setTimeout(() => {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }, timeOut);\r\n    }\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = ({ isOrderedList, numberingStyle, listItem, unicodeChar }) => {\r\n    if (isOrderedList) {\r\n        return numberingSets[numberingStyle];\r\n    }\r\n    const newBullet = bulletNamesMap[listItem] || unicodeChar;\r\n    return Array(4).fill(newBullet);\r\n};\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};\r\n\r\nexport const focusInput = (inputRef, timeout = 300) => {\r\n    setTimeout(() => {\r\n        inputRef.current.focus();\r\n    }, timeout);\r\n};\r\n\r\nexport const focusOnEmptyField = refs => {\r\n    for (let i = 0; i < refs.length; i++) {\r\n        if (!refs[i].current.value) {\r\n            focusInput(refs[i]);\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\nexport const getPreviewFont = (font, customFont) => {\r\n    if (font !== \"custom\" && isFontAvailable(font)) {\r\n        return font;\r\n    } else if (font === \"custom\" && customFont && isFontAvailable(customFont)) {\r\n        return customFont;\r\n    }\r\n    return `'${DEFAULT_FONT}', 'Roboto', sans-serif`;\r\n}\r\n\r\nexport const fillMissedFields = currentFormState => {\r\n    const { \r\n        font, customFont,\r\n        sideNumberFont, customSideNumberFont,\r\n        lineSpacing, customLineSpacing,\r\n    } = currentFormState;\r\n\r\n    const formStateWithoutMissedFields = { ...currentFormState };\r\n    \r\n    [\r\n        [font, customFont],\r\n        [sideNumberFont, customSideNumberFont], \r\n        [lineSpacing, customLineSpacing],\r\n    ].forEach(([option, customOption]) => {\r\n        if (option === \"custom\" && !customOption) {\r\n            formStateWithoutMissedFields[option] = null;\r\n        }\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    for (let fieldName in autoFillingRequiredFields) {\r\n        if (!currentFormState[fieldName] && autoFillingRequiredFields[fieldName]) {\r\n            formStateWithoutMissedFields[fieldName] = autoFillingRequiredFields[fieldName];\r\n        }\r\n    }\r\n    return formStateWithoutMissedFields;\r\n};","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport LabelWithAsterisk from \"./LabelWithAsterisk\";\r\nimport { focusInput } from \"../helpers\";\r\nimport { LANGS, MAIN_LANG_KEY, ADDITIONAL_LANGS } from \"../constants\";\r\n\r\nclass NewGroupDialog extends React.PureComponent {\r\n    isXref = this.props.groupType === \"xref\";\r\n\r\n    emptyGroup = {\r\n        ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}),\r\n        ...this.isXref && { groupKey: \"\" },\r\n    };\r\n\r\n    getInitialState = () => ({ ...this.emptyGroup, ...this.props.savedGroup });\r\n\r\n    state = this.getInitialState();\r\n\r\n    requiredFieldRef = React.createRef();\r\n\r\n    onInputChange = inputName => e => {\r\n        this.setState({ [inputName]: e.target.value });\r\n    };\r\n\r\n    onClose = () => {\r\n        this.setState(this.getInitialState());\r\n        this.props.hideGroupDialogValidationError();\r\n        this.props.closeGroupDialog();\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        if ((!this.isXref && this.state[MAIN_LANG_KEY].trim().length) || (this.isXref && this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: this.state[langKey].trim() }), {}),\r\n            };\r\n            if (this.isXref) {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            this.props.hideGroupDialogValidationError();\r\n            this.props.saveGroup(null, (groupToSave[MAIN_LANG_KEY] || groupToSave.groupKey), groupToSave);\r\n            this.props.closeGroupDialog();\r\n        } else {\r\n            this.props.showGroupDialogValidationError();\r\n            focusInput(this.requiredFieldRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode, hasGroupDialogValidationError } = this.props;\r\n        const { onInputChange, onGroupSave, onClose, isXref } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${isXref ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"decoratorDialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        { isXref && (\r\n                            <>\r\n                                <LabelWithAsterisk>Group Key</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state.groupKey}\r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state.groupKey}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { isXref ? (\r\n                            <>\r\n                                <span>Name EN</span>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state[MAIN_LANG_KEY]}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                            <React.Fragment key={langKey}>\r\n                                <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                                <TextField\r\n                                    value={this.state[langKey]}\r\n                                    onChange={onInputChange(langKey)} \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </React.Fragment>\r\n                        )) }                 \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isGroupDialogOpen: false,\r\n            hasGroupDialogValidationError: false,\r\n        };\r\n        \r\n        openGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: true });\r\n        };\r\n\r\n        closeGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: false });\r\n        };\r\n\r\n        showGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: true });\r\n        };\r\n\r\n        hideGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: false });\r\n        };\r\n\r\n        render() {\r\n            const { \r\n                openGroupDialog, \r\n                closeGroupDialog, \r\n                showGroupDialogValidationError, \r\n                hideGroupDialogValidationError \r\n            } = this; \r\n\r\n            return ( \r\n                <ViewComponent \r\n                    {...this.props} \r\n                    {...this.state} \r\n                    {...{ openGroupDialog, closeGroupDialog, showGroupDialogValidationError, hideGroupDialogValidationError }} \r\n                /> \r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import { getShortCutUtils } from \"../helpers\";\r\n\r\nexport const UPDATE_DEC_FORM = \"UPDATE_DEC_FORM\";\r\nexport const CLEAR_DEC_FORM = \"CLEAR_DEC_FORM\";\r\nexport const SHOW_DEC_DIALOG = \"SHOW_DEC_DIALOG\";\r\nexport const HIDE_DEC_DIALOG = \"HIDE_DEC_DIALOG\";\r\nexport const SWITCH_DEC_DIALOG_TAB = \"SWITCH_DEC_DIALOG_TAB\";\r\nexport const RESET_DEC_DIALOG_TAB = \"RESET_DEC_DIALOG_TAB\";\r\nexport const SWITCH_ON_DEC_DIALOG_EDIT_MODE = \"SWITCH_ON_DEC_DIALOG_EDIT_MOD\";\r\nexport const SWITCH_OFF_DEC_DIALOG_EDIT_MODE = \"SWITCH_OFF_DEC_DIALOG_EDIT_MODE\";\r\nexport const UPDATE_VALIDATION_ERROR = \"UPDATE_VALIDATION_ERROR\";\r\nexport const REMOVE_VALIDATION_ERROR = \"REMOVE_VALIDATION_ERROR\";\r\n\r\nexport const updateDecoratorForm = payload => {\r\n    return {\r\n        type: UPDATE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearDecoratorForm = payload => {\r\n    return {\r\n        type: CLEAR_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const showDecoratorDialog = () => {\r\n    return {\r\n        type: SHOW_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const hideDecoratorDialog = () => {\r\n    return {\r\n        type: HIDE_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const switchDecDialogTab = payload => {\r\n    return {\r\n        type: SWITCH_DEC_DIALOG_TAB,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const resetDecDialogTab = () => {\r\n    return {\r\n        type: RESET_DEC_DIALOG_TAB,\r\n    };\r\n}\r\n\r\nexport const switchOnDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const updateValidationError = payload => {\r\n    return {\r\n        type: UPDATE_VALIDATION_ERROR,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const removeValidationError = () => {\r\n    return {\r\n        type: REMOVE_VALIDATION_ERROR,\r\n    };\r\n};\r\n\r\nexport const openDialog = dispatch => dec => {\r\n    if (dec) {\r\n        dispatch(updateDecoratorForm(dec));\r\n        dispatch(switchOnDecDialogEditMode());\r\n    } \r\n    dispatch(showDecoratorDialog());\r\n};\r\n\r\nexport const closeDialog = dispatch => () => {\r\n    dispatch(hideDecoratorDialog());\r\n    dispatch(switchOffDecDialogEditMode());\r\n    dispatch(removeValidationError());\r\n    dispatch(resetDecDialogTab());\r\n    dispatch(clearDecoratorForm());\r\n};\r\n\r\nexport const setValue = dispatch => propName => (e, secondArg = \"\") => {\r\n    const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const toggleValue = dispatch => propName => (e, secondArg) => {\r\n    const newValue = e ? e.target.checked : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const setBullet = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const newBullet = input.length > 1 ? input[input.length - 1] : input;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newBullet,\r\n    }));\r\n    return newBullet;\r\n};\r\n\r\nexport const setColor = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n    \r\n    const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                          ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                          : \"\" ;\r\n    \r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setNumber = dispatch => propName => (e, secondArg) => {\r\n    let input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                          ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                          : \"\" ;\r\n\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setShortCut = dispatch => (valuePropName, viewPropName) => e => {\r\n    const systemName = valuePropName.search(/mac/gi) !== -1 ? \"MacOS\" : \"Windows\";\r\n    const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n    if (shortCut && shortCut.deleteKey) {\r\n        setTimeout(() => {\r\n            dispatch(updateDecoratorForm({ \r\n                [valuePropName]: \"\" \r\n            }));\r\n            dispatch(updateDecoratorForm({ \r\n                [viewPropName]: \"\" \r\n            }));\r\n        }, 100);\r\n    } else if (shortCut) {\r\n        dispatch(updateDecoratorForm({ \r\n            [valuePropName]: shortCut.value \r\n        }));\r\n        dispatch(updateDecoratorForm({ \r\n            [viewPropName]: shortCut.stringValue \r\n        }));\r\n    }\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { hasErrorInSection, focusOnEmptyField } from \"../helpers\";\r\nimport { setValue, toggleValue, updateValidationError } from \"../actions\";\r\nimport { MAIN_LANG_KEY, ADDITIONAL_LANGS } from \"../constants\";\r\n\r\nclass NamesSection extends React.Component {\r\n    decKeyInputRef = React.createRef();\r\n    decNameEnInputRef = React.createRef();\r\n    inputRefs = [this.decKeyInputRef, this.decNameEnInputRef];\r\n\r\n    onGroupChange = (e, groupName, group) => {\r\n        if (group) {\r\n            this.props.changeGroupToCreate(null, group);\r\n        }\r\n        this.props.changeGroup(e, groupName);\r\n    };\r\n\r\n    onNameChange = langKey => e => {\r\n        const newValue = {\r\n            ...this.props.name,\r\n            [langKey]: e.target.value,\r\n        };\r\n        this.props.changeName(null, newValue);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n        if (this.props.validationErrorInSection && !hasErrorInSection(this.inputRefs)) {\r\n            this.props.updateValidationError({ namesSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            groupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,\r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            validationErrorInSection,\r\n            decKey, changeDecKey,\r\n            group,\r\n            active, changeActive,\r\n            name,\r\n        } = this.props;\r\n\r\n        const newGroupName = groupToCreate[MAIN_LANG_KEY];\r\n        const isEditMode = !!newGroupName;\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n                <LabelWithAsterisk>Key</LabelWithAsterisk>\r\n                <TextField \r\n                    value={decKey}\r\n                    onChange={changeDecKey}\r\n                    error={validationErrorInSection && !decKey}\r\n                    inputRef={this.decKeyInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={group} \r\n                        onChange={this.onGroupChange}\r\n                        input={ <CustomInput /> }  \r\n                    >\r\n                        <option value=\"\">...</option>\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"0\">Text</option>\r\n                        <option value=\"1\">Heading</option>\r\n                        <option value=\"2\">Heading Heading Heading Heading</option>\r\n                    </NativeSelect>\r\n                    { !(isEditMode && group !== newGroupName) && (\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                    ) }\r\n                </div>\r\n\r\n                <span>Active</span>\r\n                <div className=\"unlabeledCheckbox\">\r\n                    <Checkbox\r\n                        checked={active}\r\n                        onChange={changeActive} \r\n                        color=\"primary\" \r\n                    />\r\n                </div>\r\n\r\n                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                <TextField \r\n                    value={name[MAIN_LANG_KEY]}\r\n                    onChange={this.onNameChange(MAIN_LANG_KEY)}\r\n                    error={validationErrorInSection && !name[MAIN_LANG_KEY]}\r\n                    inputRef={this.decNameEnInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                  <React.Fragment key={langKey}>\r\n                    <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                    <TextField \r\n                        value={name[langKey]}\r\n                        onChange={this.onNameChange(langKey)}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                    />\r\n                  </React.Fragment>  \r\n                )) }\r\n\r\n                <NewGroupDialog \r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onGroupChange}\r\n                    savedGroup={groupToCreate}\r\n                    groupType=\"decorators\"\r\n                    { ...{ \r\n                        isGroupDialogOpen,\r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return { \r\n        validationErrorInSection: validationError.namesSection,\r\n        formState: form,\r\n        decKey: form.decKey,\r\n        group: form.group,\r\n        active: form.active,\r\n        name: form.name,\r\n        groupToCreate: form.groupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeDecKey: setValue(dispatch)(\"decKey\"),\r\n        changeGroup: setValue(dispatch)(\"group\"),\r\n        changeGroupToCreate: setValue(dispatch)(\"groupToCreate\"),\r\n        changeActive: toggleValue(dispatch)(\"active\"),\r\n        changeName: setValue(dispatch)(\"name\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(NamesSection)));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","import SectionTitle from \"./SectionTitle\";\r\nexport default SectionTitle;","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst SectionTitle = ({text, children}) => (\r\n    <>\r\n        <div className=\"sectionTitle\">\r\n            <span>{text || children}</span>\r\n        </div>\r\n        <div className=\"spaceHolder\"/>\r\n    </>\r\n);\r\n\r\nexport default SectionTitle;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst BackSpaceActionInput = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"175px\",\r\n      width: \"175px\",\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default BackSpaceActionInput;","import PositioningSection from \"./PositioningSection\";\r\nexport default PositioningSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport SectionTitle from \"../../common/SectionTitle\";\r\nimport { backSpaceActions, decoratorsList } from \"../../constants\";\r\nimport BackSpaceActionInput from \"./BackSpaceActionInput\";\r\nimport { setValue, toggleValue } from \"../../actions\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst PositioningSection = props => {\r\n    const {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        fixedIndentation, changeisFixedIndentation,\r\n        softReturn, changeSoftReturn,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    } = props;\r\n\r\n    const backSpaceActionStyleSettingsState = backspaceActionWithContent === \"apply_other_pd\" ? \"shown\" : \"hidden\";\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Identational level</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={indentationalLevel}\r\n                    onChange={changeIndentationalLevel}\r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>Fixed indentation</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={fixedIndentation}\r\n                    onChange={changeisFixedIndentation}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n\r\n            <span>Soft return</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={softReturn}\r\n                    onChange={changeSoftReturn}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n            \r\n            <SectionTitle text=\"BACKSPACE\" />\r\n\r\n            <span>At the beginning of a section with content</span>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <NativeSelect \r\n                        value={backspaceActionWithContent}\r\n                        onChange={changeBackspaceActionWithContent}\r\n                        input={ <BackSpaceActionInput /> }\r\n                    >\r\n                        {backSpaceActions.map(action => (\r\n                            <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                        ))}\r\n                    </NativeSelect>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${backSpaceActionStyleSettingsState} wideSelectBox`}>\r\n                    <NativeSelect\r\n                        value={backspaceActionWithContentStyle}\r\n                        onChange={changeBackspaceActionWithContentStyle}\r\n                        input={ <CustomInput /> }\r\n                    >\r\n                        <option value=\"default\">Global Fallback Style</option>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n\r\n            <SectionTitle text=\"RETURN\" />\r\n\r\n\r\n            <span>Style of next section</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={returnActionNextSection}\r\n                    onChange={changeReturnActionNextSection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n\r\n            <span>In empty section change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect \r\n                    value={returnActionEmptySection}\r\n                    onChange={changeReturnActionEmptySection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <SectionTitle text=\"TAB / SHIFT+TAB\" />\r\n\r\n            <span>TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={tabAction}\r\n                    onChange={changeTabAction}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>SHIFT+TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={shiftTabAction}\r\n                    onChange={changeShiftTabAction} \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        indentationalLevel: form.indentationalLevel,\r\n        backspaceActionWithContent: form.backspaceActionWithContent,\r\n        backspaceActionWithContentStyle: form.backspaceActionWithContentStyle,\r\n        returnActionNextSection: form.returnActionNextSection,\r\n        returnActionEmptySection: form.returnActionEmptySection,\r\n        tabAction: form.tabAction,\r\n        shiftTabAction: form.shiftTabAction,\r\n        fixedIndentation: form.fixedIndentation,\r\n        softReturn: form.softReturn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeIndentationalLevel: setValue(dispatch)(\"indentationalLevel\"),\r\n        changeBackspaceActionWithContent: setValue(dispatch)(\"backspaceActionWithContent\"),\r\n        changeBackspaceActionWithContentStyle: setValue(dispatch)(\"backspaceActionWithContentStyle\"),\r\n        changeBackspaceActionWithoutContent: setValue(dispatch)(\"backspaceActionWithoutContent\"),\r\n        changeBackspaceActionWithoutContentStyle: setValue(dispatch)(\"backspaceActionWithoutContentStyle\"),\r\n        changeReturnActionNextSection: setValue(dispatch)(\"returnActionNextSection\"),\r\n        changeReturnActionEmptySection: setValue(dispatch)(\"returnActionEmptySection\"),\r\n        changeTabAction: setValue(dispatch)(\"tabAction\"),\r\n        changeShiftTabAction: setValue(dispatch)(\"shiftTabAction\"),\r\n        changeisFixedIndentation: toggleValue(dispatch)(\"fixedIndentation\"),\r\n        changeSoftReturn: toggleValue(dispatch)(\"softReturn\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(PositioningSection));","import { getOffset, getCorrectColor, getPreviewFont } from \"../../helpers\";\r\nimport { alignmentsMap, DEFAULT_FONT_SIZE, DEFAULT_LINE_SPACING } from \"../../constants\";\r\n\r\nexport const generatePreviewStyle = formState => {\r\n    const {\r\n        font,\r\n        customFont,\r\n        alignment,\r\n        fontSize,\r\n        fontColor,\r\n        bold,\r\n        italic,\r\n        underlined,\r\n        stroke,\r\n        textTransform,\r\n        verticalAlign,\r\n        marginTop,\r\n        marginBottom,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        customLineSpacing,\r\n        wordSpacing,\r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderType,\r\n        borderColor,\r\n        borderThickness,\r\n        fillingColor,\r\n        fillingConnectToPrevious,\r\n        connectToPrevious,\r\n    } = formState;\r\n    \r\n    const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n    const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n    const previewAdditionalFillingColor = fillingConnectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n    const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n    const previewMarginLeft = `${!otherRowsIndent ? 0 : (otherRowsIndent >= 6 ? 6 : otherRowsIndent)}cm`;\r\n    const previewTextIndent = `${!indentsDifference ? 0 : (indentsDifference >= 6 ? 6 : indentsDifference)}cm`;\r\n    const previewLineSpacing = lineSpacing !== \"custom\" ? lineSpacing : (customLineSpacing || DEFAULT_LINE_SPACING);\r\n    const offset = getOffset(verticalAlign, fontSize);\r\n    const previewMarginTop = `${(!connectToPrevious ? parseFloat(marginTop) : 0) + offset}pt`;\r\n    const previewMarginBottom = `${(!connectToPrevious ? parseFloat(marginBottom) : 0) - offset}pt`;\r\n    const previewBorderLeft = borderLeft ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderRight = borderRight ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderTop = borderTop ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderBottom = borderBottom ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const correctFontSize = fontSize <= 120 ? fontSize : 120;\r\n    const previewStyle = {\r\n        fontSize: !fontSize ? `${DEFAULT_FONT_SIZE}pt` : `${correctFontSize}pt`,\r\n        color: `#${previewFontColor}`,\r\n        fontFamily: getPreviewFont(font, customFont),\r\n        alignItems: alignmentsMap[alignment],\r\n        textAlign: alignment,\r\n        fontWeight: bold ? \"bold\" : \"normal\",\r\n        fontStyle: italic ? \"italic\" : \"normal\",\r\n        textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n        verticalAlign,\r\n        textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n        fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n        backgroundColor: `#${previewFillingColor}`,\r\n        backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        borderImage: `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        marginLeft: previewMarginLeft,\r\n        textIndent: previewTextIndent,\r\n        wordSpacing: `${wordSpacing || 0}pt`,\r\n        lineHeight: previewLineSpacing,\r\n        marginTop: previewMarginTop,\r\n        marginBottom: previewMarginBottom,\r\n        borderLeft: previewBorderLeft,\r\n        borderRight: previewBorderRight,\r\n        borderTop: previewBorderTop,\r\n        borderBottom: previewBorderBottom,\r\n        outline: \"none\",\r\n        ...borderLeft && { paddingLeft: `${correctFontSize / 3}pt`},\r\n        ...borderRight && { paddingRight: `${correctFontSize / 3}pt`},\r\n        ...borderTop && { paddingTop: `${correctFontSize / 3}pt`},\r\n        ...borderBottom && { paddingBottom: `${correctFontSize / 3}pt`},\r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport const generateSideNumberStyle = formState => {\r\n    const { \r\n        listType,\r\n        suffixDistance,\r\n        sideNumber,\r\n        sideNumberFont,\r\n        customSideNumberFont,\r\n        sideNumberAlignment,\r\n        sideNumberFontSize,\r\n        sideNumberFontColor,\r\n        sideNumberFillingColor,\r\n        sideNumberWidth,\r\n        sideNumberRadius,\r\n        sideNumberBold,\r\n        sideNumberItalic,\r\n        sideNumberUnderlined,\r\n        sideNumberLineHeight,\r\n    } = formState;\r\n\r\n    const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"f5f5f5\");\r\n    const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n    const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n        fontFamily: getPreviewFont(sideNumberFont, customSideNumberFont),\r\n        textAlign: sideNumberAlignment,\r\n        fontSize: !sideNumberFontSize ? `${DEFAULT_FONT_SIZE}pt` : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n        color: `#${previewSideNumberFontColor}`,\r\n        backgroundColor: `#${previewSideNumberFillingColor}`,\r\n        minWidth: `${!sideNumberWidth ? 0 : (sideNumberWidth < 150 ? sideNumberWidth : 150)}pt`,\r\n        borderRadius: `${sideNumberRadius || 0}pt`,\r\n        fontWeight: sideNumberBold ? \"bold\" : \"normal\",\r\n        fontStyle: sideNumberItalic ? \"italic\" : \"normal\",\r\n        textDecoration: sideNumberUnderlined ? \"underline\" : \"none\",\r\n        ...sideNumberLineHeight && { lineHeight: `${sideNumberLineHeight}pt`},\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n    };\r\n\r\n    return sideNumberStyle;\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { generatePreviewStyle, generateSideNumberStyle } from \"./generators\";\r\nimport { getListChars } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = props => {\r\n    const { \r\n        formState,\r\n        prefix, \r\n        suffix, \r\n        suffixDistance,\r\n        listType,\r\n        listItem, \r\n        unicodeChar,\r\n        numberingStyle,\r\n        sideNumber,\r\n    } = props;\r\n\r\n    const isOrderedList = listType === \"ordered\";\r\n\r\n    const listChars = getListChars({ \r\n        isOrderedList, \r\n        numberingStyle, \r\n        listItem, \r\n        unicodeChar \r\n    });\r\n\r\n    const listItemBeginnings = listChars.map(listChar => {\r\n        return (`${prefix}${listChar}${suffix}`);\r\n    });\r\n\r\n    const previewStyle = generatePreviewStyle(formState);\r\n    const isSideNumber = isOrderedList && sideNumber;\r\n    const sideNumberStyle = isSideNumber ? generateSideNumberStyle(formState) : {};\r\n    const listItemBeginningStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className=\"demonstrationElement\">\r\n                    <div\r\n                        className=\"demonstrationElement-text\"\r\n                        style={previewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                        { isSideNumber && (\r\n                            <>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[3]}`}</span><span>One more list item</span>\r\n                                </div>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[4]}`}</span><span>And one more</span>\r\n                                </div>\r\n                            </>\r\n                        ) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n        prefix: form.prefix, \r\n        suffix: form.suffix,\r\n        suffixDistance: form.suffixDistance,\r\n        listType: form.listType,\r\n        listItem: form.listItem, \r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        sideNumber: form.sideNumber,\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps)(ListPreview));","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.PureComponent {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, defaultColorCode, required, bottomAligned } = this.props;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n        const colorPickerClassName = `colorPicker${ bottomAligned ? \" colorPicker_bottomAligned\" : \"\"}`;\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        if (defaultColorCode) {\r\n                            selectAllOnClick(defaultColorCode)(e);\r\n                        }\r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={this.showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className={colorPickerClassName}>\r\n                        <div className=\"colorPicker-chromeBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={this.colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={this.hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport CustomInput from \"./CustomInput\";\r\nimport { fontSet, DEFAULT_FONT } from \"../constants\";\r\nimport { isFontAvailable, focusInput, changeAndScroll } from \"../helpers\";\r\n\r\nclass FontSelectFields extends React.PureComponent {\r\n    customFontInputRef = React.createRef();\r\n\r\n    onFontChange = e => {\r\n        this.props.changeFont(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customFontInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { font, customFont, changeCustomFont } = this.props;\r\n        const availableFonts = fontSet.filter(fontName => fontName === font || isFontAvailable(fontName));\r\n        const optionalFieldState = font === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        return (\r\n            <>\r\n                <span >Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeAndScroll(this.onFontChange, 500)}\r\n                >\r\n                    <option value={DEFAULT_FONT}>Helvetica</option>\r\n                    { availableFonts.map(fontName => <option value={fontName} key={fontName}>{fontName}</option>) }\r\n                    <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                </NativeSelect>\r\n    \r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <span></span>\r\n                </div>\r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <TextField \r\n                        value={customFont}\r\n                        onChange={changeCustomFont}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        placeholder=\"Enter the font name\"\r\n                        inputRef={this.customFontInputRef}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FontSelectFields;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport ListPreview from \"../../common/Preview/ListPreview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport LabelWithAsterisk from \"../../common/LabelWithAsterisk\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport { \r\n    listStyleTypes, \r\n    bulletNamesMap, \r\n    HOLDER, \r\n    DEFAULT_FONT_SIZE,\r\n    DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    DEFAULT_SIDE_NUMBER_WIDTH,\r\n    DEFAULT_SIDE_NUMBER_RADIUS,\r\n } from \"../../constants\";\r\nimport { \r\n    updateValidationError,\r\n    setValue,\r\n    toggleValue,\r\n    setNumber,\r\n    setColor,\r\n    setBullet,\r\n} from \"../../actions\";\r\nimport { \r\n    selectAllOnClick, \r\n    changeAndScroll, \r\n    focusInput,\r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n} from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ListSection extends React.Component {\r\n    listNameInputRef = React.createRef();\r\n    unicodeCharInputRef = React.createRef();\r\n\r\n    onIsListChange = e => {\r\n        const { listName } = this.props;\r\n        if (e.target.checked) {\r\n            if (listName === HOLDER) {\r\n                this.props.changeListName(null, \"\");\r\n            }\r\n        } else if (listName === \"\") {\r\n            setTimeout(() => this.props.changeListName(null, HOLDER), 200);\r\n        }\r\n        this.props.changeIsList(e);\r\n\r\n        if (e.target.checked && listName === HOLDER) {\r\n            focusInput(this.listNameInputRef);\r\n        }       \r\n    };\r\n\r\n    onListTypeChange = e => {\r\n        const { suffix } = this.props;\r\n        const { value } = e.target;\r\n        this.props.changeListType(null, value);\r\n        if (value === \"ordered\" && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        } else if (value === \"unordered\" && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        }\r\n    };\r\n\r\n    onListItemChange = e => {\r\n        this.props.changeListItem(e);\r\n        if (e.target.value === \"custom\" && !this.props.unicodeChar) {\r\n            focusInput(this.unicodeCharInputRef);\r\n        }\r\n    };\r\n\r\n    onUnicodeNumberChange = e => {\r\n        const newUnicodeNumber = this.props.changeUnicodeNumber(e);\r\n        const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n        this.props.changeUnicodeChar(null, newUnicodeChar);\r\n    };\r\n    \r\n    onUnicodeCharChange = e => {\r\n        const newUnicodeChar = this.props.changeUnicodeChar(e);\r\n        const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n        this.props.changeUnicodeNumber(null, newUnicodeNumber);\r\n    };\r\n\r\n    onSideNumberChange = e => {\r\n        const { suffix } = this.props;\r\n        this.props.changeSideNumber(e);\r\n        if (e.target.checked && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        } else if (!e.target.checked && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n        if (this.props.validationErrorInSection && this.props.listName) {\r\n            this.props.updateValidationError({ listSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            validationErrorInSection,\r\n            listPreviewProps,\r\n            isList,\r\n            listName, changeListName,\r\n            orderLevel, changeOrderLevel,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listType,\r\n            listItem,\r\n            unicodeNumber,\r\n            unicodeChar,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changeIncludePreviousFrom,\r\n            sideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            customSideNumberFont, changeCustomSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberWidth, changeSideNumberWidth,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n            sideNumberBold, changeSideNumberBold,\r\n            sideNumberItalic, changeSideNumberItalic,\r\n            sideNumberUnderlined, changeSideNumberUnderlined,\r\n            sideNumberLineHeight, changeSideNumberLineHeight,\r\n        } = this.props;\r\n        \r\n        const mainListSettingsState = isList ? \"shown\" : \"hidden\";\r\n        const unorderedListSettingsState = (isList && listType === \"unordered\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState = (isList && listType === \"unordered\" && listItem === \"custom\") ? \"shown\" : \"hidden\";\r\n        const orderedListSettingsState = (isList && listType === \"ordered\") ? \"shown\" : \"hidden\";\r\n        const sideNumberSettingsState = (isList && listType === \"ordered\" && sideNumber) ? \"shown\" : \"hidden\";\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"dialogGrid dialogGrid_2cols\">\r\n                    <div>\r\n                        <div>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                                <div className=\"listItemSpan\">\r\n                                    <span>Is it a list?</span>\r\n                                </div>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={isList} \r\n                                        onChange={changeAndScroll(this.onIsListChange)} \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${mainListSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth optionalSettings\">\r\n                                    <LabelWithAsterisk>List name</LabelWithAsterisk>\r\n                                    <TextField\r\n                                        value={listName}\r\n                                        onChange={changeListName} \r\n                                        error={validationErrorInSection && !listName}\r\n                                        inputRef={this.listNameInputRef}\r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Order level</span>\r\n                                    <div>\r\n                                        <NativeSelect\r\n                                            value={orderLevel}\r\n                                            onChange={changeOrderLevel}\r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"\">...</option>\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                    </div>\r\n    \r\n                                    <span>Prefix</span>\r\n                                    <TextField\r\n                                        value={prefix}\r\n                                        onChange={changePrefix} \r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Suffix</span>\r\n                                    <TextField\r\n                                        value={suffix}\r\n                                        onChange={changeSuffix} \r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                        onClick={selectAllOnClick(\".\")}\r\n                                    />\r\n    \r\n                                    <span>Suffix distance</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <NativeSelect\r\n                                            value={suffixDistance}\r\n                                            onChange={changeSuffixDistance} \r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"0.25\">0.25</option>\r\n                                            <option value=\"0.5\">0.5</option>\r\n                                            <option value=\"0.75\">0.75</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"1.25\">1.25</option>\r\n                                            <option value=\"1.5\">1.5</option>\r\n                                            <option value=\"1.75\">1.75</option>\r\n                                            <option value=\"2\">2</option>\r\n                                        </NativeSelect>\r\n                                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                                    </div>\r\n    \r\n                                    <span>Magic Tabs</span>\r\n                                    <div className=\"unlabeledCheckbox\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={magicTabs} \r\n                                            onChange={changeMagicTabs} \r\n                                        />\r\n                                    </div>\r\n    \r\n                                    <span>Type of list</span>\r\n                                    <RadioGroup \r\n                                        value={listType} \r\n                                        onChange={changeAndScroll(this.onListTypeChange)}\r\n                                        row\r\n                                    >\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"unordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Unordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"ordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Ordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                    </RadioGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${orderedListSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {listStyleTypes.map(style => (\r\n                                            <option value={style.value} key={style.value}>{style.name}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changeIncludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Side number</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={changeAndScroll(this.onSideNumberChange)}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                            </div> \r\n    \r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${sideNumberSettingsState}`}>\r\n                                <div className=\"flexibleGrid listTypeSettings\">\r\n                                    <FontSelectFields \r\n                                        font={sideNumberFont}\r\n                                        changeFont={changeSideNumberFont}\r\n                                        customFont={customSideNumberFont}\r\n                                        changeCustomFont={changeCustomSideNumberFont}\r\n                                    />\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFontColor} \r\n                                        changeColorCode={changeSideNumberFontColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FONT_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFillingColor} \r\n                                        changeColorCode={changeSideNumberFillingColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FILLING_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n    \r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_WIDTH)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span>Line height</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberLineHeight}\r\n                                            onChange={changeSideNumberLineHeight}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>  \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_RADIUS)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span className=\"stylingsSpan\">Stylings</span>\r\n                                    <div className=\"checkBoxesSet\">\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberBold}\r\n                                                onChange={changeSideNumberBold}\r\n                                                label=\"Bold\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberItalic}\r\n                                                onChange={changeSideNumberItalic}\r\n                                                label=\"Italic\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                label=\"Underlined\"\r\n                                                labelPlacement=\"end\"\r\n                                                checked={sideNumberUnderlined}\r\n                                                onChange={changeSideNumberUnderlined}\r\n                                            />\r\n                                        </div>\r\n                                    </div>  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className={`listPreviewBox optionalSettings optionalSettings_${mainListSettingsState}`}>\r\n                        <ListPreview {...listPreviewProps} />\r\n                    </div>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${unorderedListSettingsState}`}>\r\n                    <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listItemSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={this.onListItemChange} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Object.entries(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"custom\"} className=\"highlightedOption\">Custom</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${customListItemSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Unicode number</span>\r\n                                    <div>\r\n                                        <TextField  \r\n                                            value={unicodeNumber}\r\n                                            onChange={this.onUnicodeNumberChange}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"unicodeInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Char</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeChar}\r\n                                            onChange={this.onUnicodeCharChange}\r\n                                            onClick={selectAllOnClick()}\r\n                                            inputRef={this.unicodeCharInputRef}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"bulletInput\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return {\r\n        validationErrorInSection: validationError.listSection,\r\n        formState: form,\r\n        isList: form.isList,\r\n        listName: form.listName, \r\n        orderLevel: form.orderLevel,\r\n        prefix: form.prefix,\r\n        suffix: form.suffix,\r\n        suffixDistance: form.suffixDistance,\r\n        magicTabs: form.magicTabs,\r\n        listType: form.listType,\r\n        listItem: form.listItem,\r\n        unicodeNumber: form.unicodeNumber,\r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        continueNumbering: form.continueNumbering,\r\n        allowRestartNumbering: form.allowRestartNumbering,\r\n        includePreviousFrom: form.includePreviousFrom,\r\n        sideNumber: form.sideNumber,\r\n        sideNumberFont: form.sideNumberFont,\r\n        customSideNumberFont: form.customSideNumberFont,\r\n        sideNumberAlignment: form.sideNumberAlignment,\r\n        sideNumberFontSize: form.sideNumberFontSize,\r\n        sideNumberFontColor: form.sideNumberFontColor,\r\n        sideNumberFillingColor: form.sideNumberFillingColor,\r\n        sideNumberWidth: form.sideNumberWidth,\r\n        sideNumberRadius: form.sideNumberRadius,\r\n        sideNumberBold: form.sideNumberBold,\r\n        sideNumberItalic: form.sideNumberItalic,\r\n        sideNumberUnderlined: form.sideNumberUnderlined,\r\n        sideNumberLineHeight: form.sideNumberLineHeight,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeListName: setValue(dispatch)(\"listName\"),\r\n        changeIsList: toggleValue(dispatch)(\"isList\"),\r\n        changeOrderLevel: setValue(dispatch)(\"orderLevel\"),\r\n        changePrefix: setValue(dispatch)(\"prefix\"),\r\n        changeSuffix: setValue(dispatch)(\"suffix\"),\r\n        changeSuffixDistance: setValue(dispatch)(\"suffixDistance\"),\r\n        changeMagicTabs: toggleValue(dispatch)(\"magicTabs\"),\r\n        changeListType: setValue(dispatch)(\"listType\"),\r\n        changeListItem: setValue(dispatch)(\"listItem\"),\r\n        changeUnicodeNumber: setColor(dispatch)(\"unicodeNumber\"),\r\n        changeUnicodeChar: setBullet(dispatch)(\"unicodeChar\"),\r\n        changeNumberingStyle: setValue(dispatch)(\"numberingStyle\"),\r\n        changeContinueNumbering: toggleValue(dispatch)(\"continueNumbering\"),\r\n        changeAllowRestartNumbering: toggleValue(dispatch)(\"allowRestartNumbering\"),\r\n        changeIncludePreviousFrom: setValue(dispatch)(\"includePreviousFrom\"),\r\n        changeSideNumber: toggleValue(dispatch)(\"sideNumber\"),\r\n        changeSideNumberFont: setValue(dispatch)(\"sideNumberFont\"),\r\n        changeCustomSideNumberFont: setValue(dispatch)(\"customSideNumberFont\"),\r\n        changeSideNumberAlignment: setValue(dispatch)(\"sideNumberAlignment\"),\r\n        changeSideNumberFontSize: setNumber(dispatch)(\"sideNumberFontSize\"),\r\n        changeSideNumberFontColor: setColor(dispatch)(\"sideNumberFontColor\"),\r\n        changeSideNumberFillingColor: setColor(dispatch)(\"sideNumberFillingColor\"),\r\n        changeSideNumberWidth: setNumber(dispatch)(\"sideNumberWidth\"),\r\n        changeSideNumberRadius: setNumber(dispatch)(\"sideNumberRadius\"),\r\n        changeSideNumberBold: toggleValue(dispatch)(\"sideNumberBold\"),\r\n        changeSideNumberItalic: toggleValue(dispatch)(\"sideNumberItalic\"),\r\n        changeSideNumberUnderlined: toggleValue(dispatch)(\"sideNumberUnderlined\"),\r\n        changeSideNumberLineHeight: setNumber(dispatch)(\"sideNumberLineHeight\"),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListSection);","import ListSection from \"./ListSection\";\r\nexport default ListSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { setValue } from \"../actions\";\r\nimport { MAIN_LANG_KEY } from \"../constants\";\r\n\r\nclass ReferencingSection extends React.Component {\r\n    onXrefChange = (e, xrefName, xref) => {\r\n        if (xref) {\r\n            this.props.changeReferenceGroupToCreate(null, xref);\r\n        }\r\n        this.props.changeReferenceGroup(e, xrefName);\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            referenceGroupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,  \r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            referenceGroup,\r\n        } = this.props;\r\n        \r\n        const newGroupName = referenceGroupToCreate[MAIN_LANG_KEY] || referenceGroupToCreate.groupKey;\r\n        const isEditMode = !!newGroupName;\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Reference group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInput /> } \r\n                        value={referenceGroup} \r\n                        onChange={this.onXrefChange} \r\n                    >\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"\">none</option>\r\n                        <option value=\"0\">Reference group 1</option>\r\n                        <option value=\"1\">Reference group 2</option>\r\n                    </NativeSelect>\r\n                    {\r\n                        !(isEditMode && referenceGroup !== newGroupName) &&\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                     }\r\n                </div>\r\n                <NewGroupDialog\r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onXrefChange}\r\n                    savedGroup={referenceGroupToCreate}\r\n                    groupType=\"xref\" \r\n                    { ...{ \r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        referenceGroup: form.referenceGroup,\r\n        referenceGroupToCreate: form.referenceGroupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeReferenceGroup: setValue(dispatch)(\"referenceGroup\"),\r\n        changeReferenceGroupToCreate: setValue(dispatch)(\"referenceGroupToCreate\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(ReferencingSection)));","import * as React from \"react\";\r\nimport deepEqual from \"fast-deep-equal\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \");\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === \"function\" ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== \"function\" ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || \"table\", Object.assign({}, props, { ref: typeof innerRef === \"function\" ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContentEditable from \"../ContentEditable\";\r\nimport { generatePreviewStyle } from \"./generators\";\r\nimport { setValue } from \"../../actions\";\r\nimport { selectAllEditableContent, getUnstyledText } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nclass Preview extends React.Component {\r\n    onPreviewTextChange = e => {\r\n        const { value } = e.target;\r\n        if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n            this.props.changePreviewText(null, getUnstyledText(value));\r\n        } else {\r\n            this.props.changePreviewText(null, `<div><br></div>`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const previewStyle = generatePreviewStyle(this.props.formState);\r\n        const { previewText } = this.props;\r\n    \r\n        return (\r\n            <div className=\"preview\">\r\n                <span className=\"preview-title\">Preview</span>\r\n                <div \r\n                    className=\"preview-content preview-content_withPointer\" \r\n                    onClick={selectAllEditableContent(\"demonstrationElement\")}\r\n                >\r\n                    <div className=\"demonstrationElement\">\r\n                        <ContentEditable\r\n                            className=\"demonstrationElement-text\"\r\n                            onChange={this.onPreviewTextChange} \r\n                            html={previewText}\r\n                            style={previewStyle}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changePreviewText: setValue(dispatch)(\"previewText\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(Preview));","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport Preview from \"../../common/Preview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport {  setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { DEFAULT_FONT_SIZE, DEFAULT_FONT_COLOR } from \"../../constants\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = props => {\r\n    const { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign,\r\n        readOnly, changeReadOnly,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"flexibleGrid\">\r\n                <FontSelectFields { ...{ font, changeFont, customFont, changeCustomFont }} />\r\n                \r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    defaultColorCode={DEFAULT_FONT_COLOR}\r\n                    required\r\n                />\r\n\r\n                <span>Sub/Superscript</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={verticalAlign} \r\n                        onChange={changeVerticalAlign}\r\n                        input={ <CustomInput /> } \r\n                    >\r\n                        <option value=\"baseline\">None</option>\r\n                        <option value=\"sub\">Subscript</option>\r\n                        <option value=\"super\">Superscript</option>\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_topIndented\">\r\n            <span className=\"stylingsSpan\">Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Read only</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={readOnly}\r\n                    onChange={changeReadOnly}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        font: form.font,\r\n        customFont: form.customFont,\r\n        alignment: form.alignment,\r\n        fontSize: form.fontSize,\r\n        fontColor: form.fontColor,\r\n        bold: form.bold,\r\n        italic: form.italic,\r\n        underlined: form.underlined,\r\n        stroke: form.stroke,\r\n        textTransform: form.textTransform,\r\n        verticalAlign: form.verticalAlign,\r\n        readOnly: form.readOnly,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeFont: setValue(dispatch)(\"font\"),\r\n        changeCustomFont: setValue(dispatch)(\"customFont\"),\r\n        changeAlignment: setValue(dispatch)(\"alignment\"),\r\n        changeFontSize: setNumber(dispatch)(\"fontSize\"),\r\n        changeFontColor: setColor(dispatch)(\"fontColor\"),\r\n        changeBold: toggleValue(dispatch)(\"bold\"),\r\n        changeItalic: toggleValue(dispatch)(\"italic\"),\r\n        changeUnderlined: toggleValue(dispatch)(\"underlined\"),\r\n        changeStroke: toggleValue(dispatch)(\"stroke\"),\r\n        changeTextTransform: setValue(dispatch)(\"textTransform\"),\r\n        changeVerticalAlign: setValue(dispatch)(\"verticalAlign\"),\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeReadOnly: toggleValue(dispatch)(\"readOnly\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TypographySection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { toggleValue } from \"../actions\";\r\n\r\nconst ConnectToPreviousField = ({ connectToPrevious, changeConnectToPrevious }) => (\r\n    <>\r\n        <span>Merge sections</span>\r\n        <div className=\"unlabeledCheckbox\">\r\n            <Checkbox \r\n                checked={connectToPrevious}\r\n                onChange={changeConnectToPrevious}\r\n                color=\"primary\" \r\n            />\r\n        </div>\r\n    </>\r\n);\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeConnectToPrevious: toggleValue(dispatch)(\"connectToPrevious\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ConnectToPreviousField));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport Preview from \"../common/Preview\";\r\nimport { setValue, setNumber } from \"../actions\";\r\nimport { DEFAULT_MARGIN, DEFAULT_WORD_SPACING } from \"../constants\";\r\nimport { selectAllOnClick, focusInput, changeAndScroll } from \"../helpers\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\n\r\nclass DistancesSection extends React.Component {\r\n    customLineSpacingInputRef = React.createRef();\r\n\r\n    onLineSpacingChange = e => {\r\n        this.props.changeLineSpacing(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customLineSpacingInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            previewProps,\r\n            connectToPrevious,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            firstRowIndent, changeFirstRowIndent,\r\n            otherRowsIndent, changeOtherRowsIndent,\r\n            lineSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n            wordSpacing, changeWordSpacing,\r\n        } = this.props;\r\n\r\n        const customLineSpacingFieldState = lineSpacing === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        const marginFieldsState = !connectToPrevious ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div className=\"flexibleGrid\">\r\n                    <ConnectToPreviousField />\r\n                    <div className={`optionalField optionalField ${marginFieldsState}`}>\r\n                      <span>Margin top</span>\r\n                    </div>\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginTop}\r\n                            onChange={changeMarginTop}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <div className={`optionalField ${marginFieldsState}`}>\r\n                        <span>Margin bottom</span>\r\n                    </div>\r\n\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginBottom}\r\n                            onChange={changeMarginBottom}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <span>1st row indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={firstRowIndent}\r\n                            onChange={changeFirstRowIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Other rows indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={otherRowsIndent}\r\n                            onChange={changeOtherRowsIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Line spacing</span>\r\n                    <div>\r\n                        <NativeSelect \r\n                            input={ <CustomInputShort /> } \r\n                            value={lineSpacing} \r\n                            onChange={changeAndScroll(this.onLineSpacingChange, 500)} \r\n                        >\r\n                            <option value=\"1.0\">1.0</option>\r\n                            <option value=\"1.15\">1.15</option>\r\n                            <option value=\"1.5\">1.5</option>\r\n                            <option value=\"2.0\">2.0</option>\r\n                            <option value=\"2.5\">2.5</option>\r\n                            <option value=\"3.0\">3.0</option>\r\n                            <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                        </NativeSelect> \r\n                    </div>\r\n\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                    </div>\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                            placeholder=\"Your value\"\r\n                            inputRef={this.customLineSpacingInputRef}\r\n                        />                                            \r\n                    </div>\r\n                        \r\n                    <span>Word spacing</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={wordSpacing}\r\n                            onChange={changeWordSpacing}\r\n                            onClick={selectAllOnClick(DEFAULT_WORD_SPACING)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n        marginTop: form.marginTop,\r\n        marginBottom: form.marginBottom,\r\n        firstRowIndent: form.firstRowIndent,\r\n        otherRowsIndent: form.otherRowsIndent,\r\n        lineSpacing: form.lineSpacing,\r\n        customLineSpacing: form.customLineSpacing,\r\n        wordSpacing: form.wordSpacing,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeMarginBottom: setNumber(dispatch)(\"marginBottom\"),\r\n        changeFirstRowIndent: setNumber(dispatch)(\"firstRowIndent\"),\r\n        changeOtherRowsIndent: setNumber(dispatch)(\"otherRowsIndent\"),\r\n        changeLineSpacing: setValue(dispatch)(\"lineSpacing\"),\r\n        changeCustomLineSpacing: setNumber(dispatch)(\"customLineSpacing\"),\r\n        changeWordSpacing: setNumber(dispatch)(\"wordSpacing\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(DistancesSection));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default FrameTypeInput;","import { getCorrectColor } from \"../../helpers\";\r\n\r\nconst generateBorderPreviewStyle = formState => {\r\n    const { \r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderColor,\r\n        borderThickness,\r\n        borderType,\r\n    } = formState;\r\n\r\n    const correctColor = getCorrectColor(borderColor);\r\n    const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n    const previewStyle = {\r\n        borderLeft: borderLeft ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginLeft: borderLeft ? \"0\" : previewBorderWidth, \r\n        borderRight: borderRight ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginRight: borderRight ? \"0\" : previewBorderWidth, \r\n        borderTop: borderTop ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginTop: borderTop ? \"0\" : previewBorderWidth, \r\n        borderBottom: borderBottom ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginBottom: borderBottom ? \"0\" : previewBorderWidth, \r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport default generateBorderPreviewStyle;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport FrameTypeInput from \"../../sections/FramesSection/FrameTypeInput\";\r\nimport Preview from \"../../common/Preview\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport ConnectToPreviousField from \"../../common/ConnectToPreviousField\";\r\nimport generateBorderPreviewStyle from \"./generateBorderPreviewStyle\";\r\nimport { setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\nimport { DEFAULT_BORDER_COLOR, DEFAULT_BORDER_THICKNESS } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass FramesSection extends React.Component {\r\n    onBorderTypeChange = e => {\r\n        this.props.changeBorderType(e);\r\n        if (e.target.value === \"double\" && this.props.borderThickness === \"2\") {\r\n            this.props.changeBorderThickness(null, \"3\");\r\n        } else if (e.target.value !== \"double\" && this.props.borderThickness === \"3\") {\r\n            this.props.changeBorderThickness(null, \"2\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            previewProps,\r\n            formState,\r\n            borderLeft, changeBorderLeft, \r\n            borderRight, changeBorderRight,\r\n            borderTop, changeBorderTop, \r\n            borderBottom, changeBorderBottom, \r\n            borderColor, changeBorderColor,\r\n            borderThickness, changeBorderThickness,\r\n            borderType,\r\n         } = this.props;\r\n\r\n        const previewStyle = generateBorderPreviewStyle(formState)\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div>\r\n                    <div className=\"directionControlsContainer\">\r\n                        <div className=\"directionsControls\" style={previewStyle}>\r\n                            <span className=\"directionLabel\">Left</span>\r\n                            <div className=\"centralColumn\">\r\n                                <span className=\"directionLabel\">Top</span>\r\n                                <div className=\"checkboxesKit crossGrid\">\r\n                                    <div id=\"r1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderTop}  \r\n                                            onChange={changeBorderTop}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderLeft}  \r\n                                            onChange={changeBorderLeft}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c2\" className=\"gridCell\">\r\n                                    </div>\r\n                                    <div id=\"r2c3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderRight}  \r\n                                            onChange={changeBorderRight}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderBottom}  \r\n                                            onChange={changeBorderBottom}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"directionLabel\">Bottom</span>\r\n                            </div>\r\n                            <span className=\"directionLabel\">Right</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <span>Frame color</span>\r\n                        <ColorField \r\n                            colorCode={borderColor} \r\n                            changeColorCode={changeBorderColor}\r\n                            defaultColorCode={DEFAULT_BORDER_COLOR}\r\n                            required\r\n                        />\r\n        \r\n                        <span>Frame thickness</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                                value={borderThickness}\r\n                                onChange={changeBorderThickness}\r\n                                onClick={selectAllOnClick(DEFAULT_BORDER_THICKNESS)}\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>                        \r\n        \r\n                        <span>Type of frame</span>\r\n                        <div >\r\n                            <Select\r\n                            input={<FrameTypeInput />}\r\n                            value={borderType}\r\n                            onChange={this.onBorderTypeChange}\r\n                            >\r\n                                <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                                <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                                <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                                <MenuItem value=\"double\">══════</MenuItem>              \r\n                            </Select>\r\n                        </div>\r\n\r\n                        <ConnectToPreviousField />\r\n                    </div>\r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        borderLeft: form.borderLeft,\r\n        borderRight: form.borderRight,\r\n        borderTop: form.borderTop,\r\n        borderBottom: form.borderBottom,\r\n        borderColor: form.borderColor,\r\n        borderThickness: form.borderThickness,\r\n        borderType: form.borderType,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeBorderLeft: toggleValue(dispatch)(\"borderLeft\"),\r\n        changeBorderRight: toggleValue(dispatch)(\"borderRight\"),\r\n        changeBorderTop: toggleValue(dispatch)(\"borderTop\"),\r\n        changeBorderBottom: toggleValue(dispatch)(\"borderBottom\"),\r\n        changeBorderColor: setColor(dispatch)(\"borderColor\"),\r\n        changeBorderThickness: setNumber(dispatch)(\"borderThickness\"),\r\n        changeBorderType: setValue(dispatch)(\"borderType\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FramesSection));","import FramesSection from \"./FramesSection\";\r\nexport default FramesSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Preview from \"../common/Preview\";\r\nimport ColorField from \"../common/ColorField\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\nimport { setColor } from \"../actions\";\r\n\r\nconst  FillingSection = ({ previewProps, fillingColor, changeFillingColor }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n                <ConnectToPreviousField />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        fillingColor: form.fillingColor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeFillingColor: setColor(dispatch)(\"fillingColor\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FillingSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport { setValue } from \"../actions\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        tocIndentation: form.tocIndentation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeTocIndentation: setValue(dispatch)(\"tocIndentation\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TocSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { setShortCut } from \"../actions\";\r\n\r\nconst ShortCutSection = ({ shortCutWinView, shortCutMacView, changeShortCutWin, changeShortCutMac }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        shortCutWinView: form.shortCutWinView,\r\n        shortCutMacView: form.shortCutMacView,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeShortCutWin: setShortCut(dispatch)(\"shortCutWin\", \"shortCutWinView\"),\r\n        changeShortCutMac: setShortCut(dispatch)(\"shortCutMac\", \"shortCutMacView\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ShortCutSection));","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomErrorTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n      textDecoration: \"red underline\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n        textDecoration: \"indianred underline\",\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomErrorTab;","import Tabs from \"@material-ui/core/Tabs\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n    }\r\n};\r\n\r\nexport default withStyles(styles)(Tabs);","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        \"&:after\": {\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: \"1280px\",\r\n        maxHeight: \"850px\",\r\n        minHeight: \"550px\",\r\n        width: \"calc(100% - 96px)\",\r\n        height: \"calc(100% - 96px)\",\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        border: \"none\",\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: \"middle\",\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","export const SAVE_DEC_FORM = \"SAVE_DEC_FORM\";\r\nexport const CLEAR_SAVED_DEC_FORM = \"CLEAR_SAVED_DEC_FORM\";\r\n\r\nexport const saveDecoratorForm = payload => {\r\n    return {\r\n        type: SAVE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearSavedDecoratorForm = () => {\r\n    return {\r\n        type: CLEAR_SAVED_DEC_FORM,\r\n    };\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport NamesSection from \"./sections/NamesSection\";\r\nimport PositioningSection from \"./sections/PositioningSection\";\r\nimport ListSection from \"./sections/ListSection\";\r\nimport ReferencingSection from \"./sections/ReferencingSection\";\r\nimport TypographySection from \"./sections/TypographySection\";\r\nimport DistancesSection from \"./sections/DistancesSection\";\r\nimport FramesSection from \"./sections/FramesSection\";\r\nimport FillingSection from \"./sections/FillingSection\";\r\nimport TocSection from \"./sections/TocSection\";\r\nimport ShortCutsSection from \"./sections/ShortCutsSection\";\r\n// import TestSection from \"./sections/TestSection\";\r\n\r\nimport theme from \"./theme\";\r\nimport CustomTab from \"./common/CustomTab\";\r\nimport CustomErrorTab from \"./common/CustomErrorTab\";\r\nimport CustomTabs from \"./common/CustomTabs\";\r\nimport CustomDialog from \"./common/CustomDialog\";\r\nimport { saveDecoratorForm } from \"../../actions\";\r\nimport { \r\n    closeDialog, \r\n    clearDecoratorForm, \r\n    switchDecDialogTab, \r\n    updateValidationError \r\n} from \"./actions\";\r\nimport { \r\n    fillMissedFields, \r\n    DecDataParser, \r\n    getTabsErrorState,\r\n    getTabNumberToSwitch,\r\n} from \"./helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass DecoratorDialog extends React.Component {\r\n    onClose = () => {\r\n        this.props.closeDialog();\r\n        this.props.clearForm();\r\n    };\r\n\r\n    onSaveButtonClick = () => {\r\n        const { formState, updateValidationError, switchTab, sendForm } = this.props;\r\n        const tabsErrorState = getTabsErrorState(formState);\r\n        if (tabsErrorState) {\r\n            updateValidationError(tabsErrorState);\r\n            switchTab(getTabNumberToSwitch(tabsErrorState));\r\n        } else {\r\n            const formToSend = DecDataParser.parseToSend(fillMissedFields(formState));\r\n            sendForm(formToSend);\r\n            this.onClose();\r\n        }\r\n    };\r\n\r\n    onTabSwitch = (e, tabNumber) => {\r\n        this.props.switchTab(tabNumber);\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            isOpen, \r\n            openedTab,\r\n            validationError, \r\n            isEditMode,\r\n        } = this.props;\r\n    \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <CustomDialog\r\n                    open={isOpen}\r\n                    onClose={this.onClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                    scroll=\"body\"\r\n                    className=\"decoratorDialog\"\r\n                    fullWidth={true}\r\n                    maxWidth={false}\r\n                    id=\"dialog\"\r\n                >\r\n                    <div className=\"header\">\r\n                        <DialogTitle className=\"header-title\">\r\n                            <p>Create new paragraph decorator</p>\r\n                        </DialogTitle>\r\n                        <div className=\"header-buttons\">\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                onClick={this.onClose}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.onSaveButtonClick}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                {isEditMode ? \"Save\" : \"Create\"}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <DialogContent className=\"content\">\r\n                        <div className=\"content-leftSide\">\r\n                            <CustomTabs \r\n                                className=\"dialogTabs\"\r\n                                value={openedTab} \r\n                                onChange={this.onTabSwitch} \r\n                                orientation=\"vertical\"\r\n                                color=\"primary\"\r\n                                indicatorColor=\"primary\"\r\n                            >\r\n                                { validationError.namesSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"Decorator's name\" /> )\r\n                                    :  ( <CustomTab className=\"dialogTab\" label=\"Decorator's name\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n    \r\n                                { validationError.listSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"List\" /> ) \r\n                                    : ( <CustomTab className=\"dialogTab\" label=\"List\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                                {/* <CustomTab className=\"dialogTab\" label=\"Test\" /> */}\r\n                            </CustomTabs>\r\n                        </div>\r\n                        <div className=\"content-rightSide\">\r\n                            { openedTab === 0 && <NamesSection /> }\r\n                            { openedTab === 1 && <PositioningSection /> }\r\n                            { openedTab === 2 && <ListSection /> }\r\n                            { openedTab === 3 && <ReferencingSection /> }\r\n                            { openedTab === 4 && <TypographySection /> }\r\n                            { openedTab === 5 && <DistancesSection /> }\r\n                            { openedTab === 6 && <FramesSection /> }\r\n                            { openedTab === 7 && <FillingSection /> }\r\n                            { openedTab === 8 && <TocSection /> }\r\n                            { openedTab === 9 && <ShortCutsSection /> }\r\n                            {/* openedTab === 10 && <TestSection /> */}\r\n                        </div>\r\n                    </DialogContent>\r\n                </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, isOpen, openedTab, validationError, isEditMode }}) => {\r\n    return { \r\n        formState: form,\r\n        isOpen,\r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        closeDialog: closeDialog(dispatch),\r\n        clearForm: () => dispatch(clearDecoratorForm()),\r\n        switchTab: payload => dispatch(switchDecDialogTab(payload)),\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecoratorDialog);","import DecoratorDialog from \"./DecoratorDialog\";\r\nexport default DecoratorDialog;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport DecoratorDialog from \"./components/DecoratorDialog\";\nimport { openDialog } from \"./components/DecoratorDialog/actions\";\nimport { clearSavedDecoratorForm,  saveDecoratorForm } from \"./actions\";\nimport { DecDataParser } from \"./components/DecoratorDialog/helpers\";\nimport theme from \"./components/DecoratorDialog/theme\";\n\nimport \"./App.css\";\n\nconst App = props => {\n    const { openDialog, saveForm, clearSavedForm, savedForm } = props;\n\n    const openEditDialog = () => {\n        openDialog(DecDataParser.parseToEdit(savedForm || {}));\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"startButtons\">\n                    { !savedForm ? (\n                        <Button \n                            onClick={() => openDialog()}\n                            color=\"primary\"\n                        >Create new</Button>\n                    ) : (\n                        <>\n                            <Button \n                                onClick={() => openEditDialog()}\n                            >Edit saved</Button>\n                            <Button \n                                onClick={clearSavedForm}\n                                color=\"secondary\"\n                            >Delete saved</Button>\n                        </>\n                    )}\n                </div>\n                <DecoratorDialog sendForm={saveForm} />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = ({ savedForm }) => {\n    return { savedForm };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openDialog: openDialog(dispatch),\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\n        clearSavedForm: () => dispatch(clearSavedDecoratorForm()),\n    };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SHOW_DEC_DIALOG, HIDE_DEC_DIALOG } from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isOpenReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SHOW_DEC_DIALOG:\r\n            return true;\r\n        case HIDE_DEC_DIALOG:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isOpenReducer;","import { UPDATE_DEC_FORM, CLEAR_DEC_FORM } from \"../../components/DecoratorDialog/actions\";\r\nimport { sampleText, initialFormState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst initialState = { \r\n    previewText: sampleText,\r\n    ...initialFormState,\r\n};\r\n\r\nconst decoratorFormReducer = (state = initialState, action) =>  {\r\n    switch (action.type) {\r\n        case UPDATE_DEC_FORM:\r\n            return { ...state, ...action.payload };\r\n        case CLEAR_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default decoratorFormReducer;","import { \r\n    UPDATE_VALIDATION_ERROR, \r\n    REMOVE_VALIDATION_ERROR, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nimport { tabsErrorInitialState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst validationErrorReducer = (state = tabsErrorInitialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_VALIDATION_ERROR:\r\n            return { ...state, ...action.payload };\r\n        case REMOVE_VALIDATION_ERROR:\r\n            return tabsErrorInitialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default validationErrorReducer;","import { \r\n    SWITCH_ON_DEC_DIALOG_EDIT_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_EDIT_MODE, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isEditModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_EDIT_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_EDIT_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isEditModeReducer;","import { \r\n    SWITCH_DEC_DIALOG_TAB,\r\n    RESET_DEC_DIALOG_TAB, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst initialState = 0;\r\n\r\nconst openedTabReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_DEC_DIALOG_TAB:\r\n            return action.payload;\r\n        case RESET_DEC_DIALOG_TAB:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default openedTabReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport isOpenReducer from \"./isOpenReducer\";\r\nimport decoratorFormReducer from \"./decoratorFormReducer\";\r\nimport validationErrorReducer from \"./validationErrorReducer\";\r\nimport isEditModeReducer from \"./isEditModeReducer\";\r\nimport openedTabReducer from \"./openedTabReducer\";\r\n\r\nconst decoratorDialogReducer = combineReducers({\r\n    isOpen: isOpenReducer,\r\n    openedTab: openedTabReducer,\r\n    validationError: validationErrorReducer,\r\n    isEditMode: isEditModeReducer,\r\n    form: decoratorFormReducer,\r\n});\r\n\r\nexport default decoratorDialogReducer;","import { SAVE_DEC_FORM, CLEAR_SAVED_DEC_FORM } from \"../actions\";\r\n\r\nconst initialState = null;\r\n\r\nexport const savedFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_DEC_FORM:\r\n            return action.payload;\r\n        case CLEAR_SAVED_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedFormReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport decoratorDialogReducer from \"./decoratorDialogReducer\";\r\nimport savedFormReducer from \"./savedFormReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    decoratorDialog: decoratorDialogReducer,\r\n    savedForm: savedFormReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}