{"version":3,"sources":["components/NewDecDialog/common/CustomInput.js","components/NewDecDialog/common/NewGroupDialog.js","components/NewDecDialog/common/LabelWithAsterisk.js","components/NewDecDialog/hoc/withNewGroupControl.js","components/NewDecDialog/sections/NamesSection.js","components/NewDecDialog/sections/WordExportSection.js","components/NewDecDialog/common/CustomInputShort.js","components/NewDecDialog/constants/emptyDecFormState.js","components/NewDecDialog/constants/decoratorsList.js","components/NewDecDialog/constants/fontsSet.js","components/NewDecDialog/constants/constants.js","components/NewDecDialog/sections/PositioningSection/BackSpaceActionInput.js","components/NewDecDialog/sections/PositioningSection/index.js","components/NewDecDialog/sections/PositioningSection/PositioningSection.js","components/NewDecDialog/common/Preview/ListPreview.js","components/NewDecDialog/helpers/DecDataParser.js","components/NewDecDialog/helpers/isFontAvailable.js","components/NewDecDialog/helpers/getShortCutUtils.js","components/NewDecDialog/helpers/isFormValid.js","components/NewDecDialog/helpers/helpers.js","components/NewDecDialog/common/ColorField/index.js","components/NewDecDialog/common/ColorField/ColorField.js","components/NewDecDialog/common/FontSelect.js","components/NewDecDialog/sections/ListSection.js","components/NewDecDialog/sections/ReferencingSection.js","components/NewDecDialog/common/ContentEditable.js","components/NewDecDialog/common/Preview/Preview.js","components/NewDecDialog/common/Preview/index.js","components/NewDecDialog/sections/TypographySection/index.js","components/NewDecDialog/sections/TypographySection/TypographySection.js","components/NewDecDialog/sections/DistancesSection.js","components/NewDecDialog/sections/FramesSection/FrameTypeInput.js","components/NewDecDialog/sections/FramesSection/index.js","components/NewDecDialog/sections/FramesSection/FramesSection.js","components/NewDecDialog/sections/FillingSection.js","components/NewDecDialog/sections/TocSection.js","components/NewDecDialog/sections/ShortCutsSection.js","components/NewDecDialog/sections/TestSection.js","components/NewDecDialog/hoc/withDialogControl.js","components/NewDecDialog/theme.js","components/NewDecDialog/Handlers.js","components/NewDecDialog/common/CustomTab.js","components/NewDecDialog/common/CustomErrorTab.js","components/NewDecDialog/common/CustomTabs.js","components/NewDecDialog/common/CustomDialog.js","components/NewDecDialog/actions/index.js","components/NewDecDialog/index.js","actions.js","App.js","reducers/decoratorDialogReducer/isOpenReducer.js","reducers/decoratorDialogReducer/decoratorFormReducer.js","components/NewDecDialog/getInitialState.js","reducers/decoratorDialogReducer/hasValidationErrorReducer.js","reducers/decoratorDialogReducer/isEditModeReducer.js","reducers/decoratorDialogReducer/openedTabReducer.js","reducers/decoratorDialogReducer/index.js","reducers/savedFormReducer.js","reducers/rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","NewGroupDialog","state","props","currentGroup","groupType","nameEn","nameDe","nameRu","nameFr","nameFrCa","nameEs","groupKey","onInputChange","inputName","e","setState","target","value","onClose","hideDialog","onGroupSave","onSave","changeGroupSelect","trim","length","groupToSave","this","isOpen","isEditMode","titleText","buttonText","Dialog","className","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","variant","margin","onChange","DialogActions","Button","onClick","color","React","Component","LabelWithAsterisk","children","withNewGroupControl","ViewComponent","groupSelect","newGroup","handleClick","newValue","decKey","changeDecKey","group","changeGroup","active","changeActive","decNameEn","changeDecNameEn","decNameDe","changeDecNameDe","decNameRu","changeDecNameRu","decNameFr","changeDecNameFr","decNameFrCa","changeDecNameFrCa","decNameEs","changeDecNameEs","changeGroupToCreate","validationError","newGroupName","onGroupChange","args","error","NativeSelect","Checkbox","checked","WordExportSection","wordStyleName","changeWordStyleName","softReturn","changeSoftReturn","CustomInputShort","HOLDER","autoFillingRequiredFields","sideNumberFontSize","sideNumberFontColor","sideNumberFillingColor","sideNumberWidth","sideNumberRadius","fontColor","marginBottom","firstRowIndent","otherRowsIndent","wordSpacing","borderThickness","emptyDecFormState","groupToCreate","indentationalLevel","backspaceActionWithContent","backspaceActionWithContentStyle","returnActionNextSection","returnActionEmptySection","tabAction","shiftTabAction","isList","listName","orderLevel","prefix","suffix","suffixDistance","magicTabs","listType","listItem","unicodeNumber","unicodeChar","numberingStyle","continueNumbering","allowRestartNumbering","includePreviousFrom","sideNumber","sideNumberFont","customSideNumberFont","sideNumberAlignment","referenceGroup","referenceGroupToCreate","font","customFont","alignment","fontColorName","bold","italic","underlined","stroke","textTransform","verticalAlign","lineSpacing","customLineSpacing","leftBorder","rightBorder","topBorder","bottomBorder","borderColorName","borderType","fillingColorName","fillingColor","connectToPrevious","tocIndentation","shortCutWin","shortCutWinView","shortCutMac","shortCutMacView","decoratorsList","name","fontSet","alignmentsMap","center","left","right","justify","backSpaceActions","key","bulletNamesMap","bulletpoint","dash","star","listStyleTypes","numberingSets","decimal","requiredFields","sampleText","BackSpaceActionInput","width","PositioningSection","changeIndentationalLevel","changeBackspaceActionWithContent","changeBackspaceActionWithContentStyle","changeReturnActionNextSection","changeReturnActionEmptySection","changeTabAction","changeShiftTabAction","id","map","action","dec","ListPreview","listPreviewStyle","listChars","sideNumberStyle","listItemsBeginnings","listChar","listItemBeginingStyle","marginRight","style","DecDataParser","mapDecFields","getShortCutUtils","systemName","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","indexOf","isCmdPressed","stringValue","Object","keys","CMD_KEYS","forEach","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","item_type","isEqual","keyboard_shortcut","childItems","child_items","itemKey","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","body","document","container","createElement","innerHTML","Array","cssText","getWidth","appendChild","clientWidth","removeChild","monoWidth","serifWidth","sansWidth","isFontAvailable","isFormValid","form","every","fieldName","getCorrectColor","hex","correctColor","selectAllOnClick","defaultValue","focus","select","getOffset","alignType","parseFloat","slice","scrollToBottom","setTimeout","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","getListChars","isOrderedList","newBullet","fill","getPreviewFont","fillMissedFields","currentFormState","formStateWithoutMissedFields","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","defaultColorCode","required","bottomAligned","colorError","inputError","pickerColor","colorSampleStyle","colorPickerClassName","InputProps","startAdornment","InputAdornment","onChangeComplete","disableAlpha","FontSelect","changeFont","changeCustomFont","availableFonts","filter","fontName","placeholder","ListSection","listPreviewProps","changeIsList","changeListName","changeOrderLevel","changePrefix","changeSuffix","changeSuffixDistance","changeMagicTabs","changeListType","changeListItem","changeUnicodeNumber","changeUnicodeChar","changeNumberingStyle","changeContinueNumbering","changeAllowRestartNumbering","changeIncludePreviousFrom","changeSideNumber","changeSideNumberFont","changeCustomSideNumberFont","changeSideNumberAlignment","changeSideNumberFontSize","changeSideNumberFontColor","changeSideNumberFillingColor","changeSideNumberWidth","changeSideNumberRadius","entries","changeReferenceGroup","changeReferenceGroupToCreate","onXrefChange","xref","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","q","propertyIsEnumerable","normalizeHtml","str","replace","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","current","getEl","emitChange","originalEvt","evt","assign","_a","tagName","ref","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","previewText","changePreviewText","previewStyle","editableContentStyle","outline","selectAllChildren","TypographySection","previewProps","changeAlignment","changeFontSize","changeFontColorName","changeFontColor","changeBold","changeItalic","changeUnderlined","changeStroke","changeTextTransform","changeVerticalAlign","FormControlLabel","control","label","labelPlacement","RadioGroup","row","Radio","DistancesSection","changeMarginTop","changeMarginBottom","changeFirstRowIndent","changeOtherRowsIndent","changeLineSpacing","changeCustomLineSpacing","changeWordSpacing","FrameTypeInput","FramesSection","changeLeftBorder","changeRightBorder","changeTopBorder","changeBottomBorder","changeBorderColorName","changeBorderColor","changeBorderThickness","changeBorderType","previewBorderWidth","isNaN","borderLeft","marginLeft","borderRight","borderTop","borderBottom","Select","MenuItem","FillingSection","changeFillingColorName","changeFillingColor","changeConnectToPrevious","TocSection","changeTocIndentation","ShortCutSection","changeShortCutWin","changeShortCutMac","withDialogControl","Wrapped","closeDialog","clearForm","formState","updateForm","switchOnErrorMode","saveForm","otherProps","onSaveButtonClick","console","log","formToSave","parseToSend","createMuiTheme","primary","blue","secondary","pink","Handlers","update","toggleStateProperty","propName","setStateProperty","secondArg","undefined","setBullet","setColor","filteredInput","match","setNumber","setShortCut","valuePropName","viewPropName","isMac","convertEventToShortCut","CustomTab","overflow","opacity","selected","Tab","CustomErrorTab","textDecoration","CustomTabs","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","changeDecoratorForm","payload","type","clearDecoratorForm","openDialog","dispatch","connect","decoratorDialog","openedTab","switchTab","switchDecDialogTab","switchOffErrorMode","saveDecoratorForm","backspaceActionWithoutContent","backspaceActionWithoutContentStyle","changeBackspaceActionWithoutContent","changeBackspaceActionWithoutContentStyle","previewFontColor","previewFillingColor","previewAdditionalFillingColor","indentsDifference","previewMarginLeft","previewTextIndent","alignItems","textAlign","fontWeight","fontStyle","fontVariant","backgroundImage","textIndent","lineHeight","styledText","unstyledText","getUnstyledText","previewSideNumberFontColor","previewSideNumberFillingColor","namesSectionProps","wordExportSectionProps","positioningSectionProps","listSectionProps","field","newUnicodeNumber","newUnicodeChar","String","fromCharCode","parseInt","unicodeNumberToChar","charCodeAt","toString","unicodeCharToNumber","referencingSectionProps","typographySectionProps","distancesSectionProps","framesSectionProps","fillingSectionProps","tocSectionProps","shortCutsSectionProps","sectionPropsSets","sectionProps","some","getErrorSections","isErrorInNames","isErrorInWordExport","isErrorInList","ThemeProvider","aria-labelledby","scroll","tabNumber","orientation","indicatorColor","ShortCutsSection","TestSection","savedForm","clearSavedForm","parseToEdit","isOpenReducer","initialState","currentDecFormState","getInitialState","decoratorFormReducer","hasValidationErrorReducer","isEditModeReducer","openedTabReducer","decoratorDialogReducer","combineReducers","savedFormReducer","rootReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75c29823.chunk.js","sourcesContent":["import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: \"183px\",\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass NewGroupDialog extends React.Component {\r\n\r\n    state = this.props.currentGroup \r\n          ? this.props.currentGroup \r\n          : this.props.groupType !== \"xref\" \r\n          ? { nameEn: \"\", nameDe: \"\", nameRu: \"\", nameFr: \"\", nameFrCa: \"\", nameEs: \"\", }\r\n          : { nameEn: \"\", nameDe: \"\", nameRu: \"\", nameFr: \"\", nameFrCa: \"\", nameEs: \"\", groupKey: \"\", };\r\n    \r\n    onInputChange = inputName => e => {\r\n        this.setState({ \r\n            [inputName]: e.target.value \r\n        });\r\n    };\r\n\r\n    onClose = () => {\r\n        const {currentGroup, hideDialog } = this.props;\r\n        this.setState({ ...currentGroup });\r\n        hideDialog()\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        const { onSave, changeGroupSelect, hideDialog, groupType } = this.props;\r\n        if (this.state.nameEn.trim().length && (groupType !== \"xref\" || this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                nameEn: this.state.nameEn.trim(),\r\n                nameDe: this.state.nameDe.trim(),\r\n                nameRu: this.state.nameRu.trim(),\r\n                nameFr: this.state.nameFr.trim(),\r\n                nameFrCa: this.state.nameFrCa.trim(),\r\n                nameEs: this.state.nameEs.trim(),\r\n            };\r\n            if (groupType === \"xref\") {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            onSave(groupToSave);\r\n            changeGroupSelect(groupToSave)(null, this.state.nameEn.trim());\r\n            hideDialog();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode } = this.props;\r\n        const { onInputChange, onGroupSave, onClose } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${this.props.groupType === \"xref\" ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n        return (\r\n            <Dialog\r\n                className=\"paragraphDecorators-dialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        {\r\n                            this.props.groupType === \"xref\" \r\n                            &&\r\n                            <>\r\n                                <span>Group Key</span>\r\n                                <TextField \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    value={this.state.groupKey}\r\n                                />\r\n                            </>\r\n                        }\r\n                        <span>Name EN</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameEn\")}\r\n                            value={this.state.nameEn}\r\n                        />\r\n                        <span>Name DE</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameDe\")} \r\n                            value={this.state.nameDe}\r\n                        />                        \r\n                        <span>Name RU</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameRu\")} \r\n                            value={this.state.nameRu}\r\n                        />                        \r\n                        <span>Name FR<br/><span className=\"span_smallText\">France</span></span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameFr\")} \r\n                            value={this.state.nameFr}\r\n                        />\r\n                        <span>Name FR<br/><span className=\"span_smallText\">Canada</span></span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameFrCa\")} \r\n                            value={this.state.nameFrCa}\r\n                        />\r\n                        <span>Name ES</span>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            onChange={onInputChange(\"nameEs\")} \r\n                            value={this.state.nameEs}\r\n                        />                  \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n};\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst LabelWithAsterisk = ({ children }) => {\r\n    return (\r\n        <div className=\"labelWithAsterisk\">\r\n            <div className=\"labelWithAsterisk-labelBox\">\r\n                <span>{children}</span>\r\n            </div>\r\n            <div className=\"labelWithAsterisk-asteriskBox\">\r\n                <span className=\"labelWithAsterisk-asteriskMark\">*</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabelWithAsterisk;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isOpen: false,\r\n            groupSelect: \"\",\r\n            newGroup: this.props.newGroup || \"\",\r\n        }\r\n        \r\n        handleClick = () => {\r\n            this.setState(({ isOpen }) => {\r\n                return {\r\n                    isOpen: !isOpen\r\n                };\r\n            });\r\n        }\r\n    \r\n        onSave = newGroup => {\r\n            this.setState({ newGroup });\r\n        }\r\n    \r\n        changeGroupSelect = (newValue) => {\r\n            this.setState({\r\n                groupSelect: newValue,\r\n            });\r\n        }\r\n\r\n        hideDialog = () => {\r\n            this.setState({ isOpen: false });\r\n        }\r\n        \r\n        render() {\r\n            const { handleClick, onSave, changeGroupSelect, hideDialog } = this; \r\n            return ( <ViewComponent {...this.props} {...this.state} {...{ handleClick, onSave, changeGroupSelect, hideDialog }} /> );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\n\r\nconst NamesSection = (props) => {\r\n    const { \r\n        newGroup, \r\n        isOpen, \r\n        hideDialog, \r\n        handleClick, \r\n        onSave, \r\n        decKey, changeDecKey,\r\n        group, changeGroup,\r\n        active, changeActive,\r\n        decNameEn, changeDecNameEn,\r\n        decNameDe, changeDecNameDe,\r\n        decNameRu, changeDecNameRu,\r\n        decNameFr, changeDecNameFr,\r\n        decNameFrCa, changeDecNameFrCa,\r\n        decNameEs, changeDecNameEs,\r\n        changeGroupToCreate,\r\n        validationError,\r\n    } = props;\r\n    \r\n    const newGroupName = newGroup.nameEn;\r\n    const isEditMode = !!newGroupName;\r\n\r\n    const onGroupChange = group => (...args) => {\r\n        const value = args[0] ? args[0].target.value : args[1];\r\n        if (group.nameEn && value === group.nameEn) {\r\n            changeGroupToCreate(null, group);\r\n        } else {\r\n            changeGroupToCreate(null, \"\");\r\n        }\r\n        changeGroup(...args);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <LabelWithAsterisk>Key</LabelWithAsterisk>\r\n            <TextField \r\n                value={decKey}\r\n                onChange={changeDecKey}\r\n                error={validationError && !decKey}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    value={group} \r\n                    onChange={onGroupChange(newGroup)}\r\n                    input={ <CustomInput /> }  \r\n                >\r\n                    <option value=\"\">...</option>\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"0\">Text</option>\r\n                    <option value=\"1\">Heading</option>\r\n                    <option value=\"2\">Heading Heading Heading Heading</option>\r\n                </NativeSelect>\r\n                { !(isEditMode && group !== newGroupName) && (\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                ) }\r\n            </div>\r\n\r\n            <span>Active</span>\r\n            <div>\r\n                <Checkbox\r\n                    checked={active}\r\n                    onChange={changeActive} \r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n\r\n            <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n            <TextField \r\n                value={decNameEn}\r\n                onChange={changeDecNameEn}\r\n                error={validationError && !decNameEn}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Name DE</span>\r\n            <TextField \r\n                value={decNameDe}\r\n                onChange={changeDecNameDe}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Name RU</span>\r\n            <TextField \r\n                value={decNameRu}\r\n                onChange={changeDecNameRu}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Name FR<br/><span className=\"span_smallText\">France</span></span>\r\n            <TextField \r\n                value={decNameFr}\r\n                onChange={changeDecNameFr}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Name FR<br/><span className=\"span_smallText\">Canada</span></span>\r\n            <TextField \r\n                value={decNameFrCa}\r\n                onChange={changeDecNameFrCa}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n            <span>Name ES</span>\r\n            <TextField \r\n                value={decNameEs}\r\n                onChange={changeDecNameEs}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n\r\n\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={onGroupChange}\r\n                groupType=\"decorators\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(NamesSection);","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\n\r\nconst WordExportSection = ({ wordStyleName, changeWordStyleName, softReturn, changeSoftReturn, validationError, }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <LabelWithAsterisk>Style name in WORD</LabelWithAsterisk>\r\n            <TextField \r\n                value={wordStyleName}\r\n                onChange={changeWordStyleName}\r\n                error={validationError && !wordStyleName}\r\n                variant=\"outlined\" \r\n                margin=\"dense\" \r\n            />\r\n            \r\n            <span>Soft return</span>\r\n            <div>\r\n                <Checkbox \r\n                    checked={softReturn}\r\n                    onChange={changeSoftReturn}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordExportSection;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","export const HOLDER = \"HOLDER-POLDER\";\r\nexport const DEFAULT_FONT = \"Helvetica\";\r\n\r\nexport const autoFillingRequiredFields = {\r\n  sideNumberFontSize: \"12\",\r\n  sideNumberFontColor: \"FFF\",\r\n  sideNumberFillingColor: \"1E88E5\",\r\n  sideNumberWidth: \"20\",\r\n  sideNumberRadius: \"10\",\r\n  fontSize: \"12\",\r\n  fontColor: \"000\",\r\n  marginTop: \"6\",\r\n  marginBottom: \"6\",\r\n  firstRowIndent: \"0\",\r\n  otherRowsIndent: \"0\",\r\n  wordSpacing: \"0\",   \r\n  borderColor: \"f00\",\r\n  borderThickness: \"2\",\r\n};\r\n\r\nexport const emptyDecFormState = {\r\n  decKey: \"\",\r\n  group: \"\",\r\n  groupToCreate: \"\",\r\n  active: false,\r\n  decNameEn: \"\",\r\n  decNameDe: \"\",\r\n  decNameRu: \"\",\r\n  decNameFr: \"\",\r\n  decNameFrCa: \"\",\r\n  decNameEs: \"\",\r\n  wordStyleName: \"\",\r\n  softReturn: false,\r\n  indentationalLevel: \"\",\r\n  backspaceActionWithContent: \"merge\",\r\n  backspaceActionWithContentStyle: \"default\",\r\n  returnActionNextSection: \"default\",\r\n  returnActionEmptySection: \"default\",\r\n  tabAction: \"\",\r\n  shiftTabAction: \"\",\r\n  isList: false,\r\n  listName: HOLDER,\r\n  orderLevel: \"\",\r\n  prefix: \"\",\r\n  suffix: \"\",\r\n  suffixDistance: \"0.25\",\r\n  magicTabs: false,\r\n  listType: \"unordered\",\r\n  listItem: \"bulletpoint\",\r\n  unicodeNumber: \"\",\r\n  unicodeChar: \"\",\r\n  numberingStyle: \"decimal\",\r\n  continueNumbering: false,\r\n  allowRestartNumbering: false,\r\n  includePreviousFrom: \"\",\r\n  sideNumber: false,\r\n  sideNumberFont: DEFAULT_FONT,\r\n  customSideNumberFont: \"\",\r\n  sideNumberAlignment: \"center\",\r\n  referenceGroup: \"\",\r\n  referenceGroupToCreate: \"\",\r\n  font: DEFAULT_FONT,\r\n  customFont: \"\",\r\n  alignment: \"left\",\r\n  fontColorName: \"Black\",\r\n  bold: false,\r\n  italic: false,\r\n  underlined: false,\r\n  stroke: false,\r\n  textTransform: \"none\",\r\n  verticalAlign: \"baseline\",\r\n  lineSpacing: \"1.15\",\r\n  customLineSpacing: \"\",\r\n  leftBorder: false,\r\n  rightBorder: false,\r\n  topBorder: false,\r\n  bottomBorder: false,\r\n  borderColorName: \"Red\",\r\n  borderType: \"solid\",\r\n  fillingColorName: \"\",\r\n  fillingColor: \"\",\r\n  connectToPrevious: false,\r\n  tocIndentation: \"\",\r\n  shortCutWin: \"\",\r\n  shortCutWinView: \"\",\r\n  shortCutMac: \"\",\r\n  shortCutMacView: \"\",\r\n  ...autoFillingRequiredFields,\r\n};","const decoratorsList = [\r\n    { name: \"...\", value: \"\" },\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n    { name: \"Heading 1\", value: \"quick_heading_1\" },\r\n    { name: \"Heading 2\", value: \"quick_heading_2\" },\r\n    { name: \"Heading 3\", value: \"quick_heading_3\" },\r\n    { name: \"Heading 4\", value: \"quick_heading_4\" },\r\n    { name: \"Heading 5\", value: \"quick_heading_5\" },\r\n];\r\n\r\nexport default decoratorsList;","const fontSet = [ \r\n    \"Source Sans Pro\", \r\n    \"Dejavu Sans\", \r\n    \"Dejavu Serif\", \r\n    \"Open Sans\", \r\n    \"Georgia\", \r\n    \"Arial\", \r\n    \"Verdana\", \r\n    \"Times New Roman\",\r\n];\r\n\r\nexport default fontSet;","export const alignmentsMap = {\r\n    center: \"center\",\r\n    left: \"flex-start\",\r\n    right: \"flex-end\",\r\n    justify: \"flex-start\",\r\n};\r\n\r\nexport const backSpaceActions = [\r\n    { key: 'merge', value: 'Merge' },\r\n    { key: 'apply_other_pd', value: 'Apply other PD' },\r\n    { key: 'remove_pd', value: 'Remove PD' },\r\n    { key: 'nothing', value: 'Nothing' }\r\n];\r\n\r\nexport const bulletNamesMap = {\r\n    bulletpoint: \"•\",\r\n    dash: \"—\",\r\n    star: \"★\",\r\n};\r\n\r\nexport const listStyleTypes = [\r\n    { name: '1, 2, 3', value: 'decimal' },\r\n    {  name: 'A, B, C', value: 'upper-alpha' },\r\n    {  name: 'a, b, c', value: 'lower-alpha' },\r\n    {  name: 'I, II, III', value: 'upper-roman' },\r\n    {  name: 'i, ii, iii', value: 'lower-roman' },\r\n];\r\n\r\nexport const numberingSets = {\r\n    decimal: [\"1\", \"2\", \"3\", \"4\"],\r\n    \"upper-alpha\": [\"A\", \"B\", \"C\", \"D\"],\r\n    \"lower-alpha\": [\"a\", \"b\", \"c\", \"d\"],\r\n    \"upper-roman\": [\"I\", \"II\", \"III\", \"IV\"],\r\n    \"lower-roman\": [\"i\", \"ii\", \"iii\", \"iv\"],\r\n};\r\n\r\nexport const requiredFields = [ \"decKey\", \"decNameEn\", \"wordStyleName\", \"listName\", ];\r\n\r\nexport const sampleText = `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`;\r\n","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst BackSpaceActionInput = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"175px\",\r\n      width: \"175px\",\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default BackSpaceActionInput;","import PositioningSection from \"./PositioningSection\";\r\nexport default PositioningSection;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport { backSpaceActions, decoratorsList } from \"../../constants\";\r\nimport BackSpaceActionInput from \"./BackSpaceActionInput\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst PositioningSection = (props) => {\r\n    const {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_positioning\">\r\n            <span id=\"r1c1\">Identational level</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={indentationalLevel}\r\n                    onChange={changeIndentationalLevel}\r\n                    id=\"r1c2\" \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n            <div id=\"r2\" className=\"sectionTitle\">\r\n                <span>BACKSPACE</span>\r\n            </div>\r\n\r\n            <span id=\"r3c1\">At the beginning of a section with content</span>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <NativeSelect \r\n                        value={backspaceActionWithContent}\r\n                        onChange={changeBackspaceActionWithContent}\r\n                        id=\"r3c2\" \r\n                        input={ <BackSpaceActionInput /> }\r\n                    >\r\n                        {backSpaceActions.map(action => (\r\n                            <option value={action.key} key={`backSpace ${action.key}`}>{action.value}</option>\r\n                        ))}\r\n                    </NativeSelect>\r\n                </div>\r\n                {   backspaceActionWithContent === \"apply_other_pd\" && (\r\n                    <NativeSelect\r\n                        value={backspaceActionWithContentStyle}\r\n                        onChange={changeBackspaceActionWithContentStyle}\r\n                        input={ <CustomInput /> }\r\n                    >\r\n                        <option value=\"default\">Global Fallback Style</option>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                    </NativeSelect>\r\n                ) }\r\n            </div>\r\n\r\n            <div id=\"r4\" className=\"sectionTitle\">\r\n                <span>RETURN</span>\r\n            </div>\r\n\r\n            <span id=\"r5c1\">Style of next section</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect\r\n                    value={returnActionNextSection}\r\n                    onChange={changeReturnActionNextSection}\r\n                    id=\"r5c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n\r\n            <span id=\"r6c1\">In empty section change current style to</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect \r\n                    value={returnActionEmptySection}\r\n                    onChange={changeReturnActionEmptySection}\r\n                    id=\"r6c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"default\">Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <div id=\"r7\" className=\"sectionTitle\">\r\n                <span>TAB / SHIFT+TAB</span>\r\n            </div>\r\n\r\n            <span id=\"r8c1\">TAB – change current style to</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect\r\n                    value={tabAction}\r\n                    onChange={changeTabAction}\r\n                    id=\"r8c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span id=\"r9c1\">SHIFT+TAB – change current style to</span>\r\n            <div className=\"positioning-styleInputBox\">\r\n                <NativeSelect\r\n                    value={shiftTabAction}\r\n                    onChange={changeShiftTabAction} \r\n                    id=\"r9c2\" \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PositioningSection;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = (props) => {\r\n    const { \r\n        listPreviewStyle, \r\n        listChars, \r\n        prefix, \r\n        suffix, \r\n        suffixDistance, \r\n        sideNumberStyle,\r\n    } = props;\r\n\r\n    const demonstrationElementClassName = \"demonstrationElement\";\r\n    const listItemsBeginnings = listChars.map(listChar => {\r\n        return (`${prefix}${listChar}${suffix}`);\r\n    });\r\n    const listItemBeginingStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className={demonstrationElementClassName}>\r\n                    <div\r\n                        className={`${demonstrationElementClassName}-text`}\r\n                        style={listPreviewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginingStyle}\r\n                            >{`${listItemsBeginnings[3]}`}</span><span>The fourth list item</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListPreview;","class DecDataParser {\r\n    static parseToSend(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static parseToEdit(dec) {\r\n        return dec;\r\n    }\r\n\r\n    static mapDecFields = {};\r\n}\r\n\r\nexport default DecDataParser;","const { body } = document;\r\nlet width;\r\n\r\nconst container = document.createElement('span');\r\ncontainer.innerHTML = Array(100).join('wi');\r\ncontainer.style.cssText = [\r\n    'position:absolute',\r\n    'width:auto',\r\n    'font-size:128px',\r\n    'left:-99999px'\r\n].join(' !important;');\r\n\r\nconst getWidth = fontFamily => {\r\n    container.style.fontFamily = fontFamily;\r\n\r\n    body.appendChild(container);\r\n    width = container.clientWidth;\r\n    body.removeChild(container);\r\n\r\n    return width;\r\n};\r\n\r\nconst monoWidth  = getWidth('monospace');\r\nconst serifWidth = getWidth('serif');\r\nconst sansWidth  = getWidth('sans-serif');\r\n\r\nconst isFontAvailable = font => {\r\n    return monoWidth !== getWidth(font + ',monospace') ||\r\n    sansWidth !== getWidth(font + ',sans-serif') ||\r\n    serifWidth !== getWidth(font + ',serif');\r\n};\r\n\r\nexport default isFontAvailable;","import keycode from \"keycode\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === \"MacOS\" ? \"Option\" : \"Alt\",\r\n      ctrlKey: systemName === \"MacOS\" ? \"Control\" : \"Ctrl\",\r\n      shiftKey: \"Shift\",\r\n      metaKey: \"Command\",\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = \"\";\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === \"style\") {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","import { requiredFields } from \"../constants\";\r\n\r\nconst isFormValid = form => {\r\n    return requiredFields.every(fieldName => form[fieldName]);\r\n}\r\n\r\nexport default isFormValid;","import { numberingSets, bulletNamesMap, autoFillingRequiredFields, DEFAULT_FONT } from \"../constants\";\r\nimport isFontAvailable from \"./isFontAvailable\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = ({ isOrderedList, numberingStyle, listItem, unicodeChar }) => {\r\n    if (isOrderedList) {\r\n        return numberingSets[numberingStyle];\r\n    }\r\n    const newBullet = bulletNamesMap[listItem] || unicodeChar;\r\n    return Array(4).fill(newBullet);\r\n};\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};\r\n\r\nexport const getErrorSections = (requiredFields = [], ...sectionPropsSets) => {\r\n    return sectionPropsSets.map(sectionProps => {\r\n        return requiredFields.some(fieldName => {\r\n            return sectionProps.hasOwnProperty(fieldName) && !sectionProps[fieldName]\r\n        });\r\n    });\r\n};\r\n\r\nexport const getPreviewFont = (font, customFont) => {\r\n    if (font !== \"custom\" && isFontAvailable(font)) {\r\n        return font;\r\n    } else if (font === \"custom\" && customFont && isFontAvailable(customFont)) {\r\n        return customFont;\r\n    }\r\n    return `'${DEFAULT_FONT}', 'Roboto', sans-serif`;\r\n}\r\n\r\nexport const fillMissedFields = currentFormState => {\r\n    const formStateWithoutMissedFields = { ...currentFormState }; \r\n    \r\n    if (currentFormState.font === \"custom\" && !currentFormState.customFont) {\r\n        formStateWithoutMissedFields.font = DEFAULT_FONT;\r\n    };\r\n    \r\n    if (currentFormState.sideNumberFont === \"custom\" && !currentFormState.customSideNumberFont) {\r\n        formStateWithoutMissedFields.sideNumberFont = DEFAULT_FONT;\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n    for (let fieldName in autoFillingRequiredFields) {\r\n        if (!currentFormState[fieldName] && autoFillingRequiredFields[fieldName]) {\r\n            formStateWithoutMissedFields[fieldName] = autoFillingRequiredFields[fieldName];\r\n        }\r\n    }\r\n    return formStateWithoutMissedFields;\r\n};","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.Component {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, defaultColorCode, required, bottomAligned } = this.props;\r\n        const { showColorPicker, hideColorPicker, colorPickerHandler } = this;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n        const colorPickerClassName = `colorPicker${ bottomAligned ? \" colorPicker_bottomAligned\" : \"\"}`;\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        selectAllOnClick(defaultColorCode || \"000\")(e); \r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className={colorPickerClassName}>\r\n                        <div className=\"colorPicker-chromeBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport CustomInput from \"./CustomInput\";\r\nimport { fontSet, DEFAULT_FONT } from \"../constants\";\r\nimport { isFontAvailable } from \"../helpers\";\r\n\r\nconst FontSelect = ({ font, changeFont, customFont, changeCustomFont }) => {\r\n    const availableFonts = fontSet.filter(fontName => fontName === font || isFontAvailable(fontName));\r\n    return (\r\n        <>\r\n            <span >Font</span>\r\n            <NativeSelect \r\n                input={ <CustomInput /> }\r\n                value={font}\r\n                onChange={(e) => {\r\n                    changeFont(e);\r\n                }}\r\n            >\r\n                <option value={DEFAULT_FONT}>Helvetica</option>\r\n                { availableFonts.map(fontName => <option value={fontName} key={fontName}>{fontName}</option>) }\r\n                <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n            </NativeSelect>\r\n\r\n            { font === \"custom\" && (\r\n                <>\r\n                    <span>Custom font</span>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        value={customFont}\r\n                        onChange={changeCustomFont}\r\n                        placeholder=\"Enter the font name\"\r\n                    />\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FontSelect;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport ListPreview from \"../common/Preview/ListPreview\";\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport ColorField from \"../common/ColorField\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport FontSelect from \"../common/FontSelect\";\r\nimport { listStyleTypes, bulletNamesMap } from \"../constants\"\r\nimport { selectAllOnClick, scrollToBottom } from \"../helpers\";\r\n\r\nconst ListSection = (props) => {\r\n    const {\r\n        listPreviewProps,\r\n        isList, changeIsList, \r\n        listName, changeListName,\r\n        orderLevel, changeOrderLevel,\r\n        prefix, changePrefix,\r\n        suffix, changeSuffix,\r\n        suffixDistance, changeSuffixDistance,\r\n        magicTabs, changeMagicTabs,\r\n        listType, changeListType, \r\n        listItem, changeListItem,\r\n        unicodeNumber, changeUnicodeNumber,\r\n        unicodeChar, changeUnicodeChar,\r\n        numberingStyle, changeNumberingStyle,\r\n        continueNumbering, changeContinueNumbering,\r\n        allowRestartNumbering, changeAllowRestartNumbering,\r\n        includePreviousFrom, changeIncludePreviousFrom,\r\n        sideNumber, changeSideNumber,\r\n        sideNumberFont, changeSideNumberFont,\r\n        customSideNumberFont, changeCustomSideNumberFont,\r\n        sideNumberAlignment, changeSideNumberAlignment,\r\n        sideNumberFontSize, changeSideNumberFontSize,\r\n        sideNumberFontColor, changeSideNumberFontColor,\r\n        sideNumberFillingColor, changeSideNumberFillingColor,\r\n        sideNumberWidth, changeSideNumberWidth,\r\n        sideNumberRadius, changeSideNumberRadius,\r\n        validationError,\r\n    } = props;\r\n\r\n    const onListTypeChange = (...args) => {\r\n        changeListType(...args);\r\n        scrollToBottom(\"content-rightSide\");\r\n    };\r\n\r\n    const onSideNumberChange = (...args) => {\r\n        changeSideNumber(...args);\r\n        scrollToBottom(\"content-rightSide\");\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                    <div className=\"listSection-firstSpan\">\r\n                        <span>Is it a list?</span>\r\n                    </div>\r\n                    <div>\r\n                        <Checkbox \r\n                            color=\"primary\" \r\n                            checked={isList} \r\n                            onChange={changeIsList} \r\n                        />\r\n                    </div>\r\n                    { isList && (\r\n                        <>\r\n                            <LabelWithAsterisk>List name</LabelWithAsterisk>\r\n                            <TextField\r\n                                value={listName}\r\n                                onChange={changeListName} \r\n                                error={validationError && !listName}\r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                            />\r\n\r\n                            <span>Order level</span>\r\n                            <div>\r\n                                <NativeSelect\r\n                                    value={orderLevel}\r\n                                    onChange={changeOrderLevel}\r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    <option value=\"\">...</option>\r\n                                    <option value=\"0\">0</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n\r\n                            <span>Prefix</span>\r\n                            <TextField\r\n                                value={prefix}\r\n                                onChange={changePrefix} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                            />\r\n\r\n                            <span>Suffix</span>\r\n                            <TextField\r\n                                value={suffix}\r\n                                onChange={changeSuffix} \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                onClick={selectAllOnClick(\".\")}\r\n                            />\r\n\r\n                            <span>Suffix distance</span>\r\n                            <div className=\"inputWithAdornment\">\r\n                                <NativeSelect\r\n                                    value={suffixDistance}\r\n                                    onChange={changeSuffixDistance} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    <option value=\"0.25\">0.25</option>\r\n                                    <option value=\"0.5\">0.5</option>\r\n                                    <option value=\"0.75\">0.75</option>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"1.25\">1.25</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.75\">1.75</option>\r\n                                    <option value=\"2\">2</option>\r\n                                </NativeSelect>\r\n                                <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                            </div>\r\n\r\n                            <span>Magic Tabs</span>\r\n                            <div>\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={magicTabs} \r\n                                    onChange={changeMagicTabs} \r\n                                />\r\n                            </div>\r\n\r\n                            <span>Type of list</span>\r\n                            <div>\r\n                                <NativeSelect \r\n                                    value={listType} \r\n                                    onChange={onListTypeChange} \r\n                                    input={ <CustomInput /> }\r\n                                >\r\n                                    <option value={\"unordered\"}>Unordered</option>\r\n                                    <option value={\"ordered\"}>Ordered</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </>\r\n                    ) }\r\n                </div>\r\n                    { isList && listType === \"ordered\" && (\r\n                        <div className=\"listSection-typeSettings\">\r\n                            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {listStyleTypes.map(style => (\r\n                                          <option value={style.value} key={style.value}>{style.name}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div>\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div>\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changeIncludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Side number</span>\r\n                                <div>\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={onSideNumberChange}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                            </div> \r\n\r\n                            { sideNumber && (\r\n                                <div className=\"dialogGrid dialogGrid_2minCols listSection-typeSettings\">\r\n                                    <FontSelect \r\n                                        font={sideNumberFont}\r\n                                        changeFont={changeSideNumberFont}\r\n                                        customFont={customSideNumberFont}\r\n                                        changeCustomFont={changeCustomSideNumberFont}\r\n                                    />\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(\"12\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFontColor} \r\n                                        changeColorCode={changeSideNumberFontColor}\r\n                                        defaultColorCode={\"FFF\"}\r\n                                        bottomAligned\r\n                                    />\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFillingColor} \r\n                                        changeColorCode={changeSideNumberFillingColor}\r\n                                        defaultColorCode={\"1E88E5\"}\r\n                                        bottomAligned\r\n                                    />\r\n\r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(\"20\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>    \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(\"10\")}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>    \r\n                                </div> \r\n                            ) }\r\n                        </div>\r\n                    ) }\r\n                </div>\r\n                { isList && <div className=\"listPreviewBox\"><ListPreview {...listPreviewProps} /></div> }\r\n            </div>\r\n            { isList && listType === \"unordered\" && (\r\n                <div className=\"listSection-typeSettings\">\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listSection-firstSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={changeListItem} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Object.entries(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"custom\"} className=\"highlightedOption\">Custom</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        {   listItem === \"custom\" && (\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Unicode number</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeNumber}\r\n                                            onChange={changeUnicodeNumber}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"unicodeInput\" \r\n                                            InputProps={{\r\n                                                startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <span>Char</span>\r\n                                    <div>\r\n                                        <TextField \r\n                                            value={unicodeChar}\r\n                                            onChange={changeUnicodeChar}\r\n                                            onClick={selectAllOnClick()}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"bulletInput\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                        ) }\r\n                    </div> \r\n                </div> \r\n            ) }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListSection;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\n\r\nconst ReferencingSection = (props) => {\r\n    const { \r\n        newGroup, \r\n        isOpen, \r\n        hideDialog, \r\n        handleClick, \r\n        onSave,\r\n        referenceGroup, changeReferenceGroup,\r\n        changeReferenceGroupToCreate,\r\n    } = props;\r\n    \r\n    const newGroupName = newGroup.nameEn;\r\n    const isEditMode = !!newGroupName;\r\n\r\n    const onXrefChange = xref => (...args) => {\r\n        const value = args[0] ? args[0].target.value : args[1];\r\n        if (xref.groupKey && xref.nameEn && value === xref.nameEn) {\r\n            changeReferenceGroupToCreate(null, xref);\r\n        } else {\r\n            changeReferenceGroupToCreate(null, \"\");\r\n        }\r\n        changeReferenceGroup(...args);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Reference group</span>\r\n            <div>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> } \r\n                    value={referenceGroup} \r\n                    onChange={onXrefChange(newGroup)} \r\n                >\r\n                    { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                    <option value=\"\">none</option>\r\n                    <option value=\"0\">Reference group 1</option>\r\n                    <option value=\"1\">Reference group 2</option>\r\n                </NativeSelect>\r\n                {\r\n                    !(isEditMode && referenceGroup !== newGroupName) &&\r\n                    <Button color=\"primary\" className=\"textButton\" onClick={handleClick}>\r\n                        { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                    </Button>\r\n                 }\r\n            </div>\r\n            <NewGroupDialog \r\n                isOpen={isOpen}\r\n                hideDialog={hideDialog}\r\n                onSave={onSave}\r\n                isEditMode={isEditMode}\r\n                currentGroup={newGroup}\r\n                changeGroupSelect={onXrefChange}\r\n                groupType=\"xref\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withNewGroupControl(ReferencingSection);","import * as React from \"react\";\r\nimport deepEqual from \"fast-deep-equal\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \");\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === \"function\" ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== \"function\" ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || \"div\", Object.assign({}, props, { ref: typeof innerRef === \"function\" ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport ContentEditable from \"../ContentEditable\";\r\nimport { getOffset, selectAllEditableContent } from \"../../helpers\"\r\n\r\nconst Preview = ({previewText, changePreviewText, previewStyle}) => {\r\n    const { verticalAlign, fontSize } = previewStyle;\r\n\r\n    const editableContentStyle = {\r\n        ...previewStyle, \r\n        outline: \"none\",\r\n        marginTop: `${parseFloat(previewStyle.marginTop) + getOffset(verticalAlign, fontSize)}pt`,\r\n        marginBottom: `${parseFloat(previewStyle.marginBottom) - getOffset(verticalAlign, fontSize)}pt`,\r\n    };\r\n\r\n    const demonstrationElementClassName = \"demonstrationElement\";\r\n\r\n    return (\r\n        <div className=\"preview\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div \r\n                className=\"preview-content preview-content_withPointer\" \r\n                onClick={selectAllEditableContent(demonstrationElementClassName)}\r\n            >\r\n                <div className={demonstrationElementClassName}>\r\n                    <ContentEditable\r\n                        className={`${demonstrationElementClassName}-text`}\r\n                        onChange={changePreviewText} \r\n                        html={previewText}\r\n                        style={editableContentStyle}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preview;","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport Preview from \"../../common/Preview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport FontSelect from \"../../common/FontSelect\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = (props) => {\r\n    const { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColorName, changeFontColorName,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign, \r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <FontSelect { ...{ font, changeFont, customFont, changeCustomFont }} />\r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(\"12\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                    value={fontColorName}\r\n                    onChange={changeFontColorName}\r\n                    onClick={selectAllOnClick(\"Black\")}\r\n                />\r\n\r\n                <span>Font color HEX</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    required\r\n                />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_indented\">\r\n            <span>Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox labeledCheckbox_topIndented\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Sub/Superscript</span>\r\n            <div>\r\n                <NativeSelect \r\n                value={verticalAlign} \r\n                onChange={changeVerticalAlign}\r\n                    input={ <CustomInput /> } \r\n                >\r\n                    <option value=\"baseline\">None</option>\r\n                    <option value=\"sub\">Subscript</option>\r\n                    <option value=\"super\">Superscript</option>\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TypographySection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport Preview from \"../common/Preview\";\r\nimport { selectAllOnClick } from \"../helpers\";\r\n\r\nconst DistancesSection = (props) => {\r\n    const {\r\n        previewProps,\r\n        marginTop, changeMarginTop,\r\n        marginBottom, changeMarginBottom,\r\n        firstRowIndent, changeFirstRowIndent,\r\n        otherRowsIndent, changeOtherRowsIndent,\r\n        lineSpacing, changeLineSpacing,\r\n        customLineSpacing, changeCustomLineSpacing,\r\n        wordSpacing, changeWordSpacing,\r\n    } = props;\r\n    \r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Margin top</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginTop}\r\n                        onChange={changeMarginTop}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>Margin bottom</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={marginBottom}\r\n                        onChange={changeMarginBottom}\r\n                        onClick={selectAllOnClick(\"6\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n\r\n                <span>1st row indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={firstRowIndent}\r\n                        onChange={changeFirstRowIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Other rows indent</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={otherRowsIndent}\r\n                        onChange={changeOtherRowsIndent}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                </div>\r\n\r\n                <span>Line spacing</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInputShort /> } \r\n                        value={lineSpacing} \r\n                        onChange={changeLineSpacing} \r\n                    >\r\n                        <option value=\"1.0\">1.0</option>\r\n                        <option className=\"highlightedOption\" value=\"1.15\">1.15</option>\r\n                        <option value=\"1.5\">1.5</option>\r\n                        <option value=\"2.0\">2.0</option>\r\n                        <option value=\"2.5\">2.5</option>\r\n                        <option value=\"3.0\">3.0</option>\r\n                        <option value=\"custom\">Custom</option>\r\n                    </NativeSelect> \r\n                    {\r\n                    lineSpacing === \"custom\" && \r\n                    (\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                        />                                            \r\n                    )\r\n                }\r\n                </div>\r\n                   \r\n                    \r\n                <span>Word spacing</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={wordSpacing}\r\n                        onChange={changeWordSpacing}\r\n                        onClick={selectAllOnClick(\"0\")}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div> \r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DistancesSection;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default FrameTypeInput;","import FramesSection from \"./FramesSection\";\r\nexport default FramesSection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport FrameTypeInput from \"../../sections/FramesSection/FrameTypeInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst FramesSection = (props) => {\r\n    const { \r\n        leftBorder, changeLeftBorder, \r\n        rightBorder, changeRightBorder,\r\n        topBorder, changeTopBorder, \r\n        bottomBorder, changeBottomBorder, \r\n        borderColorName, changeBorderColorName,\r\n        borderColor, changeBorderColor,\r\n        borderThickness, changeBorderThickness,\r\n        borderType, changeBorderType,\r\n     } = props;\r\n\r\n     const correctColor = getCorrectColor(borderColor);\r\n     const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n     const previewStyle = {\r\n         borderLeft: leftBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginLeft: leftBorder ? \"0\" : previewBorderWidth, \r\n         borderRight: rightBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginRight: rightBorder ? \"0\" : previewBorderWidth, \r\n         borderTop: topBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginTop: topBorder ? \"0\" : previewBorderWidth, \r\n         borderBottom: bottomBorder ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n         marginBottom: bottomBorder ? \"0\" : previewBorderWidth, \r\n     };\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"directionControlsContainer\">\r\n                <div className=\"directionsControls\" style={previewStyle}>\r\n                    <span className=\"directionLabel\">Left</span>\r\n                    <div className=\"centralColumn\">\r\n                        <span className=\"directionLabel\">Top</span>\r\n                        <div className=\"checkboxesKit crossGrid\">\r\n                            <div id=\"r1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={topBorder}  \r\n                                    onChange={changeTopBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c1\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={leftBorder}  \r\n                                    onChange={changeLeftBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r2c2\" className=\"gridCell\">\r\n                            </div>\r\n                            <div id=\"r2c3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\" \r\n                                    checked={rightBorder}  \r\n                                    onChange={changeRightBorder}\r\n                                />\r\n                            </div>\r\n                            <div id=\"r3\" className=\"gridCell\">\r\n                                <Checkbox \r\n                                    color=\"primary\"\r\n                                    checked={bottomBorder}  \r\n                                    onChange={changeBottomBorder}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"directionLabel\">Bottom</span>\r\n                    </div>\r\n                    <span className=\"directionLabel\">Right</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Frame color name</span>\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    value={borderColorName}\r\n                    onChange={changeBorderColorName}\r\n                    onClick={selectAllOnClick(\"Red\")}\r\n                />\r\n\r\n                <span>Frame color HEX</span>\r\n                <ColorField \r\n                    colorCode={borderColor} \r\n                    changeColorCode={changeBorderColor}\r\n                    required\r\n                />\r\n\r\n                <span>Frame thickness</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={borderThickness}\r\n                        onChange={changeBorderThickness}\r\n                        onClick={selectAllOnClick(\"2\")}\r\n                     />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>                        \r\n\r\n                <span>Type of frame</span>\r\n                <div >\r\n                    <Select\r\n                      input={<FrameTypeInput />}\r\n                      value={borderType}\r\n                      onChange={changeBorderType}\r\n                    >\r\n                        <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                        <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                        <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                        <MenuItem value=\"double\">══════</MenuItem>              \r\n                    </Select>\r\n                </div>\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox color=\"primary\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FramesSection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport Preview from \"../common/Preview\";\r\nimport ColorField from \"../common/ColorField\";\r\n\r\nconst  FillingSection = (props) => {\r\n    const { \r\n        previewProps,\r\n        fillingColorName, changeFillingColorName,\r\n        fillingColor, changeFillingColor,\r\n        connectToPrevious, changeConnectToPrevious,\r\n     } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color name</span>\r\n                <div>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        className=\"mediumTextField\" \r\n                        value={fillingColorName}\r\n                        onChange={changeFillingColorName}\r\n                    />\r\n                </div>\r\n\r\n                <span>Filling color HEX</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n\r\n                <span>Connect to previous</span>\r\n                <div>\r\n                    <Checkbox \r\n                        color=\"primary\" \r\n                        checked={connectToPrevious} \r\n                        onChange={changeConnectToPrevious} \r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FillingSection;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TocSection;","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst ShortCutSection = (props) => {\r\n    const {\r\n        shortCutWinView, changeShortCutWin, \r\n        shortCutMacView, changeShortCutMac,\r\n    } = props;\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField \r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin} \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField \r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac} \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />     \r\n            </div>          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShortCutSection;","import React from \"react\";\r\n\r\nconst TypographySection = () => {\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n        \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TypographySection;","import React from \"react\";\r\n\r\nimport { fillMissedFields, DecDataParser, isFormValid } from \"../helpers\";\r\n\r\nconst withDialogControl = Wrapped => {\r\n    return class extends React.Component {\r\n\r\n        render() {\r\n            const { \r\n                closeDialog, \r\n                clearForm, \r\n                formState, \r\n                updateForm, \r\n                switchOnErrorMode, \r\n                saveForm,\r\n                ...otherProps \r\n            } = this.props;\r\n\r\n            const onClose = () => {\r\n                closeDialog();\r\n                clearForm();\r\n            };\r\n\r\n            const onSaveButtonClick = () => {\r\n                if (!isFormValid(formState)) {\r\n                    console.log(0);\r\n                    switchOnErrorMode();\r\n                } else {\r\n                    console.log(1);\r\n                    const formToSave = DecDataParser.parseToSend(fillMissedFields(formState));\r\n                    saveForm(formToSave);\r\n                    onClose();\r\n                }\r\n            };\r\n            \r\n            return (\r\n                <Wrapped \r\n                    { ...{ \r\n                    onClose, \r\n                    onSaveButtonClick, \r\n                    clearForm, \r\n                    updateForm, \r\n                    formState, \r\n                    switchOnErrorMode, \r\n                    ...otherProps \r\n                    } } \r\n                />\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withDialogControl;","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import { getShortCutUtils } from \"./helpers\";\r\n\r\nconst Handlers = (update, formState) => class {    \r\n    static toggleStateProperty = propName => e => {\r\n        update({\r\n            [propName]: e.target.checked\r\n        });\r\n    };\r\n\r\n    static setStateProperty = propName => (e, secondArg = \"\") => {\r\n        const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n        update({\r\n            [propName]: newValue,\r\n        });\r\n    };\r\n\r\n    static setBullet = propName => e => {\r\n        const newBullet = e.target.value.length > 1 ? e.target.value[e.target.value.length - 1] : e.target.value;\r\n        update({\r\n            [propName]: newBullet,\r\n        });\r\n        return newBullet;\r\n    };\r\n\r\n    static setColor = propName => (e, secondArg) => {\r\n        let input = e ? (e.target.value || \"\") : secondArg;\r\n        \r\n        const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                              ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                              : \"\" ;\r\n        \r\n        if (filteredInput !== formState[propName]) {\r\n            update({\r\n                [propName]: filteredInput,\r\n            });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    static setNumber = propName => e => {\r\n        let input = e.target.value || \"\";\r\n\r\n        const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                              ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                              : \"\" ;\r\n\r\n        if (filteredInput !== formState[propName]) {\r\n          update({\r\n              [propName]: filteredInput,\r\n          });\r\n        }\r\n        return filteredInput;\r\n    };\r\n\r\n    static setShortCut = (valuePropName, viewPropName, isMac) => e => {\r\n        const systemName = isMac ? \"MacOS\" : \"Windows\";\r\n        const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n        if (shortCut && shortCut.deleteKey) {\r\n          setTimeout(() => {\r\n            update({ [valuePropName]: \"\" });\r\n            update({ [viewPropName]: \"\" });\r\n          }, 100);\r\n        } else if (shortCut) {\r\n          update({ [valuePropName]: shortCut.value });\r\n          update({ [viewPropName]: shortCut.stringValue });\r\n        }\r\n    };\r\n};\r\n\r\nexport default Handlers;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomErrorTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n      textDecoration: \"red underline\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n        textDecoration: \"indianred underline\",\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomErrorTab;","import Tabs from \"@material-ui/core/Tabs\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTabs = withStyles(theme => ({\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n      }\r\n  }))(Tabs);\r\n\r\n  export default CustomTabs;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        \"&:after\": {\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: \"1280px\",\r\n        maxHeight: \"850px\",\r\n        minHeight: \"550px\",\r\n        width: \"calc(100% - 96px)\",\r\n        height: \"calc(100% - 96px)\",\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        border: \"none\",\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: \"middle\",\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","export const CHANGE_DEC_FORM = \"CHANGE_DEC_FORM\";\r\nexport const CLEAR_DEC_FORM = \"CLEAR_DEC_FORM\";\r\nexport const SHOW_DEC_DIALOG = \"SHOW_DEC_DIALOG\";\r\nexport const HIDE_DEC_DIALOG = \"HIDE_DEC_DIALOG\";\r\nexport const SWITCH_DEC_DIALOG_TAB = \"SWITCH_DEC_DIALOG_TAB\";\r\nexport const RESET_DEC_DIALOG_TAB = \"RESET_DEC_DIALOG_TAB\";\r\nexport const SWITCH_ON_DEC_DIALOG_EDIT_MODE = \"SWITCH_ON_DEC_DIALOG_EDIT_MOD\";\r\nexport const SWITCH_OFF_DEC_DIALOG_EDIT_MODE = \"SWITCH_OFF_DEC_DIALOG_EDIT_MODE\";\r\nexport const SWITCH_ON_DEC_DIALOG_VALIDATION_ERROR_MODE = \"SWITCH_ON_DEC_DIALOG_VALIDATION_ERROR_MODE\";\r\nexport const SWITCH_OFF_DEC_DIALOG_VALIDATION_ERROR_MODE = \"SWITCH_OFF_DEC_DIALOG_VALIDATION_ERROR_MODE\";\r\n\r\nexport const changeDecoratorForm = payload => {\r\n    return {\r\n        type: CHANGE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearDecoratorForm = payload => {\r\n    return {\r\n        type: CLEAR_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const showDecoratorDialog = () => {\r\n    return {\r\n        type: SHOW_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const hideDecoratorDialog = () => {\r\n    return {\r\n        type: HIDE_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const switchDecDialogTab = payload => {\r\n    return {\r\n        type: SWITCH_DEC_DIALOG_TAB,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const resetDecDialogTab = () => {\r\n    return {\r\n        type: RESET_DEC_DIALOG_TAB,\r\n    };\r\n}\r\n\r\nexport const switchOnDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOnDecDialogValidationErrorMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_VALIDATION_ERROR_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogValidationErrorMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_VALIDATION_ERROR_MODE,\r\n    };\r\n};\r\n\r\nexport const openDialog = dispatch => dec => {\r\n    if (dec) {\r\n        dispatch(changeDecoratorForm(dec));\r\n        dispatch(switchOnDecDialogEditMode());\r\n    } \r\n    dispatch(showDecoratorDialog());\r\n};\r\n\r\nexport const closeDialog = dispatch => () => {\r\n    dispatch(hideDecoratorDialog());\r\n    dispatch(switchOffDecDialogEditMode());\r\n    dispatch(switchOffDecDialogValidationErrorMode());\r\n    dispatch(resetDecDialogTab());\r\n    dispatch(clearDecoratorForm());\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport NamesSection from \"./sections/NamesSection\";\r\nimport WordExportSection from \"./sections/WordExportSection\";\r\nimport PositioningSection from \"./sections/PositioningSection\";\r\nimport ListSection from \"./sections/ListSection\";\r\nimport ReferencingSection from \"./sections/ReferencingSection\";\r\nimport TypographySection from \"./sections/TypographySection\";\r\nimport DistancesSection from \"./sections/DistancesSection\";\r\nimport FramesSection from \"./sections/FramesSection\";\r\nimport FillingSection from \"./sections/FillingSection\";\r\nimport TocSection from \"./sections/TocSection\";\r\nimport ShortCutsSection from \"./sections/ShortCutsSection\";\r\nimport TestSection from \"./sections/TestSection\";\r\n\r\nimport withDialogControl from \"./hoc/withDialogControl\";\r\nimport theme from \"./theme\";\r\nimport Handlers from \"./Handlers\";\r\nimport CustomTab from \"./common/CustomTab\";\r\nimport CustomErrorTab from \"./common/CustomErrorTab\";\r\nimport CustomTabs from \"./common/CustomTabs\";\r\nimport CustomDialog from \"./common/CustomDialog\";\r\nimport { alignmentsMap, HOLDER, requiredFields } from \"./constants\";\r\nimport { \r\n    getCorrectColor, \r\n    getUnstyledText, \r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n    getListChars, \r\n    getErrorSections,\r\n    getPreviewFont,\r\n} from \"./helpers\";\r\nimport {\r\n    changeDecoratorForm, \r\n    clearDecoratorForm, \r\n    switchDecDialogTab, \r\n    switchOnDecDialogValidationErrorMode, \r\n    switchOffDecDialogValidationErrorMode,\r\n} from \"./actions\";\r\n\r\nimport { saveDecoratorForm } from \"../../actions\"\r\n\r\nimport \"./style.css\";\r\n\r\nconst NewDecDialog = props => {\r\n    const { \r\n        isOpen, \r\n        onClose, \r\n        onSaveButtonClick, \r\n        updateForm, \r\n        formState, \r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n        switchTab,\r\n        switchOffErrorMode,\r\n    } = props;\r\n\r\n    const { \r\n        setStateProperty, \r\n        toggleStateProperty, \r\n        setNumber, \r\n        setColor, \r\n        setBullet, \r\n        setShortCut \r\n    } = Handlers(updateForm, formState);\r\n\r\n    const { \r\n        previewText,\r\n        decKey,\r\n        group,\r\n        groupToCreate,\r\n        active,\r\n        decNameEn,\r\n        decNameDe,\r\n        decNameRu,\r\n        decNameFr,\r\n        decNameFrCa,\r\n        decNameEs,\r\n        wordStyleName,\r\n        softReturn,\r\n        indentationalLevel,\r\n        backspaceActionWithContent,\r\n        backspaceActionWithContentStyle,\r\n        backspaceActionWithoutContent,\r\n        backspaceActionWithoutContentStyle,\r\n        returnActionNextSection,\r\n        returnActionEmptySection,\r\n        tabAction,\r\n        shiftTabAction,\r\n        isList,\r\n        listName,\r\n        orderLevel,\r\n        prefix,\r\n        suffix,\r\n        suffixDistance,\r\n        magicTabs,\r\n        listType,\r\n        listItem,\r\n        unicodeNumber,\r\n        unicodeChar,\r\n        numberingStyle,\r\n        continueNumbering,\r\n        allowRestartNumbering,\r\n        includePreviousFrom,\r\n        sideNumber,\r\n        sideNumberFont,\r\n        customSideNumberFont,\r\n        sideNumberAlignment,\r\n        sideNumberFontSize,\r\n        sideNumberFontColor,\r\n        sideNumberFillingColor,\r\n        sideNumberWidth,\r\n        sideNumberRadius,\r\n        referenceGroup,\r\n        referenceGroupToCreate,\r\n        font,\r\n        customFont,\r\n        alignment,\r\n        fontSize,\r\n        fontColorName,\r\n        fontColor,\r\n        bold,\r\n        italic,\r\n        underlined,\r\n        stroke,\r\n        textTransform,\r\n        verticalAlign,\r\n        marginTop,\r\n        marginBottom,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        customLineSpacing,\r\n        wordSpacing,   \r\n        leftBorder,\r\n        rightBorder,\r\n        topBorder,\r\n        bottomBorder,\r\n        borderColorName,\r\n        borderColor,\r\n        borderThickness,\r\n        borderType,\r\n        fillingColorName,\r\n        fillingColor,\r\n        connectToPrevious,\r\n        tocIndentation,\r\n        shortCutWinView,\r\n        shortCutMacView,\r\n    } = formState;\r\n    \r\n    const changeDecKey = setStateProperty(\"decKey\");\r\n    const changeGroup = setStateProperty(\"group\");\r\n    const changeGroupToCreate = setStateProperty(\"groupToCreate\");\r\n    const changeActive = toggleStateProperty(\"active\");\r\n    const changeDecNameEn = setStateProperty(\"decNameEn\");\r\n    const changeDecNameDe = setStateProperty(\"decNameDe\");\r\n    const changeDecNameRu = setStateProperty(\"decNameRu\");\r\n    const changeDecNameFr = setStateProperty(\"decNameFr\");\r\n    const changeDecNameFrCa = setStateProperty(\"decNameFrCa\");\r\n    const changeDecNameEs = setStateProperty(\"decNameEs\");\r\n    const changeWordStyleName = setStateProperty(\"wordStyleName\");\r\n    const changeSoftReturn = toggleStateProperty(\"softReturn\");\r\n    const changeIndentationalLevel = setStateProperty(\"indentationalLevel\")\r\n    const changeBackspaceActionWithContent = setStateProperty(\"backspaceActionWithContent\");\r\n    const changeBackspaceActionWithContentStyle = setStateProperty(\"backspaceActionWithContentStyle\");\r\n    const changeBackspaceActionWithoutContent = setStateProperty(\"backspaceActionWithoutContent\");\r\n    const changeBackspaceActionWithoutContentStyle = setStateProperty(\"backspaceActionWithoutContentStyle\");\r\n    const changeReturnActionNextSection = setStateProperty(\"returnActionNextSection\");\r\n    const changeReturnActionEmptySection = setStateProperty(\"returnActionEmptySectionStyle\")\r\n    const changeTabAction = setStateProperty(\"tabAction\");\r\n    const changeShiftTabAction = setStateProperty(\"shiftTabAction\");\r\n    const changeListName = setStateProperty(\"listName\");\r\n    const changeOrderLevel = setStateProperty(\"orderLevel\");\r\n    const changePrefix = setStateProperty(\"prefix\");\r\n    const changeSuffix = setStateProperty(\"suffix\");\r\n    const changeSuffixDistance = setStateProperty(\"suffixDistance\");\r\n    const changeMagicTabs = toggleStateProperty(\"magicTabs\");\r\n    const changeListItem = setStateProperty(\"listItem\");\r\n    const changeNumberingStyle = setStateProperty(\"numberingStyle\");\r\n    const changeContinueNumbering = toggleStateProperty(\"continueNumbering\");\r\n    const changeAllowRestartNumbering = toggleStateProperty(\"allowRestartNumbering\");\r\n    const changeIncludePreviousFrom = setStateProperty(\"includePreviousFrom\");\r\n    const changeSideNumberFont = setStateProperty(\"sideNumberFont\");\r\n    const changeCustomSideNumberFont = setStateProperty(\"customSideNumberFont\");\r\n    const changeSideNumberAlignment = setStateProperty(\"sideNumberAlignment\");\r\n    const changeSideNumberFontSize = setNumber(\"sideNumberFontSize\");\r\n    const changeSideNumberFontColor = setColor(\"sideNumberFontColor\");\r\n    const changeSideNumberFillingColor = setColor(\"sideNumberFillingColor\");\r\n    const changeSideNumberWidth = setNumber(\"sideNumberWidth\");\r\n    const changeSideNumberRadius = setNumber(\"sideNumberRadius\");\r\n    const changeReferenceGroup = setStateProperty(\"referenceGroup\");\r\n    const changeReferenceGroupToCreate = setStateProperty(\"referenceGroupToCreate\");\r\n    const changeFont = setStateProperty(\"font\");\r\n    const changeCustomFont = setStateProperty(\"customFont\");\r\n    const changeAlignment = setStateProperty(\"alignment\");\r\n    const changeFontSize = setNumber(\"fontSize\");\r\n    const changeFontColorName = setStateProperty(\"fontColorName\");\r\n    const changeFontColor = setColor(\"fontColor\");\r\n    const changeBold = toggleStateProperty(\"bold\");\r\n    const changeItalic = toggleStateProperty(\"italic\");\r\n    const changeUnderlined = toggleStateProperty(\"underlined\");\r\n    const changeStroke = toggleStateProperty(\"stroke\");\r\n    const changeTextTransform = setStateProperty(\"textTransform\");\r\n    const changeVerticalAlign = setStateProperty(\"verticalAlign\");\r\n    const changeMarginTop = setNumber(\"marginTop\");\r\n    const changeMarginBottom = setNumber(\"marginBottom\");\r\n    const changeFirstRowIndent = setNumber(\"firstRowIndent\");\r\n    const changeOtherRowsIndent = setNumber(\"otherRowsIndent\");\r\n    const changeLineSpacing = setStateProperty(\"lineSpacing\");\r\n    const changeCustomLineSpacing = setNumber(\"customLineSpacing\");\r\n    const changeWordSpacing = setNumber(\"wordSpacing\");\r\n    const changeLeftBorder = toggleStateProperty(\"leftBorder\");\r\n    const changeRightBorder = toggleStateProperty(\"rightBorder\");\r\n    const changeTopBorder = toggleStateProperty(\"topBorder\");\r\n    const changeBottomBorder = toggleStateProperty(\"bottomBorder\");\r\n    const changeBorderColorName = setStateProperty(\"borderColorName\");\r\n    const changeBorderColor = setColor(\"borderColor\");\r\n    const changeBorderThickness = setNumber(\"borderThickness\");\r\n    const changeFillingColorName = setStateProperty(\"fillingColorName\");\r\n    const changeFillingColor = setColor(\"fillingColor\");\r\n    const changeConnectToPrevious = toggleStateProperty(\"connectToPrevious\");\r\n    const changeTocIndentation = setStateProperty(\"tocIndentation\");\r\n    const changeShortCutWin = setShortCut(\"shortCutWin\", \"shortCutWinView\");\r\n    const changeShortCutMac = setShortCut(\"shortCutMac\", \"shortCutMacView\", true);\r\n\r\n    const changePreviewText = e => {\r\n        const { value } = e.target;\r\n        if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n            setStateProperty(\"previewText\")(null, getUnstyledText(value));\r\n        } else {\r\n            setStateProperty(\"previewText\")(null, `<div><br></div>`);\r\n        }\r\n    };\r\n\r\n    const changeIsList = e => {\r\n        if (e.target.checked) {\r\n            if (validationError && requiredFields.every(field => formState[field])) {\r\n                switchOffErrorMode();\r\n            }\r\n            if (listName === HOLDER) {\r\n                changeListName(null, \"\");\r\n            }\r\n        } else if (listName === \"\"){\r\n            changeListName(null, HOLDER);\r\n        }\r\n        toggleStateProperty(\"isList\")(e);\r\n    };\r\n\r\n    const changeListType = e => {\r\n        const { value } = e.target;\r\n        setStateProperty(\"listType\")(null, value);\r\n        if (value === \"ordered\" && suffix === \"\") {\r\n            setStateProperty(\"suffix\")(null, \".\");\r\n        } else if (value === \"unordered\" && suffix === \".\") {\r\n            setStateProperty(\"suffix\")(null, \"\");\r\n        }\r\n    };\r\n\r\n    const changeUnicodeNumber = e => {\r\n        const newUnicodeNumber = setColor(\"unicodeNumber\")(e);\r\n        const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n        setStateProperty(\"unicodeChar\")(null, newUnicodeChar);\r\n    };\r\n    \r\n    const changeUnicodeChar = e => {\r\n        const newUnicodeChar = setBullet(\"unicodeChar\")(e);\r\n        const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n        setStateProperty(\"unicodeNumber\")(null, newUnicodeNumber);\r\n    };\r\n\r\n    const changeSideNumber = e => {\r\n        toggleStateProperty(\"sideNumber\")(e);\r\n        if (e.target.checked && suffix === \".\") {\r\n            setStateProperty(\"suffix\")(null, \"\");\r\n        } else if (!e.target.checked && suffix === \"\") {\r\n            setStateProperty(\"suffix\")(null, \".\");\r\n        }\r\n    };\r\n\r\n    const changeBorderType = e => {\r\n        setStateProperty(\"borderType\")(e);\r\n        if (e.target.value === \"double\" && borderThickness === \"2\") {\r\n            setStateProperty(\"borderThickness\")(null, \"3\");\r\n        }\r\n        if (e.target.value !== \"double\" && borderThickness === \"3\") {\r\n            setStateProperty(\"borderThickness\")(null, \"2\");\r\n        }\r\n    };\r\n\r\n    const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n    const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n    const previewAdditionalFillingColor = connectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n    const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n    const previewMarginLeft = otherRowsIndent ? `${otherRowsIndent >= 12 ? 12 : otherRowsIndent}cm` : 0;\r\n    const previewTextIndent = indentsDifference ? `${indentsDifference >= 12 ? 12 : indentsDifference}cm` : 0;\r\n\r\n    const previewStyle = {\r\n        fontSize: !fontSize ? \"0\" : `${fontSize <= 120 ? fontSize : 120}pt`,\r\n        color: `#${previewFontColor}`,\r\n        fontFamily: getPreviewFont(font, customFont),\r\n        alignItems: alignmentsMap[alignment],\r\n        textAlign: alignment,\r\n        fontWeight: bold ? \"bold\" : \"normal\",\r\n        fontStyle: italic ? \"italic\" : \"normal\",\r\n        textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n        verticalAlign,\r\n        textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n        fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n        backgroundColor: `#${previewFillingColor}`,\r\n        backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        marginLeft: previewMarginLeft,\r\n        textIndent: previewTextIndent,\r\n        wordSpacing: `${wordSpacing || 0}pt`,\r\n        lineHeight: (lineSpacing !== \"custom\" ? lineSpacing : (!customLineSpacing ? \"1.15\" : `${customLineSpacing || 0}`)),\r\n        marginBottom: `${marginBottom || 0}pt`,\r\n        marginTop: `${marginTop || 0}pt`,\r\n    };\r\n\r\n    const previewProps = { previewText, changePreviewText, previewStyle };\r\n\r\n    const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"f5f5f5\");\r\n    const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n    const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n        fontFamily: getPreviewFont(sideNumberFont, customSideNumberFont),\r\n        textAlign: sideNumberAlignment,\r\n        fontSize: !sideNumberFontSize ? \"0\" : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n        color: `#${previewSideNumberFontColor}`,\r\n        backgroundColor: `#${previewSideNumberFillingColor}`,\r\n        minWidth: `${sideNumberWidth || 0}pt`,\r\n        borderRadius: `${sideNumberRadius || 0}pt`,\r\n    };\r\n\r\n    const listPreviewProps = { \r\n        listChars: getListChars({\r\n                isOrderedList: listType === \"ordered\", \r\n                numberingStyle, \r\n                listItem,\r\n                unicodeChar,\r\n            }),\r\n        listPreviewStyle: previewStyle,\r\n        prefix, \r\n        suffix, \r\n        suffixDistance,\r\n        sideNumberStyle,\r\n    };\r\n\r\n    const namesSectionProps = {\r\n        decKey, changeDecKey,\r\n        group, changeGroup,\r\n        newGroup: groupToCreate, changeGroupToCreate,\r\n        active, changeActive,\r\n        decNameEn, changeDecNameEn,\r\n        decNameDe, changeDecNameDe,\r\n        decNameRu, changeDecNameRu,\r\n        decNameFr, changeDecNameFr,\r\n        decNameFrCa, changeDecNameFrCa,\r\n        decNameEs, changeDecNameEs,\r\n        validationError,\r\n    }; \r\n\r\n    const wordExportSectionProps = {\r\n        wordStyleName, changeWordStyleName,\r\n        softReturn, changeSoftReturn,\r\n        validationError,\r\n    };\r\n\r\n    const positioningSectionProps = {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        backspaceActionWithoutContent, changeBackspaceActionWithoutContent,\r\n        backspaceActionWithoutContentStyle, changeBackspaceActionWithoutContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    };\r\n\r\n    const listSectionProps = { \r\n        listPreviewProps,\r\n        isList, changeIsList, \r\n        listName, changeListName,\r\n        orderLevel, changeOrderLevel,\r\n        prefix, changePrefix,\r\n        suffix, changeSuffix,\r\n        suffixDistance, changeSuffixDistance,\r\n        magicTabs, changeMagicTabs,\r\n        listType, changeListType, \r\n        listItem, changeListItem,\r\n        unicodeNumber, changeUnicodeNumber,\r\n        unicodeChar, changeUnicodeChar,\r\n        numberingStyle, changeNumberingStyle,\r\n        continueNumbering, changeContinueNumbering,\r\n        allowRestartNumbering, changeAllowRestartNumbering,\r\n        includePreviousFrom, changeIncludePreviousFrom,\r\n        sideNumber, changeSideNumber,\r\n        sideNumberFont, changeSideNumberFont,\r\n        customSideNumberFont, changeCustomSideNumberFont,\r\n        sideNumberAlignment, changeSideNumberAlignment,\r\n        sideNumberFontSize, changeSideNumberFontSize,\r\n        sideNumberFontColor, changeSideNumberFontColor,\r\n        sideNumberFillingColor, changeSideNumberFillingColor,\r\n        sideNumberWidth, changeSideNumberWidth,\r\n        sideNumberRadius, changeSideNumberRadius,\r\n        validationError,\r\n    };\r\n\r\n    const referencingSectionProps = {\r\n        referenceGroup, changeReferenceGroup,\r\n        newGroup: referenceGroupToCreate, changeReferenceGroupToCreate,\r\n    };\r\n\r\n    const typographySectionProps = { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColorName, changeFontColorName,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign, \r\n    };\r\n\r\n    const distancesSectionProps = {\r\n        previewProps,\r\n        marginTop, changeMarginTop,\r\n        marginBottom, changeMarginBottom,\r\n        firstRowIndent, changeFirstRowIndent,\r\n        otherRowsIndent, changeOtherRowsIndent,\r\n        lineSpacing, changeLineSpacing,\r\n        customLineSpacing, changeCustomLineSpacing,\r\n        wordSpacing, changeWordSpacing,\r\n    };\r\n\r\n    const framesSectionProps = { \r\n        leftBorder, changeLeftBorder, \r\n        rightBorder, changeRightBorder,\r\n        topBorder, changeTopBorder, \r\n        bottomBorder, changeBottomBorder, \r\n        borderColorName, changeBorderColorName,\r\n        borderColor, changeBorderColor,\r\n        borderThickness, changeBorderThickness,\r\n        borderType, changeBorderType,\r\n    };\r\n\r\n    const fillingSectionProps = { \r\n        previewProps,\r\n        fillingColorName, changeFillingColorName,\r\n        fillingColor, changeFillingColor,\r\n        connectToPrevious, changeConnectToPrevious,\r\n    };\r\n\r\n    const tocSectionProps = {\r\n        tocIndentation, changeTocIndentation,\r\n    };\r\n\r\n    const shortCutsSectionProps = {\r\n        shortCutWinView, changeShortCutWin, \r\n        shortCutMacView, changeShortCutMac,\r\n    };\r\n\r\n    const [\r\n       isErrorInNames,\r\n       isErrorInWordExport,\r\n       isErrorInList,\r\n    ] = validationError ? getErrorSections(requiredFields, namesSectionProps, wordExportSectionProps, listSectionProps) \r\n        : [false, false, false];\r\n        \r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CustomDialog\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                scroll=\"body\"\r\n                className=\"paragraphDecorators-dialog\"\r\n                fullWidth={true}\r\n                maxWidth={false}\r\n                id=\"dialog\"\r\n            >\r\n                <div className=\"header\">\r\n                    <DialogTitle className=\"header-title\">\r\n                        <p>Create new paragraph decorator</p>\r\n                    </DialogTitle>\r\n                    <div className=\"header-buttons\">\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            onClick={onClose}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button \r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={onSaveButtonClick}\r\n                            className=\"topNavButton\"\r\n                        >\r\n                            {isEditMode ? \"Save\" : \"Create\"}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n\r\n                <DialogContent className=\"content\">\r\n                    <div className=\"content-leftSide\">\r\n                        <CustomTabs \r\n                            className=\"dialogTabs\"\r\n                            value={openedTab} \r\n                            onChange={(e, tabNumber) => { switchTab(tabNumber) }} \r\n                            orientation=\"vertical\"\r\n                            color=\"primary\"\r\n                            indicatorColor=\"primary\"\r\n                        >\r\n                            { isErrorInNames ? ( <CustomErrorTab className=\"dialogTab\" label=\"Names\" /> )\r\n                                :  ( <CustomTab className=\"dialogTab\" label=\"Names\" /> ) }\r\n\r\n                            { isErrorInWordExport ? ( <CustomErrorTab className=\"dialogTab\" label=\"WORD export\" /> ) \r\n                                : ( <CustomTab className=\"dialogTab\" label=\"WORD export\" /> ) }\r\n\r\n                            <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n\r\n                            { isErrorInList ? ( <CustomErrorTab className=\"dialogTab\" label=\"List\" /> ) \r\n                                :( <CustomTab className=\"dialogTab\" label=\"List\" /> ) }\r\n\r\n                            <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                            <CustomTab className=\"dialogTab\" label=\"Test\" />\r\n                        </CustomTabs>\r\n                    </div>\r\n                    <div className=\"content-rightSide\">\r\n                        { openedTab === 0 && <NamesSection {...namesSectionProps} /> }\r\n                        { openedTab === 1 && <WordExportSection {...wordExportSectionProps} /> }\r\n                        { openedTab === 2 && <PositioningSection {...positioningSectionProps} /> }\r\n                        { openedTab === 3 && <ListSection {...listSectionProps} />}\r\n                        { openedTab === 4 && <ReferencingSection {...referencingSectionProps} /> }\r\n                        { openedTab === 5 && <TypographySection {...typographySectionProps} /> }\r\n                        { openedTab === 6 && <DistancesSection {...distancesSectionProps} /> }\r\n                        { openedTab === 7 && <FramesSection {...framesSectionProps} /> }\r\n                        { openedTab === 8 && <FillingSection {...fillingSectionProps} /> }\r\n                        { openedTab === 9 && <TocSection {...tocSectionProps} /> }\r\n                        { openedTab === 10 && <ShortCutsSection {...shortCutsSectionProps} /> }\r\n                        { openedTab === 11 && <TestSection {...typographySectionProps} /> }\r\n                    </div>\r\n                </DialogContent>\r\n            </CustomDialog>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, openedTab, validationError, isEditMode }}) => {\r\n    return { \r\n        formState: form,\r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateForm: payload => dispatch(changeDecoratorForm(payload)),\r\n        clearForm: () => dispatch(clearDecoratorForm()),\r\n        switchTab: payload => dispatch(switchDecDialogTab(payload)),\r\n        switchOnErrorMode: () => dispatch(switchOnDecDialogValidationErrorMode()),\r\n        switchOffErrorMode: () => dispatch(switchOffDecDialogValidationErrorMode()),\r\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(withDialogControl(NewDecDialog));","export const SAVE_DEC_FORM = \"SAVE_DEC_FORM\";\r\nexport const CLEAR_SAVED_DEC_FORM = \"CLEAR_SAVED_DEC_FORM\";\r\n\r\nexport const saveDecoratorForm = payload => {\r\n    return {\r\n        type: SAVE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearSavedDecoratorForm = () => {\r\n    return {\r\n        type: CLEAR_SAVED_DEC_FORM,\r\n    };\r\n};","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport NewDecDialog from \"./components/NewDecDialog\";\nimport { openDialog, closeDialog } from \"./components/NewDecDialog/actions\";\nimport { clearSavedDecoratorForm } from \"./actions\";\nimport { DecDataParser } from \"./components/NewDecDialog/helpers\";\nimport theme from \"./components/NewDecDialog/theme\";\n\nimport \"./App.css\";\n\nconst App = props => {\n    const { isOpen, openDialog, closeDialog, savedForm, clearSavedForm } = props;\n\n    const openEditDialog = () => {\n        openDialog(DecDataParser.parseToEdit(savedForm || {}));\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"startButtons\">\n                    { !savedForm ? (\n                        <Button \n                            onClick={() => openDialog()}\n                            color=\"primary\"\n                        >Create new</Button>\n                    ) : (\n                        <>\n                            <Button \n                                onClick={() => openEditDialog()}\n                            >Edit saved</Button>\n                            <Button \n                                onClick={clearSavedForm}\n                                color=\"secondary\"\n                            >Delete saved</Button>\n                        </>\n                    )}\n                </div>\n                <NewDecDialog { ...{isOpen, closeDialog}} />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = ({ savedForm, decoratorDialog: { isOpen }}) => {\n    return { isOpen, savedForm };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openDialog: openDialog(dispatch),\n        closeDialog: closeDialog(dispatch),\n        clearSavedForm: () => dispatch(clearSavedDecoratorForm()),\n    };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SHOW_DEC_DIALOG, HIDE_DEC_DIALOG } from \"../../components/NewDecDialog/actions\";\r\n\r\nconst isOpenReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SHOW_DEC_DIALOG:\r\n            return true;\r\n        case HIDE_DEC_DIALOG:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isOpenReducer;","import { CHANGE_DEC_FORM, CLEAR_DEC_FORM } from \"../../components/NewDecDialog/actions\";\r\nimport getInitialState from \"../../components/NewDecDialog/getInitialState\";\r\n\r\nconst initialState = getInitialState();\r\n\r\nconst decoratorFormReducer = (state = initialState, action) =>  {\r\n    switch (action.type) {\r\n        case CHANGE_DEC_FORM:\r\n            return { ...state, ...action.payload };\r\n        case CLEAR_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default decoratorFormReducer;","import { sampleText, emptyDecFormState } from \"./constants\";\r\n\r\nconst getInitialState = (currentDecFormState = {}) => {\r\n    return { \r\n        previewText: sampleText,\r\n        ...emptyDecFormState,\r\n        ...currentDecFormState,\r\n    };\r\n};\r\n\r\nexport default getInitialState;","import { \r\n    SWITCH_ON_DEC_DIALOG_VALIDATION_ERROR_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_VALIDATION_ERROR_MODE, \r\n} from \"../../components/NewDecDialog/actions\";\r\n\r\nconst hasValidationErrorReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_VALIDATION_ERROR_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_VALIDATION_ERROR_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default hasValidationErrorReducer;","import { \r\n    SWITCH_ON_DEC_DIALOG_EDIT_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_EDIT_MODE, \r\n} from \"../../components/NewDecDialog/actions\";\r\n\r\nconst isEditModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_EDIT_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_EDIT_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isEditModeReducer;","import { \r\n    SWITCH_DEC_DIALOG_TAB,\r\n    RESET_DEC_DIALOG_TAB, \r\n} from \"../../components/NewDecDialog/actions\";\r\n\r\nconst initialState = 5;\r\n\r\nconst openedTabReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_DEC_DIALOG_TAB:\r\n            return action.payload;\r\n        case RESET_DEC_DIALOG_TAB:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default openedTabReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport isOpenReducer from \"./isOpenReducer\";\r\nimport decoratorFormReducer from \"./decoratorFormReducer\";\r\nimport hasValidationErrorReducer from \"./hasValidationErrorReducer\";\r\nimport isEditModeReducer from \"./isEditModeReducer\";\r\nimport openedTabReducer from \"./openedTabReducer\";\r\n\r\nconst decoratorDialogReducer = combineReducers({\r\n    isOpen: isOpenReducer,\r\n    openedTab: openedTabReducer,\r\n    validationError: hasValidationErrorReducer,\r\n    isEditMode: isEditModeReducer,\r\n    form: decoratorFormReducer,\r\n});\r\n\r\nexport default decoratorDialogReducer;","import { SAVE_DEC_FORM, CLEAR_SAVED_DEC_FORM } from \"../actions\";\r\n\r\nconst initialState = null;\r\n\r\nexport const savedFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_DEC_FORM:\r\n            return action.payload;\r\n        case CLEAR_SAVED_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedFormReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport decoratorDialogReducer from \"./decoratorDialogReducer\";\r\nimport savedFormReducer from \"./savedFormReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    decoratorDialog: decoratorDialogReducer,\r\n    savedForm: savedFormReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}