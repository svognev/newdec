{"version":3,"sources":["components/DecoratorDialog/common/CustomInput.js","components/DecoratorDialog/common/LabelWithAsterisk.js","components/DecoratorDialog/constants/decoratorsList.js","components/DecoratorDialog/constants/fontsSet.js","components/DecoratorDialog/constants/localeConstants.js","components/DecoratorDialog/constants/validationData.js","components/DecoratorDialog/constants/constants.js","components/DecoratorDialog/constants/initialFormState.js","components/DecoratorDialog/helpers/DecDataConverter/converterUtils.js","components/DecoratorDialog/helpers/DecDataConverter/decToSendDefaultProps.js","components/DecoratorDialog/helpers/DecDataConverter/DecDataConverter.js","components/DecoratorDialog/helpers/isFontAvailable.js","components/DecoratorDialog/helpers/DecDataConverter/index.js","components/DecoratorDialog/helpers/getShortCutUtils.js","components/DecoratorDialog/helpers/validationFunctions.js","components/DecoratorDialog/helpers/helpers.js","components/DecoratorDialog/common/NewGroupDialog.js","components/DecoratorDialog/hoc/withNewGroupControl.js","components/DecoratorDialog/actions/index.js","components/DecoratorDialog/sections/NamesSection.js","components/DecoratorDialog/common/CustomInputShort.js","components/DecoratorDialog/common/SectionTitle/index.js","components/DecoratorDialog/common/SectionTitle/SectionTitle.js","components/DecoratorDialog/sections/PositioningSection/BackSpaceActionInput.js","components/DecoratorDialog/sections/PositioningSection/index.js","components/DecoratorDialog/sections/PositioningSection/PositioningSection.js","components/DecoratorDialog/common/Preview/generators.js","components/DecoratorDialog/common/Preview/ListPreview.js","components/DecoratorDialog/common/ColorField/index.js","components/DecoratorDialog/common/ColorField/ColorField.js","components/DecoratorDialog/common/FontSelectFields.js","components/DecoratorDialog/sections/ListSection/ListSection.js","components/DecoratorDialog/sections/ListSection/index.js","components/DecoratorDialog/sections/ReferencingSection.js","components/DecoratorDialog/common/ContentEditable.js","components/DecoratorDialog/common/Preview/Preview.js","components/DecoratorDialog/common/Preview/index.js","components/DecoratorDialog/sections/TypographySection/index.js","components/DecoratorDialog/sections/TypographySection/TypographySection.js","components/DecoratorDialog/common/ConnectToPreviousField.js","components/DecoratorDialog/sections/DistancesSection.js","components/DecoratorDialog/sections/FramesSection/FrameTypeInput.js","components/DecoratorDialog/sections/FramesSection/generateBorderPreviewStyle.js","components/DecoratorDialog/sections/FramesSection/FramesSection.js","components/DecoratorDialog/sections/FramesSection/index.js","components/DecoratorDialog/sections/FillingSection.js","components/DecoratorDialog/sections/TocSection.js","components/DecoratorDialog/sections/ShortCutsSection.js","components/DecoratorDialog/theme.js","components/DecoratorDialog/common/CustomTab.js","components/DecoratorDialog/common/CustomErrorTab.js","components/DecoratorDialog/common/CustomTabs.js","components/DecoratorDialog/common/CustomDialog.js","actions.js","components/DecoratorDialog/DecoratorDialog.js","components/DecoratorDialog/index.js","App.js","reducers/decoratorDialogReducer/isOpenReducer.js","reducers/decoratorDialogReducer/decoratorFormReducer.js","reducers/decoratorDialogReducer/validationErrorReducer.js","reducers/decoratorDialogReducer/isEditModeReducer.js","reducers/decoratorDialogReducer/openedTabReducer.js","reducers/decoratorDialogReducer/index.js","reducers/savedFormReducer.js","reducers/rootReducer.js","store.js","serviceWorker.js","index.js"],"names":["CustomInput","withStyles","theme","root","marginTop","spacing","input","borderRadius","minWidth","position","backgroundColor","palette","background","paper","border","fontSize","padding","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","LabelWithAsterisk","children","className","decoratorsList","name","value","fontSet","LANGS","langKey","langName","langFullName","regionName","regionFullName","ADDITIONAL_LANGS","slice","MAIN_LANG_KEY","tabsErrorInitialState","namesSection","listSection","sectionsTabNumbers","tabName","tabNumber","alignmentList","center","left","right","justify","numberingSets","decimal","orderedListStylesMap","Map","bulletNamesMap","sectionTypesMap","backSpaceActionsMap","autoFillingRequiredFields","sideNumberFont","sideNumberFontSize","font","fontColor","marginBottom","firstRowIndent","otherRowsIndent","wordSpacing","lineSpacing","borderThickness","initialFormState","decKey","sectionTypes","Array","from","reduce","acc","i","key","group","groupToCreate","active","indentationalLevel","fixedIndentation","softReturn","backspaceActionWithContent","backspaceActionWithContentStyle","returnActionNextSection","returnActionEmptySection","tabAction","shiftTabAction","isList","listName","orderLevel","suffixDistance","magicTabs","listType","listItem","unicodeNumber","unicodeChar","listItemString","numberingStyle","continueNumbering","allowRestartNumbering","includePreviousFrom","patternMode","listPattern","prefix","suffix","sideNumber","customSideNumberFont","sideNumberAlignment","sideNumberFontColor","sideNumberFillingColor","sideNumberWidth","sideNumberLineHeight","sideNumberRadius","sideNumberBold","sideNumberItalic","sideNumberUnderlined","referenceGroup","referenceGroupToCreate","customFont","alignment","bold","italic","underlined","stroke","textTransform","readOnly","connectToPrevious","verticalAlign","customLineSpacing","borderLeft","borderRight","borderTop","borderBottom","borderType","fillingColor","tocIndentation","shortCutWin","shortCutWinView","shortCutMac","shortCutMacView","replaceDecNameIfDefault","decName","getNumber","val","getNumberString","decToSendDefaultProps","item_type","style_properties","keyboard_shortcut","xref_target_type_group_key","is_possible_xref_target","show_in_editor_toc","editor_toc_indentation","editor_toc_filter_level","list_key","item_order","extra_hanging_indentation","extra_hanging_indentation_at_grid","numerated_list_format","numerated_list_start","numerated_list_pattern","numerated_list_style","is_auto_restart_numbering","allow_restart_numbering","bullet_list_format","movable","content_required","on_return_style_key","on_return_indentation","item_order_allow_tab","DecDataConverter","rawDec","dec","order","res","section_types","Object","entries","filter","map","hidden","initial_indentation","is_fixed_indentation","content_in_second_line","backspace_action","backspace_action_value","create_new_section_on_return_if_empty","pd_for_new_section_on_return_if_empty","change_pd_on_return_if_empty","pd_for_current_section_on_return_if_empty","on_tab_key","on_shift_tab_key","read_only","editor_style","initialState","propName","styles","color","textDecoration","trim","indentsDifference","borderStyle","getStyleString","sideNumberUnderline","getSideNumberStyleString","console","log","cur","includes","suffixDistanceMatch","match","test","prefixAndSuffixMatch","has","bullet","unicodeNumberToChar","hasOwnProperty","getShortCutUtils","convertShortcutToString","mapDecFields","width","systemName","e","keyCode","preventDefault","stopPropagation","ShortcutUtils","isDeadKey","prevent","deleteKey","shortCut","ctrlKey","shiftKey","altKey","metaKey","shortCutForView","convertShortcutToMeta","indexOf","isCmdPressed","stringValue","keys","CMD_KEYS","forEach","keycode","removeDuplicateShortcuts","decorators","newPdShortcut","removed","decoratorKey","item","isEqual","childItems","child_items","itemKey","style","removeDuplicateShortcutsInInlineStyle","inlineStyles","styleKey","body","document","container","createElement","innerHTML","cssText","getWidth","appendChild","clientWidth","removeChild","monoWidth","serifWidth","sansWidth","isFontAvailable","getTabsErrorState","form","tabsErrorState","getTabNumberToSwitch","getCorrectColor","hex","correctColor","length","selectAllOnClick","defaultValue","target","focus","select","getUnstyledText","styledText","unstyledText","replace","String","fromCharCode","parseInt","unicodeCharToNumber","charCodeAt","toString","scrollToBottom","setTimeout","getElementsByClassName","scrollTo","top","Number","MAX_SAFE_INTEGER","behavior","changeAndScroll","changeFunction","timeOut","focusInput","inputRef","timeout","current","focusOnEmptyField","refs","getPreviewFont","fillMissedFields","currentFormState","formStateWithoutMissedFields","fieldName","option","customOption","NewGroupDialog","isXref","props","groupType","emptyGroup","groupKey","getInitialState","savedGroup","state","requiredFieldRef","React","createRef","onInputChange","inputName","setState","onClose","hideGroupDialogValidationError","closeGroupDialog","onGroupSave","groupToSave","saveGroup","showGroupDialogValidationError","this","isOpen","isEditMode","hasGroupDialogValidationError","titleText","buttonText","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","onChange","error","variant","margin","Fragment","DialogActions","Button","onClick","PureComponent","withNewGroupControl","ViewComponent","isGroupDialogOpen","openGroupDialog","Component","updateDecoratorForm","payload","type","clearDecoratorForm","updateValidationError","openDialog","dispatch","closeDialog","setValue","secondArg","newValue","undefined","toggleValue","checked","setBullet","newBullet","setColor","filteredInput","setNumber","setShortCut","valuePropName","viewPropName","search","convertEventToShortCut","NamesSection","decKeyInputRef","decNameEnInputRef","inputRefs","onGroupChange","groupName","changeGroupToCreate","changeGroup","onNameChange","changeName","onSectionTypesChange","typeName","changeSectionTypes","validationErrorInSection","prevprops","every","ref","changeDecKey","changeActive","newGroupName","FormControlLabel","control","Checkbox","label","labelPlacement","NativeSelect","connect","decoratorDialog","validationError","formState","CustomInputShort","SectionTitle","text","BackSpaceActionInput","PositioningSection","changeIndentationalLevel","changeBackspaceActionWithContent","changeBackspaceActionWithContentStyle","changeBackspaceActionWithoutContent","changeBackspaceActionWithoutContentStyle","changeReturnActionNextSection","changeReturnActionEmptySection","changeTabAction","changeShiftTabAction","changeisFixedIndentation","changeSoftReturn","backSpaceActionStyleSettingsState","generatePreviewStyle","fillingConnectToPrevious","previewFontColor","previewFillingColor","previewAdditionalFillingColor","previewMarginLeft","previewTextIndent","previewLineSpacing","offset","alignType","parseFloat","getOffset","previewMarginTop","previewMarginBottom","previewBorderLeft","previewBorderRight","previewBorderTop","previewBorderBottom","correctFontSize","alignItems","textAlign","fontWeight","fontStyle","fontVariant","backgroundImage","borderImage","marginLeft","textIndent","lineHeight","outline","paddingLeft","paddingRight","paddingTop","paddingBottom","previewText","isOrderedList","listChars","fill","getListChars","get","listItemBeginnings","li","previewStyle","isSideNumber","sideNumberStyle","previewSideNumberFontColor","previewSideNumberFillingColor","marginRight","generateSideNumberStyle","listItemBeginningStyle","ColorField","hideColorPicker","showColorPicker","colorPickerHandler","changeColor","colorCode","changeColorCode","defaultColorCode","required","bottomAligned","colorError","inputError","pickerColor","colorSampleStyle","colorPickerClassName","InputProps","startAdornment","InputAdornment","onChangeComplete","disableAlpha","FontSelectFields","customFontInputRef","onFontChange","changeFont","changeCustomFont","availableFonts","fontName","optionalFieldState","placeholder","ListSection","listNameInputRef","unicodeCharInputRef","onIsListChange","changeIsList","onListTypeChange","changeOrderLevel","changeListType","changeSuffix","onListItemChange","changeListItem","onUnicodeNumberChange","newUnicodeNumber","changeUnicodeNumber","newUnicodeChar","changeUnicodeChar","onUnicodeCharChange","onSideNumberChange","changeSideNumber","listPreviewProps","changeListName","changePatternMode","changeListPattern","changePrefix","changeSuffixDistance","changeMagicTabs","changeListItemString","changeNumberingStyle","changeContinueNumbering","changeAllowRestartNumbering","changeIncludePreviousFrom","changeSideNumberFont","changeCustomSideNumberFont","changeSideNumberAlignment","changeSideNumberFontSize","changeSideNumberFontColor","changeSideNumberFillingColor","changeSideNumberWidth","changeSideNumberRadius","changeSideNumberBold","changeSideNumberItalic","changeSideNumberUnderlined","changeSideNumberLineHeight","mainListSettingsState","unorderedListSettingsState","customListItemSettingsState","customListItemSettingsState2","orderedListSettingsState","sideNumberSettingsState","RadioGroup","row","Radio","Switch","ReferencingSection","onXrefChange","xrefName","xref","changeReferenceGroupToCreate","changeReferenceGroup","__rest","s","t","p","prototype","call","getOwnPropertySymbols","q","propertyIsEnumerable","normalizeHtml","str","replaceCaret","el","findLastTextNode","node","nodeType","Node","TEXT_NODE","childNodes","textNode","isTargetFocused","activeElement","nodeValue","sel","window","getSelection","range","createRange","setStart","collapse","removeAllRanges","addRange","HTMLElement","ContentEditable","arguments","lastHtml","html","innerRef","getEl","emitChange","originalEvt","evt","assign","_a","tagName","onInput","onBlur","onKeyUp","onKeyDown","contentEditable","disabled","dangerouslySetInnerHTML","__html","nextProps","deepEqual","Preview","onPreviewTextChange","changePreviewText","selectAllChildren","TypographySection","changeAlignment","changeFontSize","changeFontColor","changeBold","changeItalic","changeUnderlined","changeStroke","changeTextTransform","changeVerticalAlign","changeMarginTop","changeReadOnly","previewProps","changeConnectToPrevious","DistancesSection","customLineSpacingInputRef","onLineSpacingChange","changeLineSpacing","changeMarginBottom","changeFirstRowIndent","changeOtherRowsIndent","changeCustomLineSpacing","changeWordSpacing","customLineSpacingFieldState","marginFieldsState","FrameTypeInput","generateBorderPreviewStyle","previewBorderWidth","isNaN","FramesSection","onBorderTypeChange","changeBorderType","changeBorderThickness","changeBorderLeft","changeBorderRight","changeBorderTop","changeBorderBottom","changeBorderColor","id","Select","MenuItem","changeFillingColor","changeTocIndentation","changeShortCutWin","changeShortCutMac","createMuiTheme","primary","blue","secondary","pink","CustomTab","overflow","opacity","selected","Tab","CustomErrorTab","indicator","zIndex","display","Tabs","CustomDialog","minHeight","height","scrollBody","paperFullWidth","maxHeight","flexDirection","paperScrollBody","saveDecoratorForm","DecoratorDialog","clearForm","onSaveButtonClick","switchTab","sendForm","convertToSend","onTabSwitch","openedTab","ThemeProvider","aria-labelledby","scroll","CustomTabs","orientation","indicatorColor","ShortCutsSection","switchDecDialogTab","saveForm","savedForm","clearSavedForm","convertToEdit","isOpenReducer","action","decoratorFormReducer","validationErrorReducer","isEditModeReducer","openedTabReducer","decoratorDialogReducer","combineReducers","savedFormReducer","rootReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4a5ad27.chunk.js","sourcesContent":["import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInput = withStyles(theme => ({\r\n    root: {\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      minWidth: \"183px\",\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInput;","import React from \"react\";\r\n\r\nconst LabelWithAsterisk = ({ children }) => {\r\n    return (\r\n        <div className=\"labelWithAsterisk\">\r\n            <div className=\"labelWithAsterisk-labelBox\">\r\n                <span>{children}</span>\r\n            </div>\r\n            <div className=\"labelWithAsterisk-asteriskBox\">\r\n                <span className=\"labelWithAsterisk-asteriskMark\">*</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabelWithAsterisk;","const decoratorsList = [\r\n    { name: \"Text 1\", value: \"quick_text_1\" },\r\n    { name: \"Text 2\", value: \"quick_text_2\" },\r\n    { name: \"Text 3\", value: \"quick_text_3\" },\r\n    { name: \"Text 4\", value: \"quick_text_4\" },\r\n    { name: \"Text 5\", value: \"quick_text_5\" },\r\n    { name: \"Heading 1\", value: \"quick_heading_1\" },\r\n    { name: \"Heading 2\", value: \"quick_heading_2\" },\r\n    { name: \"Heading 3\", value: \"quick_heading_3\" },\r\n    { name: \"Heading 4\", value: \"quick_heading_4\" },\r\n    { name: \"Heading 5\", value: \"quick_heading_5\" },\r\n];\r\n\r\nexport default decoratorsList;","const fontSet = [ \r\n    \"Source Sans Pro\",\r\n    \"Dejavu Sans\",\r\n    \"Dejavu Serif\",\r\n    \"Open Sans\",\r\n    \"Montserrat\",\r\n    \"Arial\",\r\n    \"Georgia\",\r\n    \"Verdana\",\r\n    \"Times New Roman\",\r\n];\r\n\r\nexport default fontSet;","export const LANGS = [\n  { \n    langKey: \"en_EN\", \n    langName: \"EN\", \n    langFullName: \"English\", \n  },\n  { \n    langKey: \"de_DE\", \n    langName: \"DE\", \n    langFullName: \"German\", \n  },\n  { \n    langKey: \"ru_RU\", \n    langName: \"RU\", \n    langFullName: \"Russian\", \n  },\n  { \n    langKey: \"fr_FR\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"FR\",\n    regionFullName: \"France\"\n  },\n  { \n    langKey: \"fr_CA\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"CA\",\n    regionFullName: \"Canada\",\n  },\n  { \n    langKey: \"es_ES\", \n    langName: \"ES\", \n    langFullName: \"Spanish\", \n  },\n  { \n    langKey: \"fr_BE\", \n    langName: \"FR\", \n    langFullName: \"French\", \n    regionName: \"BE\",\n    regionFullName: \"Belgium\",\n  },\n  { \n    langKey: \"nl_BE\", \n    langName: \"NL\", \n    langFullName: \"Dutch\",\n    regionName: \"BE\",\n    regionFullName: \"Belgium\"\n  },\n];\n\nexport const ADDITIONAL_LANGS = LANGS.slice(1);\n\nexport const MAIN_LANG_KEY = LANGS[0].langKey;","export const tabsErrorInitialState = {\r\n    namesSection: false,\r\n    listSection: false,\r\n};\r\n\r\nexport const sectionsTabNumbers = [\r\n    { tabName: \"namesSection\", tabNumber: 0 },\r\n    { tabName: \"listSection\", tabNumber: 2 },\r\n];","export const alignmentList = {\r\n    center: \"center\",\r\n    left: \"flex-start\",\r\n    right: \"flex-end\",\r\n    justify: \"flex-start\",\r\n};\r\n\r\nexport const numberingSets = {\r\n    decimal: [\"1\", \"2\", \"3\", \"88\", \"888\"],\r\n    \"upper-alpha\": [\"A\", \"B\", \"C\", \"XX\", \"XXX\"],\r\n    \"lower-alpha\": [\"a\", \"b\", \"c\", \"xx\", \"xxx\"],\r\n    \"upper-roman\": [\"I\", \"II\", \"III\", \"XX\", \"XXX\"],\r\n    \"lower-roman\": [\"i\", \"ii\", \"iii\", \"xx\", \"xxx\"],\r\n};\r\n\r\nexport const orderedListStylesMap = new Map([\r\n    [\"decimal\", \"1, 2, 3\"],\r\n    [\"upper-alpha\", \"A, B, C\"],\r\n    [\"lower-alpha\", \"a, b, c\"],\r\n    [\"upper-roman\", \"I, II, III\"],\r\n    [\"lower-roman\", \"i, ii, iii\"],\r\n]);\r\n\r\nexport const bulletNamesMap = new Map([\r\n    [\"2022\", \"•\"],\r\n    [\"2014\", \"—\"],\r\n    [\"2605\", \"★\"],\r\n]);\r\n\r\nexport const sectionTypesMap = new Map([\r\n    [\"text\", \"Text\"],\r\n    [\"table\", \"Table\"],\r\n    [\"image\", \"Image\"],\r\n]);\r\n\r\nexport const backSpaceActionsMap = new Map([\r\n    [\"merge\", \"Merge\"],\r\n    [\"apply_other_pd\", \"Apply other PD\"],\r\n    [\"remove_pd\", \"Remove PD\"],\r\n    [\"nothing\", \"Nothing\"],\r\n]);\r\n\r\nexport const sampleText = `<div>Sample Text. You can change it.</div><div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ornare maximus vehicula. Duis nisi velit, dictum id mauris vitae, lobortis pretium quam.</div>`;\r\n","import { LANGS } from \"./localeConstants\";\r\nimport { sectionTypesMap } from \"./constants\";\r\n\r\nexport const GLOBAL_FALLBACK_MARK = \"GLOBAL FALLBACK\";\r\nexport const DEFAULT_FONT = \"Helvetica\";\r\nexport const DEFAULT_FONT_SIZE = \"11\";\r\nexport const DEFAULT_SIDE_NUMBER_FONT_COLOR = \"FFF\";\r\nexport const DEFAULT_SIDE_NUMBER_FILLING_COLOR = \"1E88E5\";\r\nexport const DEFAULT_SIDE_NUMBER_WIDTH = \"20\";\r\nexport const DEFAULT_SIDE_NUMBER_RADIUS = \"10\";\r\nexport const DEFAULT_FONT_COLOR = \"000\";\r\nexport const DEFAULT_ROW_INDENT = \"0\";\r\nexport const DEFAULT_MARGIN = \"6\";\r\nexport const DEFAULT_WORD_SPACING = \"0\";\r\nexport const DEFAULT_LINE_SPACING = \"1.5\";\r\nexport const DEFAULT_BORDER_COLOR = \"F00\";\r\nexport const DEFAULT_BORDER_THICKNESS = \"2\";\r\n\r\nexport const autoFillingRequiredFields = {\r\n    sideNumberFont: DEFAULT_FONT,\r\n    sideNumberFontSize: DEFAULT_FONT_SIZE,\r\n    font: DEFAULT_FONT,\r\n    fontSize: DEFAULT_FONT_SIZE,\r\n    fontColor: DEFAULT_FONT_COLOR,\r\n    marginTop: DEFAULT_MARGIN,\r\n    marginBottom: DEFAULT_MARGIN,\r\n    firstRowIndent: DEFAULT_ROW_INDENT,\r\n    otherRowsIndent: DEFAULT_ROW_INDENT,\r\n    wordSpacing: DEFAULT_WORD_SPACING,   \r\n    lineSpacing: DEFAULT_LINE_SPACING,\r\n    borderColor: DEFAULT_BORDER_COLOR,\r\n    borderThickness: DEFAULT_BORDER_THICKNESS,\r\n};\r\n\r\nexport const initialFormState = {\r\n    ...autoFillingRequiredFields,\r\n    decKey: \"\",\r\n    sectionTypes: { ...Array.from(sectionTypesMap).reduce((acc, [ key ], i) => ({ ...acc, [key]: !i }), {})},\r\n    group: \"\",\r\n    groupToCreate: \"\",\r\n    active: true,\r\n    name: { ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}) },\r\n    indentationalLevel: \"\",\r\n    fixedIndentation: true,\r\n    softReturn: false,\r\n    backspaceActionWithContent: \"merge\",\r\n    backspaceActionWithContentStyle: \"\",\r\n    returnActionNextSection: GLOBAL_FALLBACK_MARK,\r\n    returnActionEmptySection: GLOBAL_FALLBACK_MARK,\r\n    tabAction: \"\",\r\n    shiftTabAction: \"\",\r\n    isList: false,\r\n    listName: \"\",\r\n    orderLevel: \"\",\r\n    suffixDistance: \"0.5\",\r\n    magicTabs: false,\r\n    listType: \"unordered\",\r\n    listItem: \"2022\",\r\n    unicodeNumber: \"\",\r\n    unicodeChar: \"\",\r\n    listItemString: \"\",\r\n    numberingStyle: \"decimal\",\r\n    continueNumbering: false,\r\n    allowRestartNumbering: false,\r\n    includePreviousFrom: \"\",\r\n    patternMode: false,\r\n    listPattern: \"\",\r\n    prefix: \"\",\r\n    suffix: \"\",\r\n    sideNumber: false,\r\n    customSideNumberFont: \"\",\r\n    sideNumberAlignment: \"center\",\r\n    sideNumberFontColor: DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    sideNumberFillingColor: DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    sideNumberWidth: DEFAULT_SIDE_NUMBER_WIDTH,\r\n    sideNumberLineHeight: \"\",\r\n    sideNumberRadius: DEFAULT_SIDE_NUMBER_RADIUS,\r\n    sideNumberBold: false,\r\n    sideNumberItalic: false,\r\n    sideNumberUnderlined: false,\r\n    referenceGroup: \"\",\r\n    referenceGroupToCreate: \"\",\r\n    customFont: \"\",\r\n    alignment: \"left\",\r\n    bold: false,\r\n    italic: false,\r\n    underlined: false,\r\n    stroke: false,\r\n    textTransform: \"none\",\r\n    readOnly: false,\r\n    connectToPrevious: false,\r\n    verticalAlign: \"baseline\",\r\n    customLineSpacing: \"\",\r\n    borderLeft: false,\r\n    borderRight: false,\r\n    borderTop: false,\r\n    borderBottom: false,\r\n    borderType: \"solid\",\r\n    fillingColor: \"\",\r\n    tocIndentation: \"\",\r\n    shortCutWin: \"\",\r\n    shortCutWinView: \"\",\r\n    shortCutMac: \"\",\r\n    shortCutMacView: \"\",\r\n};","import { GLOBAL_FALLBACK_MARK } from \"../../constants\";\r\n\r\nconst DEFAULT_DECORATOR = \"Text 2000\";\r\n\r\nexport const replaceDecNameIfDefault = decName => {\r\n    if (decName === DEFAULT_DECORATOR) {\r\n        return GLOBAL_FALLBACK_MARK;\r\n    }\r\n    if (decName === GLOBAL_FALLBACK_MARK) {\r\n        return DEFAULT_DECORATOR;\r\n    }\r\n    return decName;\r\n};\r\n\r\nexport const getNumber = val => val ? +val : null;\r\n\r\nexport const getNumberString = val => typeof val === \"number\" ? `${val}` : \"\";\r\n\r\nexport const getNumeratedListPattern = (order, prefix, suffix) => {\r\n    return `${prefix || \"\"}{${order || 0}}${suffix || \"\"}`;\r\n};\r\n\r\nexport const getStyleString = (rawDec, initialState) => {\r\n    const dec = {};\r\n    for (let propName in rawDec) {\r\n        if (rawDec[propName] !== initialState[propName]) {\r\n            dec[propName] = rawDec[propName];\r\n        }\r\n    }\r\n    const styles = {};\r\n    \r\n    dec.font && (styles[\"font-family\"] = dec.customFont || dec.font);\r\n    dec.fontSize && (styles[\"font-size\"] = `${dec.fontSize}pt`);\r\n    dec.fontColor && dec.fontColor !== \"000000\" && (styles.color = `#${dec.fontColor}`);\r\n    dec.verticalAlign && (styles[\"vertical-align\"] = dec.verticalAlign);\r\n    dec.bold && (styles[\"font-weight\"] = \"bold\");\r\n    dec.italic && (styles[\"font-style\"] = \"italic\");\r\n\r\n    const textDecoration = `${dec.underlined ? \"underline\" : \"\"} ${dec.stroke ? \"line-through\" : \"\"}`.trim()\r\n    textDecoration && (styles[\"text-decoration\"] = textDecoration);\r\n\r\n    if (dec.textTransform) {\r\n        if (dec.textTransform === \"small-caps\") {\r\n            styles[\"font-variant\"] = \"small-caps\";\r\n        } else {\r\n            styles[\"text-transform\"] = dec.textTransform;\r\n        }\r\n    }\r\n\r\n    if (dec.connectToPrevious) {\r\n        styles[\"margin-top\"] = \"-1px\";\r\n        styles[\"margin-bottom\"] = \"-1px\";\r\n        styles[\"padding-top\"] = \"1px\";\r\n        styles[\"padding-bottom\"] = \"1px\";\r\n    } else {\r\n        dec.marginTop && (styles[\"margin-top\"] = dec.marginTop);\r\n        dec.marginBottom && (styles[\"margin-bottom\"] = dec.marginBottom);\r\n    }\r\n\r\n    if (dec.firstRowIndent || dec.otherRowsIndent) {\r\n        const indentsDifference = +(dec.firstRowIndent || 0) - +(dec.otherRowsIndent || 0);\r\n        if (!indentsDifference) {\r\n            styles[\"margin-left\"] = `${dec.otherRowsIndent}cm`;\r\n        } else {\r\n            styles[\"text-indent\"] = `${indentsDifference}cm`;\r\n            dec.otherRowsIndent && (styles[\"margin-left\"] = `${dec.otherRowsIndent}cm`);\r\n        }\r\n    }\r\n\r\n    if (dec.customLineSpacing !== \"1.4em\") {\r\n        styles[\"line-height\"] = dec.customLineSpacing || rawDec.lineSpacing;\r\n    }\r\n\r\n    if (dec.borderLeft || dec.borderRight || dec.borderTop || dec.borderBottom) {\r\n        const borderThickness = dec.borderThickness || initialState.borderThickness;\r\n        const borderType = dec.borderType || initialState.borderType;\r\n        const borderColor = dec.borderColor || initialState.borderColor;\r\n        const borderStyle = ` ${borderThickness}pt ${borderType} #${borderColor}`;\r\n\r\n        dec.borderLeft && (styles[\"border-left\"] = borderStyle);\r\n        dec.borderRight && (styles[\"border-right\"] = borderStyle);\r\n        dec.borderTop && (styles[\"border-top\"] = borderStyle);\r\n        dec.borderBottom && (styles[\"border-bottom\"] = borderStyle);\r\n    }\r\n    \r\n    dec.wordSpacing && (styles[\"word-spacing\"] = `${dec.wordSpacing}pt`);\r\n\r\n    dec.fillingColor && (styles[\"background-color\"] = `#${dec.fillingColor}`);\r\n\r\n    return Object.entries(styles).reduce((acc, [key, value]) => (`${acc} ${key}:${value};`), \"\").trim();\r\n};\r\n\r\nexport const getSideNumberStyleString = dec => {\r\n    const styles = {};\r\n\r\n    if (dec.font !== dec.sideNumberFont || dec.customFont !== dec.customSideNumberFont) {\r\n        styles.font = dec.customSideNumberFont || dec.customFont;\r\n    }\r\n\r\n    styles[\"text-align\"] = dec.sideNumberAlignment;\r\n    dec.fontSize !== dec.sideNumberFontSize && (styles[\"font-size\"] = `${dec.sideNumberFontSize}pt`);\r\n    dec.sideNumberFontColor && (styles.color = `#${dec.sideNumberFontColor}`);\r\n    dec.sideNumberFillingColor && (styles[\"background-color\"] = `#${dec.sideNumberFillingColor}`);\r\n    dec.sideNumberWidth && (styles[\"min-width\"] = `${dec.sideNumberWidth}pt`);\r\n    dec.sideNumberLineHeight && (styles[\"line-height\"] = `${dec.sideNumberLineHeight}pt`);\r\n    dec.sideNumberRadius && (styles[\"border-radius\"] = `${dec.sideNumberRadius}pt`);\r\n    dec.sideNumberBold && (styles[\"font-weight\"] = \"bold\");\r\n    dec.sideNumberItalic && (styles[\"font-style\"] = \"italic\");\r\n    dec.sideNumberUnderline && (styles[\"text-decoration\"] = \"underline\");\r\n\r\n    return Object.entries(styles).reduce((acc, [key, value]) => (`${acc} ${key}:${value};`), \"\").trim();\r\n};","const decToSendDefaultProps = {\r\n    item_type: \"style\",\r\n    style_properties: {},\r\n    keyboard_shortcut: {},\r\n    xref_target_type_group_key: null,\r\n    is_possible_xref_target: false,\r\n    show_in_editor_toc: false,\r\n    editor_toc_indentation: null,\r\n    editor_toc_filter_level: null,\r\n    list_key: null,\r\n    item_order: null,\r\n    extra_hanging_indentation: null,\r\n    extra_hanging_indentation_at_grid: false,\r\n    numerated_list_format: null,\r\n    numerated_list_start: null,\r\n    numerated_list_pattern: null,\r\n    numerated_list_style: \"\",\r\n    is_auto_restart_numbering: false,\r\n    allow_restart_numbering: false,\r\n    bullet_list_format: null,\r\n    movable: true,\r\n    content_required: false,\r\n    on_return_style_key: null,\r\n    on_return_indentation: null,\r\n    item_order_allow_tab: false,\r\n};\r\n\r\nexport default decToSendDefaultProps;","import { \r\n    sectionTypesMap, \r\n    bulletNamesMap, \r\n    orderedListStylesMap,\r\n    initialFormState,\r\n} from \"../../constants\";\r\nimport {\r\n    replaceDecNameIfDefault,\r\n    getNumber,\r\n    getNumberString,\r\n    getNumeratedListPattern,\r\n    getStyleString,\r\n    getSideNumberStyleString,\r\n} from \"./converterUtils\";\r\nimport decToSendDefaultProps from \"./decToSendDefaultProps\";\r\nimport { unicodeNumberToChar, getShortCutUtils } from \"../index\";\r\n\r\nclass DecDataConverter {\r\n    static convertToSend(rawDec) {\r\n        const dec = {};\r\n        // eslint-disable-next-line\r\n        for (let key in rawDec) {\r\n            dec[key] = rawDec[key] !== \"\" ? rawDec[key] : null;\r\n        }\r\n\r\n        const res = {};\r\n        res.key = dec.decKey;\r\n        res.section_types = Object.entries(dec.sectionTypes).filter(([, value]) => value).map(([key]) => key);\r\n        res.hidden = !dec.active;\r\n        res.name = dec.name;\r\n\r\n        res.initial_indentation = getNumber(dec.indentationalLevel);\r\n        res.is_fixed_indentation = dec.fixedIndentation;\r\n        res.content_in_second_line = dec.softReturn;\r\n        res.backspace_action = dec.backspaceActionWithContent;\r\n        res.backspace_action_value = replaceDecNameIfDefault(dec.backspaceActionWithContentStyle);\r\n        res.create_new_section_on_return_if_empty = !!dec.returnActionNextSection;\r\n        res.pd_for_new_section_on_return_if_empty = replaceDecNameIfDefault(dec.returnActionNextSection);\r\n        res.change_pd_on_return_if_empty = !!dec.returnActionEmptySection;\r\n        res.pd_for_current_section_on_return_if_empty = replaceDecNameIfDefault(dec.returnActionEmptySection);\r\n        res.on_tab_key = dec.tabAction;\r\n        res.on_shift_tab_key = dec.shiftTabAction;\r\n\r\n        if (dec.isList) {\r\n            res.list_key = dec.listName;\r\n            res.item_order = dec.orderLevel ? getNumber(dec.orderLevel) : null;\r\n            res.extra_hanging_indentation = dec.suffixDistance === \"0.5\" ? null : `${dec.suffixDistance}cm`;\r\n            res.extra_hanging_indentation_at_grid = dec.magicTabs;\r\n            if (dec.listType === \"ordered\") {\r\n                // for ordered list\r\n                res.numerated_list_format = dec.numberingStyle;\r\n                if (dec.patternMode) {\r\n                    // for composite numbering\r\n                    res.numerated_list_pattern = dec.listPattern;\r\n                } else {\r\n                    // for simple numbering\r\n                    res.numerated_list_pattern = getNumeratedListPattern(dec.orderLevel, dec.prefix, dec.suffix);\r\n                }\r\n                res.is_auto_restart_numbering = !dec.continueNumbering;\r\n                res.allow_restart_numbering = dec.allowRestartNumbering;\r\n                res.numerated_list_start = dec.includePreviousFrom;\r\n                res.numerated_list_style = \"styles settings\";\r\n            } else {\r\n                // for unordered list\r\n                if ((dec.listItem === \"custom\" && !dec.unicodeNumber)) {\r\n                    res.bullet_list_format = null;\r\n                } else if (dec.listItem === \"string\") {\r\n                    res.bullet_list_format = dec.listItemString;\r\n                } else {\r\n                    res.bullet_list_format = `\\\\${dec.unicodeNumber || dec.listItem}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (dec.referenceGroup) {\r\n            res.xref_target_type_group_key = dec.referenceGroup;\r\n            res.is_possible_xref_target = true;\r\n        }\r\n\r\n        if (dec.alignment && dec.alignment !== \"left\") {\r\n            res.style_properties = { alignment: dec.alignment };\r\n        }\r\n        res.read_only = dec.readOnly;\r\n\r\n        if (dec.tocIndentation) {\r\n            res.show_in_editor_toc = true;\r\n            res.editor_toc_indentation = +dec.tocIndentation;\r\n            res.editor_toc_filter_level = +dec.tocIndentation;\r\n        }\r\n\r\n        if (dec.shortCutMac) {\r\n            res.keyboard_shortcut = dec.shortCutMac;\r\n        }\r\n\r\n        res.editor_style = getStyleString(rawDec, initialFormState);\r\n        res.numerated_list_style = dec.sideNumber ? getSideNumberStyleString(rawDec) : \"\";\r\n                \r\n        console.log(res);\r\n\r\n        return { ...rawDec, ...decToSendDefaultProps, ...res };\r\n    }\r\n\r\n    static convertToEdit(rawDec) {\r\n        const dec = {};\r\n        // eslint-disable-next-line\r\n        for (let key in rawDec) {\r\n            dec[key] = rawDec[key] !== null ? rawDec[key] : \"\";\r\n        }\r\n\r\n        const res = {};\r\n        res.decKey = dec.key;\r\n        res.sectionTypes = Array.from(sectionTypesMap).map(([ key ]) => key).reduce((acc, cur) => ({\r\n            ...acc,\r\n            [cur]: dec.section_types.includes(cur),\r\n        }), {});\r\n        res.active = !dec.hidden;\r\n        res.name = dec.name;\r\n\r\n        res.indentationalLevel = getNumberString(dec.initial_indentation);\r\n        res.fixedIndentation = dec.is_fixed_indentation;\r\n        res.softReturn = dec.content_in_second_line;\r\n        res.backspaceActionWithContent = dec.backspace_action;\r\n        res.backspaceActionWithContentStyle = replaceDecNameIfDefault(dec.backspace_action_value);\r\n        res.returnActionNextSection = replaceDecNameIfDefault(dec.pd_for_new_section_on_return_if_empty);\r\n        res.returnActionEmptySection = replaceDecNameIfDefault(dec.pd_for_current_section_on_return_if_empty);\r\n        res.tabAction = dec.on_tab_key;\r\n        res.shiftTabAction = dec.on_shift_tab_key;\r\n\r\n        // res.numerated_list_format, dec.prefix, dec.suffix, dec.OrderLevel\r\n        if (dec.list_key || dec.bullet_list_format) {\r\n            res.isList = true;\r\n            res.listName = dec.list_key;\r\n            res.orderLevel = dec.item_order ? getNumber(dec.orderLevel) : \"0\";\r\n            const suffixDistanceMatch = `${(dec.extra_hanging_indentation||\"0.5cm\")}`.match(/[\\d.]*/);\r\n            res.suffixDistance = suffixDistanceMatch ? suffixDistanceMatch[0] : \"0.5\";\r\n            res.magicTabs = dec.extra_hanging_indentation_at_grid;\r\n            if (dec.numerated_list_pattern) {\r\n                // for ordered list\r\n                res.listType = \"ordered\";\r\n                if (/{.*?{/.test(dec.numerated_list_pattern)) {\r\n                    // for composite numbering\r\n                    res.patternMode = true;\r\n                    res.listPattern = dec.numerated_list_pattern;\r\n                } else {\r\n                    // for simple numbering\r\n                    const prefixAndSuffixMatch = dec.numerated_list_pattern.match(/(.*?){.*}(.*)/);\r\n                    if (prefixAndSuffixMatch) {\r\n                        res.prefix = prefixAndSuffixMatch[1] || \"\";\r\n                        res.suffix = prefixAndSuffixMatch[2] || \"\";\r\n                    }\r\n                }\r\n                res.numberingStyle = orderedListStylesMap.has(dec.numerated_list_format) ? dec.numerated_list_format : \"decimal\";\r\n                res.continueNumbering = !dec.is_auto_restart_numbering;\r\n                res.allowRestartNumbering = dec.allow_restart_numbering;\r\n                res.includePreviousFrom = dec.numerated_list_start;\r\n            } else {\r\n                // for unordered list\r\n                res.listType = \"unordered\";\r\n                if ((dec.bullet_list_format || \"\").match(/^\\\\[\\da-f]+/i)) {\r\n                    const bullet = dec.bullet_list_format.slice(1);\r\n                    if (bulletNamesMap.has(bullet)) {\r\n                        res.listItem = bullet;\r\n                    } else {\r\n                        res.listItem = \"custom\";\r\n                        res.unicodeNumber = bullet;\r\n                        res.unicodeChar = unicodeNumberToChar(bullet);\r\n                    }\r\n                } else {\r\n                    // strings or empty bullets\r\n                    res.listItem = dec.bullet_list_format ? \"string\" : \"custom\";\r\n                    res.listItemString = dec.bullet_list_format;\r\n                }\r\n            }\r\n        }\r\n\r\n        res.referenceGroup = dec.xref_target_type_group_key || \"\";\r\n\r\n        if (dec.style_properties.alignment) {\r\n            res.alignment = dec.style_properties.alignment;\r\n        }\r\n        res.readOnly = !!dec.read_only;\r\n        res.tocIndentation = getNumberString(dec.editor_toc_indentation);\r\n\r\n        if ((dec.keyboard_shortcut||{}).hasOwnProperty(\"keyCode\")) {\r\n            res.shortCutMac = dec.keyboard_shortcut;\r\n            res.shortCutMacView = getShortCutUtils(\"MacOS\").convertShortcutToString(dec.keyboard_shortcut);\r\n        }\r\n\r\n        console.log(res);\r\n\r\n        return { ...rawDec, ...initialFormState, ...res };\r\n    }\r\n\r\n    static mapDecFields = {};\r\n}\r\n\r\nexport default DecDataConverter;","const { body } = document;\r\nlet width;\r\n\r\nconst container = document.createElement('span');\r\ncontainer.innerHTML = Array(100).join('wi');\r\ncontainer.style.cssText = [\r\n    'position:absolute',\r\n    'width:auto',\r\n    'font-size:128px',\r\n    'left:-99999px'\r\n].join(' !important;');\r\n\r\nconst getWidth = fontFamily => {\r\n    container.style.fontFamily = fontFamily;\r\n\r\n    body.appendChild(container);\r\n    width = container.clientWidth;\r\n    body.removeChild(container);\r\n\r\n    return width;\r\n};\r\n\r\nconst monoWidth  = getWidth('monospace');\r\nconst serifWidth = getWidth('serif');\r\nconst sansWidth  = getWidth('sans-serif');\r\n\r\nconst isFontAvailable = font => {\r\n    return monoWidth !== getWidth(font + ',monospace') ||\r\n    sansWidth !== getWidth(font + ',sans-serif') ||\r\n    serifWidth !== getWidth(font + ',serif');\r\n};\r\n\r\nexport default isFontAvailable;","import DecDataConverter from \"./DecDataConverter\";\r\nexport default DecDataConverter;","import keycode from \"keycode\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nconst getShortCutUtils = systemName => {\r\n  return class ShortcutUtils {  \r\n    static CMD_KEYS = {\r\n      altKey: systemName === \"MacOS\" ? \"Option\" : \"Alt\",\r\n      ctrlKey: systemName === \"MacOS\" ? \"Control\" : \"Ctrl\",\r\n      shiftKey: \"Shift\",\r\n      metaKey: \"Command\",\r\n    };\r\n  \r\n    static isDeadKey(e) {\r\n      return e.keyCode === 229;\r\n    }\r\n  \r\n    static prevent(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  \r\n    static convertEventToShortCut(e) {\r\n      if (ShortcutUtils.isDeadKey(e)) {\r\n        ShortcutUtils.prevent(e);\r\n        return { deleteKey: true };\r\n      }\r\n      ShortcutUtils.prevent(e);\r\n      const shortCut = {\r\n        keyCode: e.keyCode,\r\n        ctrlKey: e.ctrlKey,\r\n        shiftKey: e.shiftKey,\r\n        altKey: e.altKey,\r\n        metaKey: false,\r\n      };\r\n      if (systemName === \"MacOS\") {\r\n        shortCut.metaKey = e.metaKey;\r\n      }\r\n      const deleteKeys = [8, 46];\r\n      const cmdKeysCodes = [16, 91, 18, 17];\r\n      const shortCutForView = ShortcutUtils.convertShortcutToMeta(shortCut);\r\n      if (deleteKeys.indexOf(e.keyCode) > -1) {\r\n        return { deleteKey: true };\r\n      } else if (shortCutForView.isCmdPressed && cmdKeysCodes.indexOf(e.keyCode) === -1) {\r\n        return {\r\n          value: shortCut,\r\n          stringValue: shortCutForView.stringValue,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n  \r\n    static convertShortcutToString(shortCut = {}) {\r\n      return ShortcutUtils.convertShortcutToMeta(shortCut).stringValue;\r\n    }\r\n  \r\n    static convertShortcutToMeta(shortCut = {}) {\r\n      let shortCutForView = \"\";\r\n      let isCmdPressed = false;\r\n      Object.keys(ShortcutUtils.CMD_KEYS).forEach((key) => {\r\n        if (shortCut && shortCut[key]) {\r\n          isCmdPressed = true;\r\n          shortCutForView += `${ShortcutUtils.CMD_KEYS[key]} + `;\r\n        }\r\n      });\r\n      if (shortCut && shortCut.keyCode) {\r\n        shortCutForView += keycode(shortCut.keyCode);\r\n      }\r\n      return { stringValue: shortCutForView, isCmdPressed };\r\n    }\r\n  \r\n    static removeDuplicateShortcuts = function (decorators, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(decorators).forEach((decoratorKey) => {\r\n        const item = decorators[decoratorKey];\r\n        const itemType = item.item_type;\r\n        if (itemType === \"style\") {\r\n          if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n            decorators[decoratorKey].keyboard_shortcut = null;\r\n            removed = true;\r\n          }\r\n        } else {\r\n          const childItems = item.child_items;\r\n          Object.keys(childItems).forEach((itemKey) => {\r\n            const style = childItems[itemKey];\r\n            if (isEqual(style.keyboard_shortcut, newPdShortcut)) {\r\n              style.keyboard_shortcut = null;\r\n              removed = true;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  \r\n    static removeDuplicateShortcutsInInlineStyle = function (inlineStyles, newPdShortcut) {\r\n      let removed = false;\r\n      Object.keys(inlineStyles).forEach((styleKey) => {\r\n        const item = inlineStyles[styleKey];\r\n        if (isEqual(item.keyboard_shortcut, newPdShortcut)) {\r\n          inlineStyles[styleKey].keyboard_shortcut = null;\r\n          removed = true;\r\n        }\r\n      });\r\n      return removed;\r\n    };\r\n  }\r\n};\r\n\r\nexport default getShortCutUtils;\r\n\r\n","import { tabsErrorInitialState, sectionsTabNumbers, MAIN_LANG_KEY } from \"../constants\";\r\n\r\nexport const hasErrorInSection = refs => !refs.every(ref => ref.current.value);\r\n\r\nexport const getTabsErrorState = form => {\r\n    const tabsErrorState = { ...tabsErrorInitialState };\r\n    const { name, decKey, listName, isList, listType } = form;\r\n\r\n    if (!name[MAIN_LANG_KEY] || !decKey) {\r\n        tabsErrorState.namesSection = true;\r\n    }\r\n    if (isList && listType === \"ordered\" && !listName) {\r\n        tabsErrorState.listSection = true;\r\n    }\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (let tabName in tabsErrorState) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabsErrorState;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const getTabNumberToSwitch = tabsErrorState => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const { tabName, tabNumber } of sectionsTabNumbers) {\r\n        if (tabsErrorState[tabName]) {\r\n            return tabNumber;\r\n        }\r\n    }\r\n};","import { \r\n    numberingSets, \r\n    autoFillingRequiredFields, \r\n    DEFAULT_FONT, \r\n} from \"../constants\";\r\nimport isFontAvailable from \"./isFontAvailable\";\r\n\r\nexport const getCorrectColor = (hex, backgroundColor = \"FFF\") => {\r\n    const correctColor = typeof hex === \"string\" && (hex.length === 6 || hex.length === 3) ? hex : backgroundColor;\r\n    return correctColor;\r\n};\r\n\r\nexport const selectAllOnClick = defaultValue => e => {\r\n    if (!defaultValue || e.target.value === defaultValue) {\r\n        e.target.focus();\r\n        e.target.select();\r\n    }\r\n};\r\n\r\nexport const getOffset = (alignType, fontSize) => {\r\n    if (alignType === \"baseline\") {\r\n        return 0;\r\n    }\r\n    return (parseFloat(fontSize.slice()) / 2) * (alignType === \"sub\" ? 1 : -1);\r\n};\r\n\r\nexport const getUnstyledText = styledText => {\r\n    const unstyledText = styledText.replace(/<\\/(.*?)>/gm, \"</div>\").replace(/(?!(?:<\\/(.*?)>|<br(.*?)>)$)<(.*?)>/gm, \"<div>\");\r\n    return unstyledText[0] !== \"<\" ? `<div>${unstyledText}</div>` : unstyledText;\r\n};\r\n\r\nexport const unicodeNumberToChar = unicodeNumber => {\r\n    return String.fromCharCode(parseInt(unicodeNumber, 16));\r\n};\r\n\r\nexport const unicodeCharToNumber = unicodeChar => {\r\n    return unicodeChar.charCodeAt(0).toString(16);\r\n};\r\n\r\nexport const scrollToBottom = className => {\r\n    setTimeout(() => { document.getElementsByClassName(className)[0].scrollTo({\r\n        top: Number.MAX_SAFE_INTEGER,\r\n        behavior: \"smooth\",\r\n    })}, 0);\r\n};\r\n\r\nexport const changeAndScroll = (changeFunction, timeOut) => (...args) => {\r\n    changeFunction(...args);\r\n    if (!timeOut) {\r\n        scrollToBottom(\"content-rightSide\");\r\n    } else {\r\n        setTimeout(() => {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }, timeOut);\r\n    }\r\n};\r\n\r\nexport const selectAllEditableContent = className => e => {\r\n    if (e.target.className === className) {\r\n        window.getSelection().selectAllChildren(e.target.children[0]);\r\n    }\r\n};\r\n\r\nexport const getListChars = (isOrderedList, numberingStyle, bullet) => (\r\n    isOrderedList ? numberingSets[numberingStyle] : Array(4).fill(bullet)\r\n);\r\n\r\nexport const detectOS = () => {\r\n    if (navigator && navigator.appVersion) {\r\n        if (navigator.appVersion.indexOf(\"Win\") !== -1) {\r\n            return \"Windows\";\r\n        } else if (navigator.appVersion.indexOf(\"Mac\") !== -1) {\r\n            return \"MacOS\";\r\n        }\r\n    }\r\n};\r\n\r\nexport const focusInput = (inputRef, timeout = 300) => {\r\n    setTimeout(() => {\r\n        inputRef.current.focus();\r\n    }, timeout);\r\n};\r\n\r\nexport const focusOnEmptyField = refs => {\r\n    for (let i = 0; i < refs.length; i++) {\r\n        if (!refs[i].current.value) {\r\n            console.log(refs[i].current.value, i)\r\n            focusInput(refs[i]);\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\nexport const getPreviewFont = (font, customFont) => {\r\n    if (font !== \"custom\" && isFontAvailable(font)) {\r\n        return font;\r\n    } else if (font === \"custom\" && customFont && isFontAvailable(customFont)) {\r\n        return customFont;\r\n    }\r\n    return `'${DEFAULT_FONT}', 'Roboto', sans-serif`;\r\n}\r\n\r\nexport const fillMissedFields = currentFormState => {\r\n    const { \r\n        font, customFont,\r\n        sideNumberFont, customSideNumberFont,\r\n        lineSpacing, customLineSpacing,\r\n    } = currentFormState;\r\n\r\n    const formStateWithoutMissedFields = { ...currentFormState };\r\n    \r\n    [\r\n        [font, customFont],\r\n        [sideNumberFont, customSideNumberFont], \r\n        [lineSpacing, customLineSpacing],\r\n    ].forEach(([option, customOption]) => {\r\n        if (option === \"custom\" && !customOption) {\r\n            formStateWithoutMissedFields[option] = null;\r\n        }\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    for (let fieldName in autoFillingRequiredFields) {\r\n        if (!currentFormState[fieldName] && autoFillingRequiredFields[fieldName]) {\r\n            formStateWithoutMissedFields[fieldName] = autoFillingRequiredFields[fieldName];\r\n        }\r\n    }\r\n    return formStateWithoutMissedFields;\r\n};","import React from \"react\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport LabelWithAsterisk from \"./LabelWithAsterisk\";\r\nimport { focusInput } from \"../helpers\";\r\nimport { LANGS, MAIN_LANG_KEY, ADDITIONAL_LANGS } from \"../constants\";\r\n\r\nclass NewGroupDialog extends React.PureComponent {\r\n    isXref = this.props.groupType === \"xref\";\r\n\r\n    emptyGroup = {\r\n        ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: \"\" }), {}),\r\n        ...this.isXref && { groupKey: \"\" },\r\n    };\r\n\r\n    getInitialState = () => ({ ...this.emptyGroup, ...this.props.savedGroup });\r\n\r\n    state = this.getInitialState();\r\n\r\n    requiredFieldRef = React.createRef();\r\n\r\n    onInputChange = inputName => e => {\r\n        this.setState({ [inputName]: e.target.value });\r\n    };\r\n\r\n    onClose = () => {\r\n        this.setState(this.getInitialState());\r\n        this.props.hideGroupDialogValidationError();\r\n        this.props.closeGroupDialog();\r\n    };\r\n\r\n    onGroupSave = () => {\r\n        if ((!this.isXref && this.state[MAIN_LANG_KEY].trim().length) || (this.isXref && this.state.groupKey.trim().length)) {\r\n            const groupToSave = {\r\n                ...LANGS.reduce((acc, { langKey }) => ({ ...acc, [langKey]: this.state[langKey].trim() }), {}),\r\n            };\r\n            if (this.isXref) {\r\n                groupToSave.groupKey = this.state.groupKey.trim();\r\n            }\r\n            this.props.hideGroupDialogValidationError();\r\n            this.props.saveGroup(null, (groupToSave[MAIN_LANG_KEY] || groupToSave.groupKey), groupToSave);\r\n            this.props.closeGroupDialog();\r\n        } else {\r\n            this.props.showGroupDialogValidationError();\r\n            focusInput(this.requiredFieldRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isOpen, isEditMode, hasGroupDialogValidationError } = this.props;\r\n        const { onInputChange, onGroupSave, onClose, isXref } = this;\r\n        const titleText = `${isEditMode ? \"Edit\" : \"Create\"} new ${isXref ? \"reference \" : \"\"}group`\r\n        const buttonText = isEditMode ? \"Save\" : \"Create\";\r\n\r\n        return (\r\n            <Dialog\r\n                className=\"decoratorDialog\"\r\n                open={isOpen}\r\n                onClose={onClose}\r\n                fullWidth={true}\r\n                maxWidth=\"md\"\r\n            >\r\n                <DialogTitle>{titleText}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        { isXref && (\r\n                            <>\r\n                                <LabelWithAsterisk>Group Key</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state.groupKey}\r\n                                    onChange={onInputChange(\"groupKey\")}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state.groupKey}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { isXref ? (\r\n                            <>\r\n                                <span>Name EN</span>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                                <TextField\r\n                                    value={this.state[MAIN_LANG_KEY]}\r\n                                    onChange={onInputChange(MAIN_LANG_KEY)}\r\n                                    inputRef={this.requiredFieldRef}\r\n                                    error={hasGroupDialogValidationError && !this.state[MAIN_LANG_KEY]}\r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </>\r\n                        ) }\r\n                        { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                            <React.Fragment key={langKey}>\r\n                                <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                                <TextField\r\n                                    value={this.state[langKey]}\r\n                                    onChange={onInputChange(langKey)} \r\n                                    variant=\"outlined\" \r\n                                    margin=\"dense\" \r\n                                />\r\n                            </React.Fragment>\r\n                        )) }                 \r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={onGroupSave} color=\"primary\">\r\n                        {buttonText}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewGroupDialog;","import React from \"react\";\r\n\r\nconst withNewGroupControl = (ViewComponent) => {\r\n    return class extends React.Component {\r\n        state = {\r\n            isGroupDialogOpen: false,\r\n            hasGroupDialogValidationError: false,\r\n        };\r\n        \r\n        openGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: true });\r\n        };\r\n\r\n        closeGroupDialog = () => {\r\n            this.setState({ isGroupDialogOpen: false });\r\n        };\r\n\r\n        showGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: true });\r\n        };\r\n\r\n        hideGroupDialogValidationError = () => {\r\n            this.setState({ hasGroupDialogValidationError: false });\r\n        };\r\n\r\n        render() {\r\n            const { \r\n                openGroupDialog, \r\n                closeGroupDialog, \r\n                showGroupDialogValidationError, \r\n                hideGroupDialogValidationError \r\n            } = this; \r\n\r\n            return ( \r\n                <ViewComponent \r\n                    {...this.props} \r\n                    {...this.state} \r\n                    {...{ openGroupDialog, closeGroupDialog, showGroupDialogValidationError, hideGroupDialogValidationError }} \r\n                /> \r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default withNewGroupControl;","import { getShortCutUtils } from \"../helpers\";\r\n\r\nexport const UPDATE_DEC_FORM = \"UPDATE_DEC_FORM\";\r\nexport const CLEAR_DEC_FORM = \"CLEAR_DEC_FORM\";\r\nexport const SHOW_DEC_DIALOG = \"SHOW_DEC_DIALOG\";\r\nexport const HIDE_DEC_DIALOG = \"HIDE_DEC_DIALOG\";\r\nexport const SWITCH_DEC_DIALOG_TAB = \"SWITCH_DEC_DIALOG_TAB\";\r\nexport const RESET_DEC_DIALOG_TAB = \"RESET_DEC_DIALOG_TAB\";\r\nexport const SWITCH_ON_DEC_DIALOG_EDIT_MODE = \"SWITCH_ON_DEC_DIALOG_EDIT_MOD\";\r\nexport const SWITCH_OFF_DEC_DIALOG_EDIT_MODE = \"SWITCH_OFF_DEC_DIALOG_EDIT_MODE\";\r\nexport const UPDATE_VALIDATION_ERROR = \"UPDATE_VALIDATION_ERROR\";\r\nexport const REMOVE_VALIDATION_ERROR = \"REMOVE_VALIDATION_ERROR\";\r\n\r\nexport const updateDecoratorForm = payload => {\r\n    return {\r\n        type: UPDATE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearDecoratorForm = payload => {\r\n    return {\r\n        type: CLEAR_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const showDecoratorDialog = () => {\r\n    return {\r\n        type: SHOW_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const hideDecoratorDialog = () => {\r\n    return {\r\n        type: HIDE_DEC_DIALOG,\r\n    };\r\n};\r\n\r\nexport const switchDecDialogTab = payload => {\r\n    return {\r\n        type: SWITCH_DEC_DIALOG_TAB,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const resetDecDialogTab = () => {\r\n    return {\r\n        type: RESET_DEC_DIALOG_TAB,\r\n    };\r\n}\r\n\r\nexport const switchOnDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_ON_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const switchOffDecDialogEditMode = () => {\r\n    return {\r\n        type: SWITCH_OFF_DEC_DIALOG_EDIT_MODE,\r\n    };\r\n};\r\n\r\nexport const updateValidationError = payload => {\r\n    return {\r\n        type: UPDATE_VALIDATION_ERROR,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const removeValidationError = () => {\r\n    return {\r\n        type: REMOVE_VALIDATION_ERROR,\r\n    };\r\n};\r\n\r\nexport const openDialog = dispatch => dec => {\r\n    if (dec) {\r\n        dispatch(updateDecoratorForm(dec));\r\n        dispatch(switchOnDecDialogEditMode());\r\n    } \r\n    dispatch(showDecoratorDialog());\r\n};\r\n\r\nexport const closeDialog = dispatch => () => {\r\n    dispatch(hideDecoratorDialog());\r\n    dispatch(switchOffDecDialogEditMode());\r\n    dispatch(removeValidationError());\r\n    dispatch(resetDecDialogTab());\r\n    dispatch(clearDecoratorForm());\r\n};\r\n\r\nexport const setValue = dispatch => propName => (e, secondArg = \"\") => {\r\n    const newValue = (e && e.target.value !== \"\" && e.target.value !== undefined) ? e.target.value : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const toggleValue = dispatch => propName => (e, secondArg) => {\r\n    const newValue = e ? e.target.checked : secondArg;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newValue,\r\n    }));\r\n};\r\n\r\nexport const setBullet = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const newBullet = input.length > 1 ? input[input.length - 1] : input;\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: newBullet,\r\n    }));\r\n    return newBullet;\r\n};\r\n\r\nexport const setColor = dispatch => propName => (e, secondArg) => {\r\n    const input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n    \r\n    const filteredInput = input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i) \r\n                          ? input.replace(\"#\", \"\").trim().match(/[0-9a-f]+/i)[0].slice(0, 6)\r\n                          : \"\" ;\r\n    \r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setNumber = dispatch => propName => (e, secondArg) => {\r\n    let input = e ? (e.target.value || \"\") : (secondArg || \"\");\r\n\r\n    const filteredInput = input.replace(\",\", \".\").trim().match(/[0-9]+/i) \r\n                          ? input.replace(\",\", \".\").trim().match(/\\d+[.,]?\\d*/)[0]\r\n                          : \"\" ;\r\n\r\n    dispatch(updateDecoratorForm({\r\n        [propName]: filteredInput,\r\n    }));\r\n    return filteredInput;\r\n};\r\n\r\nexport const setShortCut = dispatch => (valuePropName, viewPropName) => e => {\r\n    const systemName = valuePropName.search(/mac/gi) !== -1 ? \"MacOS\" : \"Windows\";\r\n    const shortCut = getShortCutUtils(systemName).convertEventToShortCut(e);\r\n    if (shortCut && shortCut.deleteKey) {\r\n        setTimeout(() => {\r\n            dispatch(updateDecoratorForm({ \r\n                [valuePropName]: \"\" \r\n            }));\r\n            dispatch(updateDecoratorForm({ \r\n                [viewPropName]: \"\" \r\n            }));\r\n        }, 100);\r\n    } else if (shortCut) {\r\n        dispatch(updateDecoratorForm({ \r\n            [valuePropName]: shortCut.value \r\n        }));\r\n        dispatch(updateDecoratorForm({ \r\n            [viewPropName]: shortCut.stringValue \r\n        }));\r\n    }\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport LabelWithAsterisk from \"../common/LabelWithAsterisk\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { hasErrorInSection, focusOnEmptyField } from \"../helpers\";\r\nimport { setValue, toggleValue, updateValidationError } from \"../actions\";\r\nimport { MAIN_LANG_KEY, ADDITIONAL_LANGS, sectionTypesMap } from \"../constants\";\r\n\r\nclass NamesSection extends React.Component {\r\n    decKeyInputRef = React.createRef();\r\n    decNameEnInputRef = React.createRef();\r\n    inputRefs = [this.decKeyInputRef, this.decNameEnInputRef];\r\n\r\n    onGroupChange = (e, groupName, group) => {\r\n        if (group) {\r\n            this.props.changeGroupToCreate(null, group);\r\n        }\r\n        this.props.changeGroup(e, groupName);\r\n    };\r\n\r\n    onNameChange = langKey => e => {\r\n        const newValue = {\r\n            ...this.props.name,\r\n            [langKey]: e.target.value,\r\n        };\r\n        this.props.changeName(null, newValue);\r\n    };\r\n\r\n    onSectionTypesChange = typeName => e => {\r\n        const newValue = {\r\n            ...this.props.sectionTypes,\r\n            [typeName]: e.target.checked,\r\n        };\r\n        this.props.changeSectionTypes(null, newValue);\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusOnEmptyField(this.inputRefs);\r\n        }\r\n        if (this.props.validationErrorInSection && !hasErrorInSection(this.inputRefs)) {\r\n            this.props.updateValidationError({ namesSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            groupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,\r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            validationErrorInSection,\r\n            decKey, changeDecKey,\r\n            sectionTypes,\r\n            group,\r\n            active, changeActive,\r\n            name,\r\n        } = this.props;\r\n\r\n        const newGroupName = groupToCreate[MAIN_LANG_KEY];\r\n        const isEditMode = !!newGroupName;\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n                <LabelWithAsterisk>Key</LabelWithAsterisk>\r\n                <TextField \r\n                    value={decKey}\r\n                    onChange={changeDecKey}\r\n                    error={validationErrorInSection && !decKey}\r\n                    inputRef={this.decKeyInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                <span>Section types</span>\r\n                <div className=\"checkBoxesSet\">\r\n                    { Array.from(sectionTypesMap).map(([ key, value ]) => (\r\n                        <div className=\"labeledCheckbox\" key={key}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label={value}\r\n                                labelPlacement=\"end\"\r\n                                checked={sectionTypes[key]}\r\n                                onChange={this.onSectionTypesChange(key)}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                <span>Group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={group} \r\n                        onChange={this.onGroupChange}\r\n                        input={ <CustomInput /> }  \r\n                    >\r\n                        <option value=\"\">...</option>\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"0\">Text</option>\r\n                        <option value=\"1\">Heading</option>\r\n                        <option value=\"2\">Heading Heading Heading Heading</option>\r\n                    </NativeSelect>\r\n                    { !(isEditMode && group !== newGroupName) && (\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                    ) }\r\n                </div>\r\n\r\n                <span>Active</span>\r\n                <div className=\"unlabeledCheckbox\">\r\n                    <Checkbox\r\n                        checked={active}\r\n                        onChange={changeActive} \r\n                        color=\"primary\" \r\n                    />\r\n                </div>\r\n\r\n                <LabelWithAsterisk>Name EN</LabelWithAsterisk>\r\n                <TextField \r\n                    value={name[MAIN_LANG_KEY]}\r\n                    onChange={this.onNameChange(MAIN_LANG_KEY)}\r\n                    error={validationErrorInSection && !name[MAIN_LANG_KEY]}\r\n                    inputRef={this.decNameEnInputRef}\r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                />\r\n\r\n                { ADDITIONAL_LANGS.map(({ langKey, langName, regionFullName }) => (\r\n                  <React.Fragment key={langKey}>\r\n                    <span>Name {langName}{regionFullName && <span className=\"smallText\"><br/>{regionFullName}</span>}</span>\r\n                    <TextField \r\n                        value={name[langKey]}\r\n                        onChange={this.onNameChange(langKey)}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                    />\r\n                  </React.Fragment>  \r\n                )) }\r\n\r\n                <NewGroupDialog \r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onGroupChange}\r\n                    savedGroup={groupToCreate}\r\n                    groupType=\"decorators\"\r\n                    { ...{ \r\n                        isGroupDialogOpen,\r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return { \r\n        validationErrorInSection: validationError.namesSection,\r\n        formState: form,\r\n        decKey: form.decKey,\r\n        group: form.group,\r\n        active: form.active,\r\n        name: form.name,\r\n        groupToCreate: form.groupToCreate,\r\n        sectionTypes: form.sectionTypes,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeDecKey: setValue(dispatch)(\"decKey\"),\r\n        changeGroup: setValue(dispatch)(\"group\"),\r\n        changeGroupToCreate: setValue(dispatch)(\"groupToCreate\"),\r\n        changeActive: toggleValue(dispatch)(\"active\"),\r\n        changeName: setValue(dispatch)(\"name\"),\r\n        changeSectionTypes: setValue(dispatch)(\"sectionTypes\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(NamesSection)));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\n\r\nconst CustomInputShort = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      borderRadius: 4,\r\n      position: \"relative\",\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #ced4da\",\r\n      fontSize: 16,\r\n      padding: \"10px 26px 10px 12px\",\r\n      transition: theme.transitions.create([\"border-color\", \"box-shadow\"]),\r\n      fontFamily: [\r\n        \"Roboto\",\r\n        \"'Helvetica Neue'\",\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n      \"&:hover\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#212121\",\r\n      },\r\n      \"&:focus\": {\r\n        borderRadius: 4,\r\n        borderColor: \"#2f9aef\",\r\n        boxShadow: \"0 0 0 0.5px #2f9aef\",\r\n      },\r\n    },\r\n  }))(InputBase);\r\n  \r\n  export default CustomInputShort;","import SectionTitle from \"./SectionTitle\";\r\nexport default SectionTitle;","import React from \"react\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst SectionTitle = ({text, children}) => (\r\n    <>\r\n        <div className=\"sectionTitle\">\r\n            <span>{text || children}</span>\r\n        </div>\r\n        <div className=\"spaceHolder\"/>\r\n    </>\r\n);\r\n\r\nexport default SectionTitle;","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst BackSpaceActionInput = withStyles(theme => ({\r\n    root: {\r\n      minWidth: \"175px\",\r\n      width: \"175px\",\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default BackSpaceActionInput;","import PositioningSection from \"./PositioningSection\";\r\nexport default PositioningSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport SectionTitle from \"../../common/SectionTitle\";\r\nimport { backSpaceActionsMap, decoratorsList, GLOBAL_FALLBACK_MARK } from \"../../constants\";\r\nimport BackSpaceActionInput from \"./BackSpaceActionInput\";\r\nimport { setValue, toggleValue } from \"../../actions\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst PositioningSection = props => {\r\n    const {\r\n        indentationalLevel, changeIndentationalLevel,\r\n        fixedIndentation, changeisFixedIndentation,\r\n        softReturn, changeSoftReturn,\r\n        backspaceActionWithContent, changeBackspaceActionWithContent,\r\n        backspaceActionWithContentStyle, changeBackspaceActionWithContentStyle,\r\n        returnActionNextSection, changeReturnActionNextSection,\r\n        returnActionEmptySection, changeReturnActionEmptySection,\r\n        tabAction, changeTabAction,\r\n        shiftTabAction, changeShiftTabAction,\r\n    } = props;\r\n\r\n    const onBackspaceActionChange = e => {\r\n        if (e.target.value === \"apply_other_pd\") {\r\n            changeBackspaceActionWithContentStyle(null, GLOBAL_FALLBACK_MARK);\r\n        } else if (backspaceActionWithContentStyle) {\r\n            changeBackspaceActionWithContentStyle(null, \"\");\r\n        }\r\n        changeBackspaceActionWithContent(e);\r\n    };\r\n\r\n    const backSpaceActionStyleSettingsState = backspaceActionWithContent === \"apply_other_pd\" ? \"shown\" : \"hidden\";\r\n\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>Identational level</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={indentationalLevel}\r\n                    onChange={changeIndentationalLevel}\r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>Fixed indentation</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={fixedIndentation}\r\n                    onChange={changeisFixedIndentation}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n\r\n            <span>Soft return</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={softReturn}\r\n                    onChange={changeSoftReturn}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n            \r\n            <SectionTitle text=\"BACKSPACE\" />\r\n\r\n            <span>At the beginning of a section with content</span>\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <div>\r\n                    <NativeSelect \r\n                        value={backspaceActionWithContent}\r\n                        onChange={onBackspaceActionChange}\r\n                        input={ <BackSpaceActionInput /> }\r\n                    >\r\n                        {Array.from(backSpaceActionsMap).map(([key, value]) => (\r\n                            <option value={key} key={key}>{value}</option>\r\n                        ))}\r\n                    </NativeSelect>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${backSpaceActionStyleSettingsState} wideSelectBox`}>\r\n                    <NativeSelect\r\n                        value={backspaceActionWithContentStyle}\r\n                        onChange={changeBackspaceActionWithContentStyle}\r\n                        input={ <CustomInput /> }\r\n                    >\r\n                        <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                        { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n\r\n            <SectionTitle text=\"RETURN\" />\r\n\r\n\r\n            <span>Style of next section</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={returnActionNextSection}\r\n                    onChange={changeReturnActionNextSection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n            \r\n\r\n            <span>In empty section change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect \r\n                    value={returnActionEmptySection}\r\n                    onChange={changeReturnActionEmptySection}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    <option value={GLOBAL_FALLBACK_MARK}>Global Fallback Style</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <SectionTitle text=\"TAB / SHIFT+TAB\" />\r\n\r\n            <span>TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={tabAction}\r\n                    onChange={changeTabAction}\r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n\r\n            <span>SHIFT+TAB – change current style to</span>\r\n            <div className=\"wideSelectBox\">\r\n                <NativeSelect\r\n                    value={shiftTabAction}\r\n                    onChange={changeShiftTabAction} \r\n                    input={ <CustomInput /> }\r\n                >\r\n                    <option value=\"\">Nothing</option>\r\n                    { decoratorsList.map(dec => <option value={dec.value} key={dec.value}>{dec.name}</option>) }\r\n                </NativeSelect>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        indentationalLevel: form.indentationalLevel,\r\n        backspaceActionWithContent: form.backspaceActionWithContent,\r\n        backspaceActionWithContentStyle: form.backspaceActionWithContentStyle,\r\n        returnActionNextSection: form.returnActionNextSection,\r\n        returnActionEmptySection: form.returnActionEmptySection,\r\n        tabAction: form.tabAction,\r\n        shiftTabAction: form.shiftTabAction,\r\n        fixedIndentation: form.fixedIndentation,\r\n        softReturn: form.softReturn,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeIndentationalLevel: setValue(dispatch)(\"indentationalLevel\"),\r\n        changeBackspaceActionWithContent: setValue(dispatch)(\"backspaceActionWithContent\"),\r\n        changeBackspaceActionWithContentStyle: setValue(dispatch)(\"backspaceActionWithContentStyle\"),\r\n        changeBackspaceActionWithoutContent: setValue(dispatch)(\"backspaceActionWithoutContent\"),\r\n        changeBackspaceActionWithoutContentStyle: setValue(dispatch)(\"backspaceActionWithoutContentStyle\"),\r\n        changeReturnActionNextSection: setValue(dispatch)(\"returnActionNextSection\"),\r\n        changeReturnActionEmptySection: setValue(dispatch)(\"returnActionEmptySection\"),\r\n        changeTabAction: setValue(dispatch)(\"tabAction\"),\r\n        changeShiftTabAction: setValue(dispatch)(\"shiftTabAction\"),\r\n        changeisFixedIndentation: toggleValue(dispatch)(\"fixedIndentation\"),\r\n        changeSoftReturn: toggleValue(dispatch)(\"softReturn\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(PositioningSection));","import { getOffset, getCorrectColor, getPreviewFont } from \"../../helpers\";\r\nimport { alignmentList, DEFAULT_FONT_SIZE, DEFAULT_LINE_SPACING } from \"../../constants\";\r\n\r\nexport const generatePreviewStyle = formState => {\r\n    const {\r\n        font,\r\n        customFont,\r\n        alignment,\r\n        fontSize,\r\n        fontColor,\r\n        bold,\r\n        italic,\r\n        underlined,\r\n        stroke,\r\n        textTransform,\r\n        verticalAlign,\r\n        marginTop,\r\n        marginBottom,\r\n        firstRowIndent,\r\n        otherRowsIndent,\r\n        lineSpacing,\r\n        customLineSpacing,\r\n        wordSpacing,\r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderType,\r\n        borderColor,\r\n        borderThickness,\r\n        fillingColor,\r\n        fillingConnectToPrevious,\r\n        connectToPrevious,\r\n    } = formState;\r\n    \r\n    const previewFontColor = getCorrectColor(fontColor, \"f5f5f5\");\r\n    const previewFillingColor = getCorrectColor(fillingColor, \"f5f5f5\");\r\n    const previewAdditionalFillingColor = fillingConnectToPrevious ? previewFillingColor : \"f5f5f5\";\r\n    const indentsDifference = (firstRowIndent || 0) - (otherRowsIndent || 0);\r\n    const previewMarginLeft = `${!otherRowsIndent ? 0 : (otherRowsIndent >= 6 ? 6 : otherRowsIndent)}cm`;\r\n    const previewTextIndent = `${!indentsDifference ? 0 : (indentsDifference >= 6 ? 6 : indentsDifference)}cm`;\r\n    const previewLineSpacing = lineSpacing !== \"custom\" ? lineSpacing : (customLineSpacing || DEFAULT_LINE_SPACING);\r\n    const offset = getOffset(verticalAlign, fontSize);\r\n    const previewMarginTop = `${(!connectToPrevious ? parseFloat(marginTop) : 0) + offset}pt`;\r\n    const previewMarginBottom = `${(!connectToPrevious ? parseFloat(marginBottom) : 0) - offset}pt`;\r\n    const previewBorderLeft = borderLeft ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderRight = borderRight ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderTop = borderTop ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const previewBorderBottom = borderBottom ? `${borderThickness}pt ${borderType} #${borderColor}` : \"none\";\r\n    const correctFontSize = fontSize <= 120 ? fontSize : 120;\r\n    const previewStyle = {\r\n        fontSize: !fontSize ? `${DEFAULT_FONT_SIZE}pt` : `${correctFontSize}pt`,\r\n        color: `#${previewFontColor}`,\r\n        fontFamily: getPreviewFont(font, customFont),\r\n        alignItems: alignmentList[alignment],\r\n        textAlign: alignment,\r\n        fontWeight: bold ? \"bold\" : \"normal\",\r\n        fontStyle: italic ? \"italic\" : \"normal\",\r\n        textDecoration: `${underlined ? \"underline\" : \"\"}${stroke ? \" line-through\" : \"\"}`.trim() || \"none\",\r\n        verticalAlign,\r\n        textTransform: textTransform !== \"small-caps\" ? textTransform : \"none\",\r\n        fontVariant: textTransform === \"small-caps\" ? textTransform : \"normal\",\r\n        backgroundColor: `#${previewFillingColor}`,\r\n        backgroundImage:  `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        borderImage: `linear-gradient(#${previewAdditionalFillingColor}, #${previewAdditionalFillingColor})`,\r\n        marginLeft: previewMarginLeft,\r\n        textIndent: previewTextIndent,\r\n        wordSpacing: `${wordSpacing || 0}pt`,\r\n        lineHeight: previewLineSpacing,\r\n        marginTop: previewMarginTop,\r\n        marginBottom: previewMarginBottom,\r\n        borderLeft: previewBorderLeft,\r\n        borderRight: previewBorderRight,\r\n        borderTop: previewBorderTop,\r\n        borderBottom: previewBorderBottom,\r\n        outline: \"none\",\r\n        ...borderLeft && { paddingLeft: `${correctFontSize / 3}pt`},\r\n        ...borderRight && { paddingRight: `${correctFontSize / 3}pt`},\r\n        ...borderTop && { paddingTop: `${correctFontSize / 3}pt`},\r\n        ...borderBottom && { paddingBottom: `${correctFontSize / 3}pt`},\r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport const generateSideNumberStyle = formState => {\r\n    const { \r\n        listType,\r\n        suffixDistance,\r\n        sideNumber,\r\n        sideNumberFont,\r\n        customSideNumberFont,\r\n        sideNumberAlignment,\r\n        sideNumberFontSize,\r\n        sideNumberFontColor,\r\n        sideNumberFillingColor,\r\n        sideNumberWidth,\r\n        sideNumberRadius,\r\n        sideNumberBold,\r\n        sideNumberItalic,\r\n        sideNumberUnderlined,\r\n        sideNumberLineHeight,\r\n    } = formState;\r\n\r\n    const previewSideNumberFontColor = getCorrectColor(sideNumberFontColor, \"f5f5f5\");\r\n    const previewSideNumberFillingColor = getCorrectColor(sideNumberFillingColor, \"f5f5f5\");\r\n\r\n    const sideNumberStyle = (!sideNumber || listType === \"unordered\") ? {} : {\r\n        fontFamily: getPreviewFont(sideNumberFont, customSideNumberFont),\r\n        textAlign: sideNumberAlignment,\r\n        fontSize: !sideNumberFontSize ? `${DEFAULT_FONT_SIZE}pt` : `${sideNumberFontSize <= 120 ? sideNumberFontSize : 120}pt`,\r\n        color: `#${previewSideNumberFontColor}`,\r\n        backgroundColor: `#${previewSideNumberFillingColor}`,\r\n        minWidth: `${!sideNumberWidth ? 0 : (sideNumberWidth < 150 ? sideNumberWidth : 150)}pt`,\r\n        borderRadius: `${sideNumberRadius || 0}pt`,\r\n        fontWeight: sideNumberBold ? \"bold\" : \"normal\",\r\n        fontStyle: sideNumberItalic ? \"italic\" : \"normal\",\r\n        textDecoration: sideNumberUnderlined ? \"underline\" : \"none\",\r\n        ...sideNumberLineHeight && { lineHeight: `${sideNumberLineHeight}pt`},\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n    };\r\n\r\n    return sideNumberStyle;\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { generatePreviewStyle, generateSideNumberStyle } from \"./generators\";\r\nimport { getListChars } from \"../../helpers\";\r\nimport { bulletNamesMap } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst ListPreview = props => {\r\n    const { \r\n        formState,\r\n        prefix, \r\n        suffix, \r\n        suffixDistance,\r\n        listType,\r\n        listItem, \r\n        unicodeChar,\r\n        listItemString,\r\n        numberingStyle,\r\n        sideNumber,\r\n        patternMode,\r\n    } = props;\r\n\r\n    const isOrderedList = listType === \"ordered\";\r\n\r\n    let currentBullet;\r\n\r\n    if (listItem === \"custom\") {\r\n        currentBullet = unicodeChar;\r\n    } else if (listItem === \"string\") {\r\n        currentBullet = listItemString;\r\n    } else {\r\n        currentBullet = bulletNamesMap.get(listItem);\r\n    }\r\n\r\n    const listChars = getListChars(isOrderedList, numberingStyle, currentBullet);\r\n\r\n    let listItemBeginnings = (listType === \"ordered\" && patternMode) ? listChars : listChars.map(li => (`${prefix}${li}${suffix}`));\r\n\r\n    const previewStyle = generatePreviewStyle(formState);\r\n    const isSideNumber = isOrderedList && sideNumber;\r\n    const sideNumberStyle = isSideNumber ? generateSideNumberStyle(formState) : {};\r\n    const listItemBeginningStyle = {\r\n        marginRight: `${suffixDistance || 0}cm`,\r\n        ...sideNumberStyle,\r\n    };\r\n\r\n    return (\r\n        <div className=\"preview preview_list\">\r\n            <span className=\"preview-title\">Preview</span>\r\n            <div className=\"preview-content\">\r\n                <div className=\"demonstrationElement\">\r\n                    <div\r\n                        className=\"demonstrationElement-text\"\r\n                        style={previewStyle}\r\n                    >\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[0]}`}</span><span>The first list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[1]}`}</span><span>The second list item</span>\r\n                        </div>\r\n                        <div>\r\n                            <span \r\n                                className=\"listItemBeginning\"\r\n                                style={listItemBeginningStyle}\r\n                            >{`${listItemBeginnings[2]}`}</span><span>The third list item</span>\r\n                        </div>\r\n                        { isSideNumber && (\r\n                            <>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[3]}`}</span><span>One more list item</span>\r\n                                </div>\r\n                                <div>\r\n                                    <span \r\n                                        className=\"listItemBeginning\"\r\n                                        style={listItemBeginningStyle}\r\n                                    >{`${listItemBeginnings[4]}`}</span><span>And one more</span>\r\n                                </div>\r\n                            </>\r\n                        ) }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n        prefix: form.prefix, \r\n        suffix: form.suffix,\r\n        patternMode: form.patternMode,\r\n        suffixDistance: form.suffixDistance,\r\n        listType: form.listType,\r\n        listItem: form.listItem, \r\n        unicodeChar: form.unicodeChar,\r\n        numberingStyle: form.numberingStyle,\r\n        sideNumber: form.sideNumber,\r\n        listItemString: form.listItemString,\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps)(ListPreview));","import ColorField from \"./ColorField\";\r\nexport default ColorField;","import React from \"react\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { getCorrectColor, selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ColorField extends React.PureComponent {\r\n    state = {\r\n        isOpen: this.props.isOpen,\r\n    };\r\n\r\n    hideColorPicker = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    showColorPicker = () => {\r\n        this.setState({ isOpen: true });\r\n    };\r\n\r\n    colorPickerHandler = changeColor => ({ hex }) => {\r\n        changeColor(null, hex);\r\n    };\r\n\r\n    render() {\r\n        const { colorCode, changeColorCode, defaultColorCode, required, bottomAligned } = this.props;\r\n        const correctColor = getCorrectColor(colorCode);\r\n        const colorError = correctColor !== colorCode;\r\n        const inputError = colorError && (required || !!colorCode);\r\n        const pickerColor = colorError ? \"\" : `#${correctColor}`;\r\n        const colorSampleStyle = {\r\n            backgroundColor: `#${correctColor}`,\r\n        };\r\n        const colorPickerClassName = `colorPicker${ bottomAligned ? \" colorPicker_bottomAligned\" : \"\"}`;\r\n\r\n        return (\r\n            <div className=\"colorField\">\r\n                <TextField \r\n                    variant=\"outlined\" \r\n                    margin=\"dense\" \r\n                    className=\"numberInput\" \r\n                    InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">#</InputAdornment>\r\n                    }}\r\n                    value={colorCode}\r\n                    onChange={changeColorCode}\r\n                    onClick={e => { \r\n                        if (defaultColorCode) {\r\n                            selectAllOnClick(defaultColorCode)(e);\r\n                        }\r\n                        // this.showColorPicker(); \r\n                    }}\r\n                    error={inputError}\r\n                />\r\n                <div\r\n                    onClick={this.showColorPicker}\r\n                    className=\"colorSample\" \r\n                    style={colorSampleStyle}\r\n                />\r\n                {this.state.isOpen && (\r\n                    <div className={colorPickerClassName}>\r\n                        <div className=\"colorPicker-chromeBox\">\r\n                            <ChromePicker\r\n                                onChangeComplete={this.colorPickerHandler(changeColorCode)}\r\n                                color={pickerColor}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n                        <div className=\"colorPicker-popOver\"  onClick={this.hideColorPicker}></div>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ColorField;","import React from \"react\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport CustomInput from \"./CustomInput\";\r\nimport { fontSet, DEFAULT_FONT } from \"../constants\";\r\nimport { isFontAvailable, focusInput, changeAndScroll } from \"../helpers\";\r\n\r\nclass FontSelectFields extends React.PureComponent {\r\n    customFontInputRef = React.createRef();\r\n\r\n    onFontChange = e => {\r\n        this.props.changeFont(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customFontInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { font, customFont, changeCustomFont } = this.props;\r\n        const availableFonts = fontSet.filter(fontName => fontName === font || isFontAvailable(fontName));\r\n        const optionalFieldState = font === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        return (\r\n            <>\r\n                <span >Font</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={font}\r\n                    onChange={changeAndScroll(this.onFontChange, 500)}\r\n                >\r\n                    <option value={DEFAULT_FONT}>Helvetica</option>\r\n                    { availableFonts.map(fontName => <option value={fontName} key={fontName}>{fontName}</option>) }\r\n                    <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                </NativeSelect>\r\n    \r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <span></span>\r\n                </div>\r\n                <div className={`optionalField ${optionalFieldState}`}>\r\n                    <TextField \r\n                        value={customFont}\r\n                        onChange={changeCustomFont}\r\n                        variant=\"outlined\" \r\n                        margin=\"dense\"\r\n                        fullWidth\r\n                        placeholder=\"Enter the font name\"\r\n                        inputRef={this.customFontInputRef}\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FontSelectFields;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport ListPreview from \"../../common/Preview/ListPreview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport LabelWithAsterisk from \"../../common/LabelWithAsterisk\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport { \r\n    orderedListStylesMap, \r\n    bulletNamesMap, \r\n    DEFAULT_FONT_SIZE,\r\n    DEFAULT_SIDE_NUMBER_FONT_COLOR,\r\n    DEFAULT_SIDE_NUMBER_FILLING_COLOR,\r\n    DEFAULT_SIDE_NUMBER_WIDTH,\r\n    DEFAULT_SIDE_NUMBER_RADIUS,\r\n } from \"../../constants\";\r\nimport { \r\n    updateValidationError,\r\n    setValue,\r\n    toggleValue,\r\n    setNumber,\r\n    setColor,\r\n    setBullet,\r\n} from \"../../actions\";\r\nimport { \r\n    selectAllOnClick, \r\n    changeAndScroll,\r\n    scrollToBottom,\r\n    focusInput,\r\n    unicodeNumberToChar, \r\n    unicodeCharToNumber, \r\n} from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass ListSection extends React.Component {\r\n    listNameInputRef = React.createRef();\r\n    unicodeCharInputRef = React.createRef();\r\n\r\n    onIsListChange = e => {\r\n        const { listName } = this.props;\r\n        this.props.changeIsList(e);\r\n\r\n        if (e.target.checked && !listName) {\r\n            focusInput(this.listNameInputRef);\r\n        }       \r\n    };\r\n\r\n    onListTypeChange = e => {\r\n        const { suffix, listName, orderLevel } = this.props;\r\n        const { value } = e.target;\r\n\r\n        if (value === \"ordered\" && !orderLevel) {\r\n            this.props.changeOrderLevel(null, \"0\")\r\n        }\r\n\r\n        this.props.changeListType(null, value);\r\n\r\n        if (value === \"ordered\" && !listName) {\r\n            focusInput(this.listNameInputRef);\r\n        } else {\r\n            scrollToBottom(\"content-rightSide\");\r\n        }\r\n        if (value === \"ordered\" && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        } else if (value === \"unordered\" && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        }\r\n    };\r\n\r\n    onListItemChange = e => {\r\n        this.props.changeListItem(e);\r\n        if (e.target.value === \"custom\" && !this.props.unicodeChar) {\r\n            focusInput(this.unicodeCharInputRef);\r\n        }\r\n    };\r\n\r\n    onUnicodeNumberChange = e => {\r\n        const newUnicodeNumber = this.props.changeUnicodeNumber(e);\r\n        const newUnicodeChar = newUnicodeNumber !== \"\" ? unicodeNumberToChar(newUnicodeNumber) : \"\";\r\n        this.props.changeUnicodeChar(null, newUnicodeChar);\r\n    };\r\n    \r\n    onUnicodeCharChange = e => {\r\n        const newUnicodeChar = this.props.changeUnicodeChar(e);\r\n        const newUnicodeNumber = newUnicodeChar !== \"\" ? unicodeCharToNumber(newUnicodeChar) : \"\";\r\n        this.props.changeUnicodeNumber(null, newUnicodeNumber);\r\n    };\r\n\r\n    onSideNumberChange = e => {\r\n        const { suffix } = this.props;\r\n        this.props.changeSideNumber(e);\r\n        if (e.target.checked && suffix === \".\") {\r\n            this.props.changeSuffix(null, \"\");\r\n        } else if (!e.target.checked && suffix === \"\") {\r\n            this.props.changeSuffix(null, \".\");\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevprops) {\r\n        const { isList, listType, listName } = this.props;\r\n        if (this.props.validationErrorInSection && !prevprops.validationErrorInSection) {\r\n            focusInput(this.listNameInputRef);\r\n        }\r\n        if (this.props.validationErrorInSection && (!isList || listType === \"unordered\" || listName)) {\r\n            this.props.updateValidationError({ listSection: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            validationErrorInSection,\r\n            listPreviewProps,\r\n            isList,\r\n            listName, changeListName,\r\n            orderLevel, changeOrderLevel,\r\n            patternMode, changePatternMode,\r\n            listPattern, changeListPattern,\r\n            prefix, changePrefix,\r\n            suffix, changeSuffix,\r\n            suffixDistance, changeSuffixDistance,\r\n            magicTabs, changeMagicTabs,\r\n            listType,\r\n            listItem,\r\n            unicodeNumber,\r\n            unicodeChar,\r\n            listItemString, changeListItemString,\r\n            numberingStyle, changeNumberingStyle,\r\n            continueNumbering, changeContinueNumbering,\r\n            allowRestartNumbering, changeAllowRestartNumbering,\r\n            includePreviousFrom, changeIncludePreviousFrom,\r\n            sideNumber,\r\n            sideNumberFont, changeSideNumberFont,\r\n            customSideNumberFont, changeCustomSideNumberFont,\r\n            sideNumberAlignment, changeSideNumberAlignment,\r\n            sideNumberFontSize, changeSideNumberFontSize,\r\n            sideNumberFontColor, changeSideNumberFontColor,\r\n            sideNumberFillingColor, changeSideNumberFillingColor,\r\n            sideNumberWidth, changeSideNumberWidth,\r\n            sideNumberRadius, changeSideNumberRadius,\r\n            sideNumberBold, changeSideNumberBold,\r\n            sideNumberItalic, changeSideNumberItalic,\r\n            sideNumberUnderlined, changeSideNumberUnderlined,\r\n            sideNumberLineHeight, changeSideNumberLineHeight,\r\n        } = this.props;\r\n        \r\n        const mainListSettingsState = isList ? \"shown\" : \"hidden\";\r\n        const unorderedListSettingsState = (isList && listType === \"unordered\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState = (isList && listType === \"unordered\" && listItem === \"custom\") ? \"shown\" : \"hidden\";\r\n        const customListItemSettingsState2 = (isList && listType === \"unordered\" && listItem === \"string\") ? \"shown\" : \"hidden\";\r\n        const orderedListSettingsState = (isList && listType === \"ordered\") ? \"shown\" : \"hidden\";\r\n        const sideNumberSettingsState = (isList && listType === \"ordered\" && sideNumber) ? \"shown\" : \"hidden\";\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"dialogGrid dialogGrid_2cols\">\r\n                    <div>\r\n                        <div>\r\n                            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth\">\r\n                                <div className=\"listItemSpan\">\r\n                                    <span>Is it a list?</span>\r\n                                </div>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox \r\n                                        color=\"primary\" \r\n                                        checked={isList} \r\n                                        onChange={this.onIsListChange} \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${mainListSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_mediumWidth optionalSettings\">\r\n                                    { listType === \"unordered\" ? (\r\n                                        <span>List name</span>\r\n                                    ) : (\r\n                                        <LabelWithAsterisk>List name</LabelWithAsterisk>\r\n                                    )}\r\n                                    <TextField\r\n                                        value={listName}\r\n                                        onChange={changeListName} \r\n                                        error={validationErrorInSection && !listName}\r\n                                        inputRef={this.listNameInputRef}\r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\" \r\n                                    />\r\n    \r\n                                    <span>Order level</span>\r\n                                    <div>\r\n                                        <NativeSelect\r\n                                            value={orderLevel}\r\n                                            onChange={changeOrderLevel}\r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            { listType !== \"ordered\" && (<option value=\"\">...</option>)}\r\n                                            <option value=\"0\">0</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"2\">2</option>\r\n                                            <option value=\"3\">3</option>\r\n                                            <option value=\"4\">4</option>\r\n                                            <option value=\"5\">5</option>\r\n                                        </NativeSelect>\r\n                                    </div>\r\n\r\n                                    <span>Suffix distance</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <NativeSelect\r\n                                            value={suffixDistance}\r\n                                            onChange={changeSuffixDistance} \r\n                                            input={ <CustomInputShort /> }\r\n                                        >\r\n                                            <option value=\"0.25\">0.25</option>\r\n                                            <option value=\"0.5\">0.5</option>\r\n                                            <option value=\"0.75\">0.75</option>\r\n                                            <option value=\"1\">1</option>\r\n                                            <option value=\"1.25\">1.25</option>\r\n                                            <option value=\"1.5\">1.5</option>\r\n                                            <option value=\"1.75\">1.75</option>\r\n                                            <option value=\"2\">2</option>\r\n                                        </NativeSelect>\r\n                                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                                    </div>\r\n    \r\n                                    <span>Magic Tabs</span>\r\n                                    <div className=\"unlabeledCheckbox\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={magicTabs} \r\n                                            onChange={changeMagicTabs} \r\n                                        />\r\n                                    </div>\r\n    \r\n                                    <span>Type of list</span>\r\n                                    <RadioGroup \r\n                                        value={listType} \r\n                                        onChange={this.onListTypeChange}\r\n                                        row\r\n                                    >\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"unordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Unordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox\">\r\n                                            <FormControlLabel\r\n                                                value=\"ordered\"\r\n                                                control={<Radio color=\"primary\" />}\r\n                                                label=\"Ordered\"\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                    </RadioGroup>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`optionalSettings optionalSettings_${orderedListSettingsState}`}>\r\n                            <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                                <span>Numbering style</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={numberingStyle}\r\n                                        onChange={changeNumberingStyle}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        {Array.from(orderedListStylesMap).map(([key, value]) => (\r\n                                            <option value={key} key={key}>{value}</option>\r\n                                        ))}                                    \r\n                                    </NativeSelect>\r\n                                </div>\r\n                                        \r\n                                <span>Continue numbering after interruption</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={continueNumbering}\r\n                                        onChange={changeContinueNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Allow restart numbering</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={allowRestartNumbering} \r\n                                        onChange={changeAllowRestartNumbering}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                        \r\n                                <span>Include previous levels from</span>\r\n                                <div>\r\n                                    <NativeSelect\r\n                                        value={includePreviousFrom} \r\n                                        onChange={changeIncludePreviousFrom}\r\n                                        input={ <CustomInputShort /> }\r\n                                    >\r\n                                        <option value=\"\">...</option>\r\n                                        <option value=\"0\">0</option>\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </NativeSelect>\r\n                                </div>\r\n                                \r\n                                <span>Advanced list pattern settings</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Switch\r\n                                        checked={patternMode}\r\n                                        onChange={changePatternMode}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                { !patternMode ? (\r\n                                    <>\r\n                                        <span>Prefix</span>\r\n                                        <TextField\r\n                                            value={prefix}\r\n                                            onChange={changePrefix} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                        />\r\n        \r\n                                        <span>Suffix</span>\r\n                                        <TextField\r\n                                            value={suffix}\r\n                                            onChange={changeSuffix} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            onClick={selectAllOnClick(\".\")}\r\n                                        />\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <span>Ordered list pattern</span>\r\n                                        <TextField\r\n                                            value={listPattern}\r\n                                            onChange={changeListPattern} \r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            onClick={selectAllOnClick(\".\")}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                                \r\n                                        \r\n                                <span>Side number</span>\r\n                                <div className=\"unlabeledCheckbox\">\r\n                                    <Checkbox\r\n                                        checked={sideNumber}\r\n                                        onChange={changeAndScroll(this.onSideNumberChange)}\r\n                                        color=\"primary\" \r\n                                    />\r\n                                </div>\r\n                                { (patternMode && !sideNumber) && (<div />)}\r\n                            </div> \r\n    \r\n                            <div className={`optionalSettings optionalSettings_main optionalSettings_${sideNumberSettingsState}`}>\r\n                                <div className=\"flexibleGrid listTypeSettings\">\r\n                                    <FontSelectFields \r\n                                        font={sideNumberFont}\r\n                                        changeFont={changeSideNumberFont}\r\n                                        customFont={customSideNumberFont}\r\n                                        changeCustomFont={changeCustomSideNumberFont}\r\n                                    />\r\n                            \r\n                                    <span>Alignment</span>\r\n                                    <NativeSelect \r\n                                        value={sideNumberAlignment}\r\n                                        onChange={changeSideNumberAlignment}\r\n                                        input={ <CustomInput /> }\r\n                                    >\r\n                                        <option value={\"left\"}>Left</option>\r\n                                        <option value={\"center\"}>Center</option>\r\n                                        <option value={\"right\"}>Right</option>\r\n                                    </NativeSelect>\r\n                            \r\n                                    <span>Font size</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberFontSize}\r\n                                            onChange={changeSideNumberFontSize}\r\n                                            onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>      \r\n                            \r\n                                    <span>Font color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFontColor} \r\n                                        changeColorCode={changeSideNumberFontColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FONT_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n                                        \r\n                                    <span>Filling color</span>\r\n                                    <ColorField \r\n                                        colorCode={sideNumberFillingColor} \r\n                                        changeColorCode={changeSideNumberFillingColor}\r\n                                        defaultColorCode={DEFAULT_SIDE_NUMBER_FILLING_COLOR}\r\n                                        bottomAligned\r\n                                    />\r\n    \r\n                                    <span>Width</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberWidth}\r\n                                            onChange={changeSideNumberWidth}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_WIDTH)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span>Line height</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberLineHeight}\r\n                                            onChange={changeSideNumberLineHeight}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>  \r\n                                        \r\n                                    <span>Radius</span>\r\n                                    <div className=\"inputWithAdornment\">\r\n                                        <TextField \r\n                                            value={sideNumberRadius}\r\n                                            onChange={changeSideNumberRadius}\r\n                                            onClick={selectAllOnClick(DEFAULT_SIDE_NUMBER_RADIUS)}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                            className=\"numberInput\"\r\n                                        />                                            \r\n                                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                                    </div>\r\n\r\n                                    <span className=\"stylingsSpan\">Stylings</span>\r\n                                    <div className=\"checkBoxesSet\">\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberBold}\r\n                                                onChange={changeSideNumberBold}\r\n                                                label=\"Bold\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                                            <FormControlLabel\r\n                                                checked={sideNumberItalic}\r\n                                                onChange={changeSideNumberItalic}\r\n                                                label=\"Italic\"\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                labelPlacement=\"end\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                                            <FormControlLabel\r\n                                                control={<Checkbox color=\"primary\" />}\r\n                                                label=\"Underlined\"\r\n                                                labelPlacement=\"end\"\r\n                                                checked={sideNumberUnderlined}\r\n                                                onChange={changeSideNumberUnderlined}\r\n                                            />\r\n                                        </div>\r\n                                    </div>  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className={`listPreviewBox optionalSettings optionalSettings_${mainListSettingsState}`}>\r\n                        <ListPreview {...listPreviewProps} />\r\n                    </div>\r\n                </div>\r\n                <div className={`optionalSettings optionalSettings_${unorderedListSettingsState}`}>\r\n                    <div className=\"dialogGrid dialogGrid_2cols listTypeSettings\">\r\n                        <div className=\"dialogGrid dialogGrid_2cols\">\r\n                            <span className=\"listItemSpan\">List item</span>\r\n                            <div className=\"listItemSelect\">\r\n                                <NativeSelect \r\n                                    value={listItem} \r\n                                    onChange={this.onListItemChange} \r\n                                    input={ <CustomInputShort /> }\r\n                                >\r\n                                    { \r\n                                        Array.from(bulletNamesMap).map(([key, value]) => {\r\n                                            return (<option key={key} value={key}>{value}</option>) \r\n                                        })\r\n                                    }\r\n                                    <option value={\"custom\"} className=\"highlightedOption\">Custom bullet</option>\r\n                                    <option value={\"string\"} className=\"highlightedOption\">Custom string</option>\r\n                                </NativeSelect>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={`optionalSettings optionalSettings_${customListItemSettingsState}`}>\r\n                                <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Unicode number</span>\r\n                                        <div>\r\n                                            <TextField  \r\n                                                value={unicodeNumber}\r\n                                                onChange={this.onUnicodeNumberChange}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"unicodeInput\" \r\n                                                InputProps={{\r\n                                                    startAdornment: <InputAdornment position=\"start\">u+</InputAdornment>\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dialogGrid dialogGrid_2cols dialogGrid_leftIndented\">\r\n                                        <span>Char</span>\r\n                                        <div>\r\n                                            <TextField \r\n                                                value={unicodeChar}\r\n                                                onChange={this.onUnicodeCharChange}\r\n                                                onClick={selectAllOnClick()}\r\n                                                inputRef={this.unicodeCharInputRef}\r\n                                                variant=\"outlined\" \r\n                                                margin=\"dense\" \r\n                                                className=\"bulletInput\" \r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div> \r\n                            </div>\r\n                            <div className={`optionalSettings optionalSettings_${customListItemSettingsState2}`}>\r\n                                <div className=\"listItemCustomString\">\r\n                                    <div className=\"dialogGrid dialogGrid_1col dialogGrid_leftIndented\">\r\n                                        <TextField\r\n                                            value={listItemString}\r\n                                            onChange={changeListItemString}\r\n                                            variant=\"outlined\" \r\n                                            margin=\"dense\" \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, validationError }}) => {\r\n    return {\r\n        validationErrorInSection: validationError.listSection,\r\n        formState: form,\r\n        isList: form.isList,\r\n        listName: form.listName, \r\n        orderLevel: form.orderLevel,\r\n        suffixDistance: form.suffixDistance,\r\n        magicTabs: form.magicTabs,\r\n        listType: form.listType,\r\n        listItem: form.listItem,\r\n        unicodeNumber: form.unicodeNumber,\r\n        unicodeChar: form.unicodeChar,\r\n        listItemString: form.listItemString,\r\n        numberingStyle: form.numberingStyle,\r\n        continueNumbering: form.continueNumbering,\r\n        allowRestartNumbering: form.allowRestartNumbering,\r\n        includePreviousFrom: form.includePreviousFrom,\r\n        patternMode: form.patternMode,\r\n        listPattern: form.listPattern,\r\n        prefix: form.prefix,\r\n        suffix: form.suffix,\r\n        sideNumber: form.sideNumber,\r\n        sideNumberFont: form.sideNumberFont,\r\n        customSideNumberFont: form.customSideNumberFont,\r\n        sideNumberAlignment: form.sideNumberAlignment,\r\n        sideNumberFontSize: form.sideNumberFontSize,\r\n        sideNumberFontColor: form.sideNumberFontColor,\r\n        sideNumberFillingColor: form.sideNumberFillingColor,\r\n        sideNumberWidth: form.sideNumberWidth,\r\n        sideNumberRadius: form.sideNumberRadius,\r\n        sideNumberBold: form.sideNumberBold,\r\n        sideNumberItalic: form.sideNumberItalic,\r\n        sideNumberUnderlined: form.sideNumberUnderlined,\r\n        sideNumberLineHeight: form.sideNumberLineHeight,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        changeListName: setValue(dispatch)(\"listName\"),\r\n        changeIsList: toggleValue(dispatch)(\"isList\"),\r\n        changeOrderLevel: setValue(dispatch)(\"orderLevel\"),\r\n        changeSuffixDistance: setValue(dispatch)(\"suffixDistance\"),\r\n        changeMagicTabs: toggleValue(dispatch)(\"magicTabs\"),\r\n        changeListType: setValue(dispatch)(\"listType\"),\r\n        changeListItem: setValue(dispatch)(\"listItem\"),\r\n        changeUnicodeNumber: setColor(dispatch)(\"unicodeNumber\"),\r\n        changeUnicodeChar: setBullet(dispatch)(\"unicodeChar\"),\r\n        changeListItemString: setValue(dispatch)(\"listItemString\"),\r\n        changeNumberingStyle: setValue(dispatch)(\"numberingStyle\"),\r\n        changeContinueNumbering: toggleValue(dispatch)(\"continueNumbering\"),\r\n        changeAllowRestartNumbering: toggleValue(dispatch)(\"allowRestartNumbering\"),\r\n        changeIncludePreviousFrom: setValue(dispatch)(\"includePreviousFrom\"),\r\n        changeListPattern: setValue(dispatch)(\"listPattern\"),\r\n        changePrefix: setValue(dispatch)(\"prefix\"),\r\n        changeSuffix: setValue(dispatch)(\"suffix\"),\r\n        changePatternMode: toggleValue(dispatch)(\"patternMode\"),\r\n        changeSideNumber: toggleValue(dispatch)(\"sideNumber\"),\r\n        changeSideNumberFont: setValue(dispatch)(\"sideNumberFont\"),\r\n        changeCustomSideNumberFont: setValue(dispatch)(\"customSideNumberFont\"),\r\n        changeSideNumberAlignment: setValue(dispatch)(\"sideNumberAlignment\"),\r\n        changeSideNumberFontSize: setNumber(dispatch)(\"sideNumberFontSize\"),\r\n        changeSideNumberFontColor: setColor(dispatch)(\"sideNumberFontColor\"),\r\n        changeSideNumberFillingColor: setColor(dispatch)(\"sideNumberFillingColor\"),\r\n        changeSideNumberWidth: setNumber(dispatch)(\"sideNumberWidth\"),\r\n        changeSideNumberRadius: setNumber(dispatch)(\"sideNumberRadius\"),\r\n        changeSideNumberBold: toggleValue(dispatch)(\"sideNumberBold\"),\r\n        changeSideNumberItalic: toggleValue(dispatch)(\"sideNumberItalic\"),\r\n        changeSideNumberUnderlined: toggleValue(dispatch)(\"sideNumberUnderlined\"),\r\n        changeSideNumberLineHeight: setNumber(dispatch)(\"sideNumberLineHeight\"),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListSection);","import ListSection from \"./ListSection\";\r\nexport default ListSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport CustomInput from \"../common/CustomInput\";\r\nimport NewGroupDialog from \"../common/NewGroupDialog\";\r\nimport withNewGroupControl from \"../hoc/withNewGroupControl\";\r\nimport { setValue } from \"../actions\";\r\nimport { MAIN_LANG_KEY } from \"../constants\";\r\n\r\nclass ReferencingSection extends React.Component {\r\n    onXrefChange = (e, xrefName, xref) => {\r\n        if (xref) {\r\n            this.props.changeReferenceGroupToCreate(null, xref);\r\n        }\r\n        this.props.changeReferenceGroup(e, xrefName);\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            referenceGroupToCreate, \r\n            isGroupDialogOpen,\r\n            hasGroupDialogValidationError,  \r\n            openGroupDialog, \r\n            closeGroupDialog, \r\n            showGroupDialogValidationError, \r\n            hideGroupDialogValidationError,\r\n            referenceGroup,\r\n        } = this.props;\r\n        \r\n        const newGroupName = referenceGroupToCreate[MAIN_LANG_KEY] || referenceGroupToCreate.groupKey;\r\n        const isEditMode = !!newGroupName;\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols\">\r\n                <span>Reference group</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        input={ <CustomInput /> } \r\n                        value={referenceGroup} \r\n                        onChange={this.onXrefChange} \r\n                    >\r\n                        { isEditMode && <option className=\"highlightedOption\" value={newGroupName}>{newGroupName}</option> }\r\n                        <option value=\"\">none</option>\r\n                        <option value=\"0\">Reference group 1</option>\r\n                        <option value=\"1\">Reference group 2</option>\r\n                    </NativeSelect>\r\n                    {\r\n                        !(isEditMode && referenceGroup !== newGroupName) &&\r\n                        <Button color=\"primary\" className=\"textButton\" onClick={openGroupDialog}>\r\n                            { isEditMode ? \"Edit new group\" : \"+New\" }\r\n                        </Button>\r\n                     }\r\n                </div>\r\n                <NewGroupDialog\r\n                    isOpen={isGroupDialogOpen}\r\n                    saveGroup={this.onXrefChange}\r\n                    savedGroup={referenceGroupToCreate}\r\n                    groupType=\"xref\" \r\n                    { ...{ \r\n                        isEditMode,\r\n                        hasGroupDialogValidationError,\r\n                        closeGroupDialog, \r\n                        showGroupDialogValidationError, \r\n                        hideGroupDialogValidationError, \r\n                    } }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        referenceGroup: form.referenceGroup,\r\n        referenceGroupToCreate: form.referenceGroupToCreate,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeReferenceGroup: setValue(dispatch)(\"referenceGroup\"),\r\n        changeReferenceGroupToCreate: setValue(dispatch)(\"referenceGroupToCreate\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(withNewGroupControl(ReferencingSection)));","import * as React from \"react\";\r\nimport deepEqual from \"fast-deep-equal\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n  var t = {};\r\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n      t[p] = s[p];\r\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n      for (var i = 0, q = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n          if (e.indexOf(q[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, q[i]))\r\n              t[q[i]] = s[q[i]];\r\n      }\r\n  return t;\r\n};\r\n\r\nfunction normalizeHtml(str) {\r\n  return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \");\r\n}\r\nfunction findLastTextNode(node) {\r\n  if (node.nodeType === Node.TEXT_NODE)\r\n      return node;\r\n  let children = node.childNodes;\r\n  for (let i = children.length - 1; i >= 0; i--) {\r\n      let textNode = findLastTextNode(children[i]);\r\n      if (textNode !== null)\r\n          return textNode;\r\n  }\r\n  return null;\r\n}\r\nfunction replaceCaret(el) {\r\n  // Place the caret at the end of the element\r\n  const target = findLastTextNode(el);\r\n  // do not move caret if element was not focused\r\n  const isTargetFocused = document.activeElement === el;\r\n  if (target !== null && target.nodeValue !== null && isTargetFocused) {\r\n      var sel = window.getSelection();\r\n      if (sel !== null) {\r\n          var range = document.createRange();\r\n          range.setStart(target, target.nodeValue.length);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n      }\r\n      if (el instanceof HTMLElement)\r\n          el.focus();\r\n  }\r\n}\r\n/**\r\n* A simple component for an html element with editable contents.\r\n*/\r\nexport default class ContentEditable extends React.Component {\r\n  constructor() {\r\n      super(...arguments);\r\n      this.lastHtml = this.props.html;\r\n      this.el = typeof this.props.innerRef === \"function\" ? { current: null } : React.createRef();\r\n      this.getEl = () => (this.props.innerRef && typeof this.props.innerRef !== \"function\" ? this.props.innerRef : this.el).current;\r\n      this.emitChange = (originalEvt) => {\r\n          const el = this.getEl();\r\n          if (!el)\r\n              return;\r\n          const html = el.innerHTML;\r\n          if (this.props.onChange && html !== this.lastHtml) {\r\n              // Clone event with Object.assign to avoid\r\n              // \"Cannot assign to read only property 'target' of object\"\r\n              const evt = Object.assign({}, originalEvt, {\r\n                  target: {\r\n                      value: html\r\n                  }\r\n              });\r\n              this.props.onChange(evt);\r\n          }\r\n          this.lastHtml = html;\r\n      };\r\n  }\r\n  render() {\r\n      const _a = this.props, { tagName, html, innerRef } = _a, props = __rest(_a, [\"tagName\", \"html\", \"innerRef\"]);\r\n      return React.createElement(tagName || \"table\", Object.assign({}, props, { ref: typeof innerRef === \"function\" ? (current) => {\r\n              innerRef(current);\r\n              this.el.current = current;\r\n          } : innerRef || this.el, onInput: this.emitChange, onBlur: this.props.onBlur || this.emitChange, onKeyUp: this.props.onKeyUp || this.emitChange, onKeyDown: this.props.onKeyDown || this.emitChange, contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: html } }), this.props.children);\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n      const { props } = this;\r\n      const el = this.getEl();\r\n      // We need not rerender if the change of props simply reflects the user's edits.\r\n      // Rerendering in this case would make the cursor/caret jump\r\n      // Rerender if there is no element yet... (somehow?)\r\n      if (!el)\r\n          return true;\r\n      // ...or if html really changed... (programmatically, not by user edit)\r\n      if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\r\n          return true;\r\n      }\r\n      // Handle additional properties\r\n      return props.disabled !== nextProps.disabled ||\r\n          props.tagName !== nextProps.tagName ||\r\n          props.className !== nextProps.className ||\r\n          props.innerRef !== nextProps.innerRef ||\r\n          !deepEqual(props.style, nextProps.style);\r\n  }\r\n  componentDidUpdate() {\r\n      const el = this.getEl();\r\n      if (!el)\r\n          return;\r\n      // Perhaps React (whose VDOM gets outdated because we often prevent\r\n      // rerendering) did not update the DOM. So we update it manually now.(?!(?:<br \\/>|<br>|<br\\/>)$)<(.*?)>\r\n      if (this.props.html !== el.innerHTML) {\r\n          el.innerHTML = this.lastHtml = this.props.html;\r\n      }\r\n      replaceCaret(el);\r\n  }\r\n}\r\nContentEditable.propTypes = {\r\n  html: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  disabled: PropTypes.bool,\r\n  tagName: PropTypes.string,\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([\r\n      PropTypes.object,\r\n      PropTypes.func,\r\n  ])\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContentEditable from \"../ContentEditable\";\r\nimport { generatePreviewStyle } from \"./generators\";\r\nimport { setValue } from \"../../actions\";\r\nimport { selectAllEditableContent, getUnstyledText } from \"../../helpers\"\r\n\r\nimport \"./style.css\";\r\n\r\nclass Preview extends React.Component {\r\n    onPreviewTextChange = e => {\r\n        const { value } = e.target;\r\n        if (value && value !== \"<div></div>\" && value !== \"<br>\") {\r\n            this.props.changePreviewText(null, getUnstyledText(value));\r\n        } else {\r\n            this.props.changePreviewText(null, `<div><br></div>`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const previewStyle = generatePreviewStyle(this.props.formState);\r\n        const { previewText } = this.props;\r\n    \r\n        return (\r\n            <div className=\"preview\">\r\n                <span className=\"preview-title\">Preview</span>\r\n                <div \r\n                    className=\"preview-content preview-content_withPointer\" \r\n                    onClick={selectAllEditableContent(\"demonstrationElement\")}\r\n                >\r\n                    <div className=\"demonstrationElement\">\r\n                        <ContentEditable\r\n                            className=\"demonstrationElement-text\"\r\n                            onChange={this.onPreviewTextChange} \r\n                            html={previewText}\r\n                            style={previewStyle}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        previewText: form.previewText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changePreviewText: setValue(dispatch)(\"previewText\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(Preview));","import Preview from \"./Preview.js\";\r\nexport default Preview;","import TypographySection from \"./TypographySection\";\r\nexport default TypographySection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n\r\nimport Preview from \"../../common/Preview\";\r\nimport CustomInput from \"../../common/CustomInput\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport FontSelectFields from \"../../common/FontSelectFields\";\r\nimport {  setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { DEFAULT_FONT_SIZE, DEFAULT_FONT_COLOR } from \"../../constants\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst TypographySection = props => {\r\n    const { \r\n        previewProps,\r\n        font, changeFont,\r\n        customFont, changeCustomFont,\r\n        alignment, changeAlignment,\r\n        fontSize, changeFontSize,\r\n        fontColor, changeFontColor,\r\n        bold, changeBold,\r\n        italic, changeItalic,\r\n        underlined, changeUnderlined,         \r\n        stroke, changeStroke,\r\n        textTransform, changeTextTransform,\r\n        verticalAlign, changeVerticalAlign,\r\n        readOnly, changeReadOnly,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <div className=\"flexibleGrid\">\r\n                <FontSelectFields { ...{ font, changeFont, customFont, changeCustomFont }} />\r\n                \r\n                <span>Alignment</span>\r\n                <NativeSelect \r\n                    input={ <CustomInput /> }\r\n                    value={alignment}\r\n                    onChange={changeAlignment}\r\n                >\r\n                    <option value={\"left\"}>Left</option>\r\n                    <option value={\"center\"}>Center</option>\r\n                    <option value={\"right\"}>Right</option>\r\n                    <option value={\"justify\"}>Justified</option>\r\n                </NativeSelect>\r\n\r\n                <span>Font size</span>\r\n                <div className=\"inputWithAdornment\">\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        margin=\"dense\" \r\n                        className=\"numberInput\"\r\n                        value={fontSize}\r\n                        onChange={changeFontSize}\r\n                        onClick={selectAllOnClick(DEFAULT_FONT_SIZE)}\r\n                    />                                            \r\n                    <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                </div>      \r\n\r\n                <span>Font color</span>\r\n                <ColorField \r\n                    colorCode={fontColor} \r\n                    changeColorCode={changeFontColor}\r\n                    defaultColorCode={DEFAULT_FONT_COLOR}\r\n                    required\r\n                />\r\n\r\n                <span>Sub/Superscript</span>\r\n                <div>\r\n                    <NativeSelect \r\n                        value={verticalAlign} \r\n                        onChange={changeVerticalAlign}\r\n                        input={ <CustomInput /> } \r\n                    >\r\n                        <option value=\"baseline\">None</option>\r\n                        <option value=\"sub\">Subscript</option>\r\n                        <option value=\"super\">Superscript</option>\r\n                    </NativeSelect>\r\n                </div>\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n        </div>\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_topIndented\">\r\n            <span className=\"stylingsSpan\">Stylings</span>\r\n            <div className=\"checkBoxesSet\">\r\n                <div className=\"labeledCheckbox labeledCheckbox_bold\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Bold\"\r\n                        labelPlacement=\"end\"\r\n                        checked={bold}\r\n                        onChange={changeBold}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_italic\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Italic\"\r\n                        labelPlacement=\"end\"\r\n                        checked={italic}\r\n                        onChange={changeItalic}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_underlined\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Underlined\"\r\n                        labelPlacement=\"end\"\r\n                        checked={underlined}\r\n                        onChange={changeUnderlined}\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_stroke\">\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"Stroke\"\r\n                        labelPlacement=\"end\"\r\n                        checked={stroke}\r\n                        onChange={changeStroke}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <span>Text transform</span>\r\n            <RadioGroup \r\n                value={textTransform} \r\n                onChange={changeTextTransform} \r\n                row\r\n            >\r\n                <div className=\"labeledCheckbox\">\r\n                    <FormControlLabel\r\n                        value=\"none\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"None\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_uppercase\">\r\n                    <FormControlLabel\r\n                        value=\"uppercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Uppercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_lowercase\">\r\n                    <FormControlLabel\r\n                        value=\"lowercase\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Lowercase\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n                <div className=\"labeledCheckbox labeledCheckbox_smallCaps\">\r\n                    <FormControlLabel\r\n                        value=\"small-caps\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label=\"Small caps\"\r\n                        labelPlacement=\"end\"\r\n                    />\r\n                </div>\r\n            </RadioGroup>\r\n\r\n            <span>Read only</span>\r\n            <div className=\"unlabeledCheckbox\">\r\n                <Checkbox \r\n                    checked={readOnly}\r\n                    onChange={changeReadOnly}\r\n                    color=\"primary\" \r\n                />\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        font: form.font,\r\n        customFont: form.customFont,\r\n        alignment: form.alignment,\r\n        fontSize: form.fontSize,\r\n        fontColor: form.fontColor,\r\n        bold: form.bold,\r\n        italic: form.italic,\r\n        underlined: form.underlined,\r\n        stroke: form.stroke,\r\n        textTransform: form.textTransform,\r\n        verticalAlign: form.verticalAlign,\r\n        readOnly: form.readOnly,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeFont: setValue(dispatch)(\"font\"),\r\n        changeCustomFont: setValue(dispatch)(\"customFont\"),\r\n        changeAlignment: setValue(dispatch)(\"alignment\"),\r\n        changeFontSize: setNumber(dispatch)(\"fontSize\"),\r\n        changeFontColor: setColor(dispatch)(\"fontColor\"),\r\n        changeBold: toggleValue(dispatch)(\"bold\"),\r\n        changeItalic: toggleValue(dispatch)(\"italic\"),\r\n        changeUnderlined: toggleValue(dispatch)(\"underlined\"),\r\n        changeStroke: toggleValue(dispatch)(\"stroke\"),\r\n        changeTextTransform: setValue(dispatch)(\"textTransform\"),\r\n        changeVerticalAlign: setValue(dispatch)(\"verticalAlign\"),\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeReadOnly: toggleValue(dispatch)(\"readOnly\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TypographySection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { toggleValue } from \"../actions\";\r\n\r\nconst ConnectToPreviousField = ({ connectToPrevious, changeConnectToPrevious }) => (\r\n    <>\r\n        <span>Merge sections</span>\r\n        <div className=\"unlabeledCheckbox\">\r\n            <Checkbox \r\n                checked={connectToPrevious}\r\n                onChange={changeConnectToPrevious}\r\n                color=\"primary\" \r\n            />\r\n        </div>\r\n    </>\r\n);\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeConnectToPrevious: toggleValue(dispatch)(\"connectToPrevious\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ConnectToPreviousField));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport Preview from \"../common/Preview\";\r\nimport { setValue, setNumber } from \"../actions\";\r\nimport { DEFAULT_MARGIN, DEFAULT_WORD_SPACING } from \"../constants\";\r\nimport { selectAllOnClick, focusInput, changeAndScroll } from \"../helpers\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\n\r\nclass DistancesSection extends React.Component {\r\n    customLineSpacingInputRef = React.createRef();\r\n\r\n    onLineSpacingChange = e => {\r\n        this.props.changeLineSpacing(e);\r\n        if (e.target.value === \"custom\") {\r\n            focusInput(this.customLineSpacingInputRef);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            previewProps,\r\n            connectToPrevious,\r\n            marginTop, changeMarginTop,\r\n            marginBottom, changeMarginBottom,\r\n            firstRowIndent, changeFirstRowIndent,\r\n            otherRowsIndent, changeOtherRowsIndent,\r\n            lineSpacing,\r\n            customLineSpacing, changeCustomLineSpacing,\r\n            wordSpacing, changeWordSpacing,\r\n        } = this.props;\r\n\r\n        const customLineSpacingFieldState = lineSpacing === \"custom\" ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n        const marginFieldsState = !connectToPrevious ? \"optionalField_shown\" : \"optionalField_hidden\";\r\n\r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div className=\"flexibleGrid\">\r\n                    <ConnectToPreviousField />\r\n                    <div className={`optionalField optionalField ${marginFieldsState}`}>\r\n                      <span>Margin top</span>\r\n                    </div>\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginTop}\r\n                            onChange={changeMarginTop}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <div className={`optionalField ${marginFieldsState}`}>\r\n                        <span>Margin bottom</span>\r\n                    </div>\r\n\r\n                    <div className={`inputWithAdornment optionalField ${marginFieldsState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={marginBottom}\r\n                            onChange={changeMarginBottom}\r\n                            onClick={selectAllOnClick(DEFAULT_MARGIN)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n    \r\n                    <span>1st row indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={firstRowIndent}\r\n                            onChange={changeFirstRowIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Other rows indent</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={otherRowsIndent}\r\n                            onChange={changeOtherRowsIndent}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">cm</InputAdornment>\r\n                    </div>\r\n    \r\n                    <span>Line spacing</span>\r\n                    <div>\r\n                        <NativeSelect \r\n                            input={ <CustomInputShort /> } \r\n                            value={lineSpacing} \r\n                            onChange={changeAndScroll(this.onLineSpacingChange, 500)} \r\n                        >\r\n                            <option value=\"1.0\">1.0</option>\r\n                            <option value=\"1.15\">1.15</option>\r\n                            <option value=\"1.5\">1.5</option>\r\n                            <option value=\"2.0\">2.0</option>\r\n                            <option value=\"2.5\">2.5</option>\r\n                            <option value=\"3.0\">3.0</option>\r\n                            <option value=\"custom\" className=\"highlightedOption\">Custom</option>\r\n                        </NativeSelect> \r\n                    </div>\r\n\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                    </div>\r\n                    <div className={`optionalField ${customLineSpacingFieldState}`}>\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={customLineSpacing}\r\n                            onChange={changeCustomLineSpacing}\r\n                            placeholder=\"Your value\"\r\n                            inputRef={this.customLineSpacingInputRef}\r\n                        />                                            \r\n                    </div>\r\n                        \r\n                    <span>Word spacing</span>\r\n                    <div className=\"inputWithAdornment\">\r\n                        <TextField \r\n                            variant=\"outlined\" \r\n                            margin=\"dense\" \r\n                            className=\"numberInput\"\r\n                            value={wordSpacing}\r\n                            onChange={changeWordSpacing}\r\n                            onClick={selectAllOnClick(DEFAULT_WORD_SPACING)}\r\n                        />                                            \r\n                        <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                    </div> \r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        connectToPrevious: form.connectToPrevious,\r\n        marginTop: form.marginTop,\r\n        marginBottom: form.marginBottom,\r\n        firstRowIndent: form.firstRowIndent,\r\n        otherRowsIndent: form.otherRowsIndent,\r\n        lineSpacing: form.lineSpacing,\r\n        customLineSpacing: form.customLineSpacing,\r\n        wordSpacing: form.wordSpacing,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeMarginTop: setNumber(dispatch)(\"marginTop\"),\r\n        changeMarginBottom: setNumber(dispatch)(\"marginBottom\"),\r\n        changeFirstRowIndent: setNumber(dispatch)(\"firstRowIndent\"),\r\n        changeOtherRowsIndent: setNumber(dispatch)(\"otherRowsIndent\"),\r\n        changeLineSpacing: setValue(dispatch)(\"lineSpacing\"),\r\n        changeCustomLineSpacing: setNumber(dispatch)(\"customLineSpacing\"),\r\n        changeWordSpacing: setNumber(dispatch)(\"wordSpacing\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(DistancesSection));","import { withStyles } from \"@material-ui/core/styles\";\r\nimport CustomInputShort from \"../../common/CustomInputShort\";\r\n\r\nconst FrameTypeInput = withStyles(theme => ({\r\n    root: {\r\n      width: \"110px\",\r\n      \"label + &\": {\r\n        marginTop: theme.spacing(3),\r\n      },\r\n    },\r\n    input: {\r\n      fontFamily: [\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n      ].join(\",\"),\r\n    },\r\n  }))(CustomInputShort);\r\n  \r\n  export default FrameTypeInput;","import { getCorrectColor } from \"../../helpers\";\r\n\r\nconst generateBorderPreviewStyle = formState => {\r\n    const { \r\n        borderLeft,\r\n        borderRight,\r\n        borderTop,\r\n        borderBottom,\r\n        borderColor,\r\n        borderThickness,\r\n        borderType,\r\n    } = formState;\r\n\r\n    const correctColor = getCorrectColor(borderColor);\r\n    const previewBorderWidth = borderThickness && !isNaN(parseFloat(borderThickness))\r\n                                ? `${borderThickness <= 15 ? borderThickness : 15}pt`\r\n                                : \"0\";\r\n\r\n    const previewStyle = {\r\n        borderLeft: borderLeft ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginLeft: borderLeft ? \"0\" : previewBorderWidth, \r\n        borderRight: borderRight ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginRight: borderRight ? \"0\" : previewBorderWidth, \r\n        borderTop: borderTop ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginTop: borderTop ? \"0\" : previewBorderWidth, \r\n        borderBottom: borderBottom ? `${previewBorderWidth} ${borderType} #${correctColor}` : \"none\",\r\n        marginBottom: borderBottom ? \"0\" : previewBorderWidth, \r\n    };\r\n\r\n    return previewStyle;\r\n};\r\n\r\nexport default generateBorderPreviewStyle;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nimport FrameTypeInput from \"../../sections/FramesSection/FrameTypeInput\";\r\nimport Preview from \"../../common/Preview\";\r\nimport ColorField from \"../../common/ColorField\";\r\nimport ConnectToPreviousField from \"../../common/ConnectToPreviousField\";\r\nimport generateBorderPreviewStyle from \"./generateBorderPreviewStyle\";\r\nimport { setValue, toggleValue, setNumber, setColor } from \"../../actions\";\r\nimport { selectAllOnClick } from \"../../helpers\";\r\nimport { DEFAULT_BORDER_COLOR, DEFAULT_BORDER_THICKNESS } from \"../../constants\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass FramesSection extends React.Component {\r\n    onBorderTypeChange = e => {\r\n        this.props.changeBorderType(e);\r\n        if (e.target.value === \"double\" && this.props.borderThickness === \"2\") {\r\n            this.props.changeBorderThickness(null, \"3\");\r\n        } else if (e.target.value !== \"double\" && this.props.borderThickness === \"3\") {\r\n            this.props.changeBorderThickness(null, \"2\");\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { \r\n            previewProps,\r\n            formState,\r\n            borderLeft, changeBorderLeft, \r\n            borderRight, changeBorderRight,\r\n            borderTop, changeBorderTop, \r\n            borderBottom, changeBorderBottom, \r\n            borderColor, changeBorderColor,\r\n            borderThickness, changeBorderThickness,\r\n            borderType,\r\n         } = this.props;\r\n\r\n        const previewStyle = generateBorderPreviewStyle(formState)\r\n    \r\n        return (\r\n            <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n                <div>\r\n                    <div className=\"directionControlsContainer\">\r\n                        <div className=\"directionsControls\" style={previewStyle}>\r\n                            <span className=\"directionLabel\">Left</span>\r\n                            <div className=\"centralColumn\">\r\n                                <span className=\"directionLabel\">Top</span>\r\n                                <div className=\"checkboxesKit crossGrid\">\r\n                                    <div id=\"r1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderTop}  \r\n                                            onChange={changeBorderTop}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c1\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderLeft}  \r\n                                            onChange={changeBorderLeft}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r2c2\" className=\"gridCell\">\r\n                                    </div>\r\n                                    <div id=\"r2c3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\" \r\n                                            checked={borderRight}  \r\n                                            onChange={changeBorderRight}\r\n                                        />\r\n                                    </div>\r\n                                    <div id=\"r3\" className=\"gridCell\">\r\n                                        <Checkbox \r\n                                            color=\"primary\"\r\n                                            checked={borderBottom}  \r\n                                            onChange={changeBorderBottom}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"directionLabel\">Bottom</span>\r\n                            </div>\r\n                            <span className=\"directionLabel\">Right</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialogGrid dialogGrid_2cols\">\r\n                        <span>Frame color</span>\r\n                        <ColorField \r\n                            colorCode={borderColor} \r\n                            changeColorCode={changeBorderColor}\r\n                            defaultColorCode={DEFAULT_BORDER_COLOR}\r\n                            required\r\n                        />\r\n        \r\n                        <span>Frame thickness</span>\r\n                        <div className=\"inputWithAdornment\">\r\n                            <TextField \r\n                                variant=\"outlined\" \r\n                                margin=\"dense\" \r\n                                className=\"numberInput\"\r\n                                value={borderThickness}\r\n                                onChange={changeBorderThickness}\r\n                                onClick={selectAllOnClick(DEFAULT_BORDER_THICKNESS)}\r\n                            />                                            \r\n                            <InputAdornment variant=\"filled\" position=\"end\">pt</InputAdornment>\r\n                        </div>                        \r\n        \r\n                        <span>Type of frame</span>\r\n                        <div >\r\n                            <Select\r\n                            input={<FrameTypeInput />}\r\n                            value={borderType}\r\n                            onChange={this.onBorderTypeChange}\r\n                            >\r\n                                <MenuItem value=\"solid\"><b>━━━━</b></MenuItem>\r\n                                <MenuItem value=\"dotted\">• • • • • • •</MenuItem>\r\n                                <MenuItem value=\"dashed\"><b>– – – – –</b></MenuItem>\r\n                                <MenuItem value=\"double\">══════</MenuItem>              \r\n                            </Select>\r\n                        </div>\r\n\r\n                        <ConnectToPreviousField />\r\n                    </div>\r\n                </div>\r\n                <div className=\"previewSide\">\r\n                    <Preview {...previewProps} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        formState: form,\r\n        borderLeft: form.borderLeft,\r\n        borderRight: form.borderRight,\r\n        borderTop: form.borderTop,\r\n        borderBottom: form.borderBottom,\r\n        borderColor: form.borderColor,\r\n        borderThickness: form.borderThickness,\r\n        borderType: form.borderType,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeBorderLeft: toggleValue(dispatch)(\"borderLeft\"),\r\n        changeBorderRight: toggleValue(dispatch)(\"borderRight\"),\r\n        changeBorderTop: toggleValue(dispatch)(\"borderTop\"),\r\n        changeBorderBottom: toggleValue(dispatch)(\"borderBottom\"),\r\n        changeBorderColor: setColor(dispatch)(\"borderColor\"),\r\n        changeBorderThickness: setNumber(dispatch)(\"borderThickness\"),\r\n        changeBorderType: setValue(dispatch)(\"borderType\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FramesSection));","import FramesSection from \"./FramesSection\";\r\nexport default FramesSection;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Preview from \"../common/Preview\";\r\nimport ColorField from \"../common/ColorField\";\r\nimport ConnectToPreviousField from \"../common/ConnectToPreviousField\";\r\nimport { setColor } from \"../actions\";\r\n\r\nconst  FillingSection = ({ previewProps, fillingColor, changeFillingColor }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_flexStartAligned\">\r\n            <div className=\"dialogGrid dialogGrid_2minCols\">\r\n                <span>Filling color</span>\r\n                <ColorField \r\n                    colorCode={fillingColor} \r\n                    changeColorCode={changeFillingColor}\r\n                />\r\n                <ConnectToPreviousField />\r\n            </div>\r\n            <div className=\"previewSide\">\r\n                <Preview {...previewProps} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        fillingColor: form.fillingColor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeFillingColor: setColor(dispatch)(\"fillingColor\"),\r\n    };\r\n};\r\n  \r\nexport default (connect(mapStateToProps, mapDispatchToProps)(FillingSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\r\n\r\nimport CustomInputShort from \"../common/CustomInputShort\";\r\nimport { setValue } from \"../actions\";\r\n\r\nconst TocSection = ({ tocIndentation, changeTocIndentation }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols\">\r\n            <span>ToC indentation</span>\r\n            <div>\r\n                <NativeSelect\r\n                    value={tocIndentation}\r\n                    onChange={changeTocIndentation} \r\n                    input={ <CustomInputShort /> }\r\n                >\r\n                    <option value=\"\">...</option>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                </NativeSelect>\r\n            </div>                    \r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        tocIndentation: form.tocIndentation,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeTocIndentation: setValue(dispatch)(\"tocIndentation\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(TocSection));","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { setShortCut } from \"../actions\";\r\n\r\nconst ShortCutSection = ({ shortCutWinView, shortCutMacView, changeShortCutWin, changeShortCutMac }) => {\r\n    return (\r\n        <div className=\"dialogGrid dialogGrid_2cols dialogGrid_rightAlignedLabels\">\r\n            <span>Mac</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutMacView}\r\n                    onKeyDown={changeShortCutMac}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n\r\n            <span>Windows</span>\r\n            <div className=\"largeTextField\">\r\n                <TextField\r\n                    value={shortCutWinView}\r\n                    onKeyDown={changeShortCutWin}\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form }}) => {\r\n    return { \r\n        shortCutWinView: form.shortCutWinView,\r\n        shortCutMacView: form.shortCutMacView,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {       \r\n        changeShortCutWin: setShortCut(dispatch)(\"shortCutWin\", \"shortCutWinView\"),\r\n        changeShortCutMac: setShortCut(dispatch)(\"shortCutMac\", \"shortCutMacView\"),\r\n    };\r\n};\r\n\r\nexport default (connect(mapStateToProps, mapDispatchToProps)(ShortCutSection));","import { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: pink,\r\n    },\r\n});\r\n\r\nexport default theme;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomTab;","import React from \"react\";\r\n\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst CustomErrorTab = withStyles(theme => ({\r\n    root: {\r\n      overflow: \"initial\",\r\n      backgroundColor: \"white\",\r\n      transition: \"0.2s\",\r\n      textDecoration: \"red underline\",\r\n\r\n      \"&:before\": {\r\n        transition: \"0.2s\",\r\n      },\r\n\r\n      \"&:hover\": {\r\n        color: \"#000\",\r\n      },\r\n      \"&$selected\": {\r\n        backgroundColor: \"#2196f3\",\r\n        color: \"white\",\r\n        opacity: 1,\r\n        textDecoration: \"indianred underline\",\r\n      },\r\n      \"&:hover:active\": {\r\n        backgroundColor: \"white\",\r\n        transition: \"0.2s\",\r\n      },\r\n      \"&$selected:hover:active\": {\r\n        backgroundColor: \"#2ca4ff\",\r\n      },\r\n    },\r\n    selected: {},\r\n    \r\n  }))(props => <Tab {...props} />);\r\n\r\n  export default CustomErrorTab;","import Tabs from \"@material-ui/core/Tabs\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n    indicator: {\r\n        backgroundColor: \"#1890ff\",\r\n        opacity: 0.5,\r\n        width: \"190px\",\r\n        zIndex: 5,\r\n        display: \"none\",\r\n    }\r\n};\r\n\r\nexport default withStyles(styles)(Tabs);","import { withStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst CustomDialog = withStyles(theme => ({\r\n    root: {\r\n        minWidth: \"1250px\",\r\n        minHeight: \"1100px !important\",\r\n        height: \"100%\",\r\n    },\r\n    container: {\r\n        height: \"100vh\",\r\n        display: \"block\",\r\n    },\r\n    scrollBody: {\r\n        \"&:after\": {\r\n            height: \"100%\",\r\n        }\r\n    },\r\n    paperFullWidth: {\r\n        maxWidth: \"1280px\",\r\n        maxHeight: \"850px\",\r\n        minHeight: \"550px\",\r\n        width: \"calc(100% - 96px)\",\r\n        height: \"calc(100% - 96px)\",\r\n        display: \"inline-flex\",\r\n        flexDirection: \"column\",\r\n        border: \"none\",\r\n    },\r\n    paperScrollBody: {\r\n        verticalAlign: \"middle\",\r\n    },\r\n  }))(Dialog);\r\n  \r\n  export default CustomDialog;","export const SAVE_DEC_FORM = \"SAVE_DEC_FORM\";\r\nexport const CLEAR_SAVED_DEC_FORM = \"CLEAR_SAVED_DEC_FORM\";\r\n\r\nexport const saveDecoratorForm = payload => {\r\n    return {\r\n        type: SAVE_DEC_FORM,\r\n        payload,\r\n    };\r\n};\r\n\r\nexport const clearSavedDecoratorForm = () => {\r\n    return {\r\n        type: CLEAR_SAVED_DEC_FORM,\r\n    };\r\n};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nimport NamesSection from \"./sections/NamesSection\";\r\nimport PositioningSection from \"./sections/PositioningSection\";\r\nimport ListSection from \"./sections/ListSection\";\r\nimport ReferencingSection from \"./sections/ReferencingSection\";\r\nimport TypographySection from \"./sections/TypographySection\";\r\nimport DistancesSection from \"./sections/DistancesSection\";\r\nimport FramesSection from \"./sections/FramesSection\";\r\nimport FillingSection from \"./sections/FillingSection\";\r\nimport TocSection from \"./sections/TocSection\";\r\nimport ShortCutsSection from \"./sections/ShortCutsSection\";\r\n// import TestSection from \"./sections/TestSection\";\r\n\r\nimport theme from \"./theme\";\r\nimport CustomTab from \"./common/CustomTab\";\r\nimport CustomErrorTab from \"./common/CustomErrorTab\";\r\nimport CustomTabs from \"./common/CustomTabs\";\r\nimport CustomDialog from \"./common/CustomDialog\";\r\nimport { saveDecoratorForm } from \"../../actions\";\r\nimport { \r\n    closeDialog, \r\n    clearDecoratorForm, \r\n    switchDecDialogTab, \r\n    updateValidationError \r\n} from \"./actions\";\r\nimport { \r\n    fillMissedFields, \r\n    DecDataConverter, \r\n    getTabsErrorState,\r\n    getTabNumberToSwitch,\r\n} from \"./helpers\";\r\n\r\nimport \"./style.css\";\r\n\r\nclass DecoratorDialog extends React.Component {\r\n    onClose = () => {\r\n        this.props.closeDialog();\r\n        this.props.clearForm();\r\n    };\r\n\r\n    onSaveButtonClick = () => {\r\n        const { formState, updateValidationError, switchTab, sendForm } = this.props;\r\n        const tabsErrorState = getTabsErrorState(formState);\r\n        if (tabsErrorState) {\r\n            updateValidationError(tabsErrorState);\r\n            switchTab(getTabNumberToSwitch(tabsErrorState));\r\n        } else {\r\n            const formToSend = DecDataConverter.convertToSend(fillMissedFields(formState));\r\n            sendForm(formToSend);\r\n            this.onClose();\r\n        }\r\n    };\r\n\r\n    onTabSwitch = (e, tabNumber) => {\r\n        this.props.switchTab(tabNumber);\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            isOpen, \r\n            openedTab,\r\n            validationError, \r\n            isEditMode,\r\n        } = this.props;\r\n    \r\n        return (\r\n            <ThemeProvider theme={theme}>\r\n                <CustomDialog\r\n                    open={isOpen}\r\n                    onClose={this.onClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                    scroll=\"body\"\r\n                    className=\"decoratorDialog\"\r\n                    fullWidth={true}\r\n                    maxWidth={false}\r\n                    id=\"dialog\"\r\n                >\r\n                    <div className=\"header\">\r\n                        <DialogTitle className=\"header-title\">\r\n                            <p>Create new paragraph decorator</p>\r\n                        </DialogTitle>\r\n                        <div className=\"header-buttons\">\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                onClick={this.onClose}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                            <Button \r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.onSaveButtonClick}\r\n                                className=\"topNavButton\"\r\n                            >\r\n                                {isEditMode ? \"Save\" : \"Create\"}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <DialogContent className=\"content\">\r\n                        <div className=\"content-leftSide\">\r\n                            <CustomTabs \r\n                                className=\"dialogTabs\"\r\n                                value={openedTab} \r\n                                onChange={this.onTabSwitch} \r\n                                orientation=\"vertical\"\r\n                                color=\"primary\"\r\n                                indicatorColor=\"primary\"\r\n                            >\r\n                                { validationError.namesSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"Decorator's name\" /> )\r\n                                    :  ( <CustomTab className=\"dialogTab\" label=\"Decorator's name\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Positioning\" />\r\n    \r\n                                { validationError.listSection \r\n                                    ? ( <CustomErrorTab className=\"dialogTab\" label=\"List\" /> ) \r\n                                    : ( <CustomTab className=\"dialogTab\" label=\"List\" /> ) }\r\n    \r\n                                <CustomTab className=\"dialogTab\" label=\"Referencing\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Typography\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Distances\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Frames\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Filling\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"ToC\" />\r\n                                <CustomTab className=\"dialogTab\" label=\"Short cuts\" />\r\n                                {/* <CustomTab className=\"dialogTab\" label=\"Test\" /> */}\r\n                            </CustomTabs>\r\n                        </div>\r\n                        <div className=\"content-rightSide\">\r\n                            { openedTab === 0 && <NamesSection /> }\r\n                            { openedTab === 1 && <PositioningSection /> }\r\n                            { openedTab === 2 && <ListSection /> }\r\n                            { openedTab === 3 && <ReferencingSection /> }\r\n                            { openedTab === 4 && <TypographySection /> }\r\n                            { openedTab === 5 && <DistancesSection /> }\r\n                            { openedTab === 6 && <FramesSection /> }\r\n                            { openedTab === 7 && <FillingSection /> }\r\n                            { openedTab === 8 && <TocSection /> }\r\n                            { openedTab === 9 && <ShortCutsSection /> }\r\n                            {/* openedTab === 10 && <TestSection /> */}\r\n                        </div>\r\n                    </DialogContent>\r\n                </CustomDialog>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ decoratorDialog: { form, isOpen, openedTab, validationError, isEditMode }}) => {\r\n    return { \r\n        formState: form,\r\n        isOpen,\r\n        openedTab,\r\n        validationError, \r\n        isEditMode,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        closeDialog: closeDialog(dispatch),\r\n        clearForm: () => dispatch(clearDecoratorForm()),\r\n        switchTab: payload => dispatch(switchDecDialogTab(payload)),\r\n        updateValidationError: payload => dispatch(updateValidationError(payload)),\r\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\r\n    };\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(DecoratorDialog);","import DecoratorDialog from \"./DecoratorDialog\";\r\nexport default DecoratorDialog;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport DecoratorDialog from \"./components/DecoratorDialog\";\nimport { openDialog } from \"./components/DecoratorDialog/actions\";\nimport { clearSavedDecoratorForm,  saveDecoratorForm } from \"./actions\";\nimport { DecDataConverter } from \"./components/DecoratorDialog/helpers\";\nimport theme from \"./components/DecoratorDialog/theme\";\n\nimport \"./App.css\";\n\nconst App = props => {\n    const { openDialog, saveForm, clearSavedForm, savedForm } = props;\n\n    const openEditDialog = () => {\n        openDialog(DecDataConverter.convertToEdit(savedForm || {}));\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"startButtons\">\n                    { !savedForm ? (\n                        <Button \n                            onClick={() => openDialog()}\n                            color=\"primary\"\n                        >Create new</Button>\n                    ) : (\n                        <>\n                            <Button \n                                onClick={() => openEditDialog()}\n                            >Edit saved</Button>\n                            <Button \n                                onClick={clearSavedForm}\n                                color=\"secondary\"\n                            >Delete saved</Button>\n                        </>\n                    )}\n                </div>\n                <DecoratorDialog sendForm={saveForm} />\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = ({ savedForm }) => {\n    return { savedForm };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openDialog: openDialog(dispatch),\n        saveForm: payload => dispatch(saveDecoratorForm(payload)),\n        clearSavedForm: () => dispatch(clearSavedDecoratorForm()),\n    };\n};\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SHOW_DEC_DIALOG, HIDE_DEC_DIALOG } from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isOpenReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SHOW_DEC_DIALOG:\r\n            return true;\r\n        case HIDE_DEC_DIALOG:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isOpenReducer;","import { UPDATE_DEC_FORM, CLEAR_DEC_FORM } from \"../../components/DecoratorDialog/actions\";\r\nimport { sampleText, initialFormState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst initialState = { \r\n    previewText: sampleText,\r\n    ...initialFormState,\r\n};\r\n\r\nconst decoratorFormReducer = (state = initialState, action) =>  {\r\n    switch (action.type) {\r\n        case UPDATE_DEC_FORM:\r\n            return { ...state, ...action.payload };\r\n        case CLEAR_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default decoratorFormReducer;","import { \r\n    UPDATE_VALIDATION_ERROR, \r\n    REMOVE_VALIDATION_ERROR, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nimport { tabsErrorInitialState } from \"../../components/DecoratorDialog/constants\";\r\n\r\nconst validationErrorReducer = (state = tabsErrorInitialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_VALIDATION_ERROR:\r\n            return { ...state, ...action.payload };\r\n        case REMOVE_VALIDATION_ERROR:\r\n            return tabsErrorInitialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default validationErrorReducer;","import { \r\n    SWITCH_ON_DEC_DIALOG_EDIT_MODE, \r\n    SWITCH_OFF_DEC_DIALOG_EDIT_MODE, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst isEditModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_ON_DEC_DIALOG_EDIT_MODE:\r\n            return true;\r\n        case SWITCH_OFF_DEC_DIALOG_EDIT_MODE:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default isEditModeReducer;","import { \r\n    SWITCH_DEC_DIALOG_TAB,\r\n    RESET_DEC_DIALOG_TAB, \r\n} from \"../../components/DecoratorDialog/actions\";\r\n\r\nconst initialState = 0;\r\n\r\nconst openedTabReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SWITCH_DEC_DIALOG_TAB:\r\n            return action.payload;\r\n        case RESET_DEC_DIALOG_TAB:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default openedTabReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport isOpenReducer from \"./isOpenReducer\";\r\nimport decoratorFormReducer from \"./decoratorFormReducer\";\r\nimport validationErrorReducer from \"./validationErrorReducer\";\r\nimport isEditModeReducer from \"./isEditModeReducer\";\r\nimport openedTabReducer from \"./openedTabReducer\";\r\n\r\nconst decoratorDialogReducer = combineReducers({\r\n    isOpen: isOpenReducer,\r\n    openedTab: openedTabReducer,\r\n    validationError: validationErrorReducer,\r\n    isEditMode: isEditModeReducer,\r\n    form: decoratorFormReducer,\r\n});\r\n\r\nexport default decoratorDialogReducer;","import { SAVE_DEC_FORM, CLEAR_SAVED_DEC_FORM } from \"../actions\";\r\n\r\nconst initialState = null;\r\n\r\nexport const savedFormReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SAVE_DEC_FORM:\r\n            return action.payload;\r\n        case CLEAR_SAVED_DEC_FORM:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedFormReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport decoratorDialogReducer from \"./decoratorDialogReducer\";\r\nimport savedFormReducer from \"./savedFormReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    decoratorDialog: decoratorDialogReducer,\r\n    savedForm: savedFormReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}